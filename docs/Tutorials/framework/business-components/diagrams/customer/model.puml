@startuml
'https://plantuml.com/class-diagram

!theme gambio from ../gambio-puml-theme

interface IteratorAggregate

package Gambio\Core\Event\EventRaisingEntity {
	abstract class AbstractEventRaisingEntity
}

package Gambio\Admin\Modules\Customer\Model\Collections {

    class Customers {
        + {static} create(Customer ...$customers): Customers
        + toArray(): array
    }

    class CustomerIds {
        + {static} create(CustomerId ...$customerIds): CustomerIds
        + toArray(): array
    }

}

package Gambio\Admin\Modules\Customer\Model {

    class Customer <<Aggregate Root>> {
        - isFavorite: bool
        --
        + {static} create( \
        \n    CustomerId $customerId, CustomerGroup $customerGroup \
        \n    PersonalInformation $personalInformation, BusinessInformation $businessInformation,\
        \n    ContactInformation $contactInformation, Credit $credit, $isGuestAccount = false, $isFavorite = false\
        \n): Customer
        + toArray(string $datetimeFormat = 'Y-m-d H:i:s'): array
        ..
        + changeCustomerGroup(CustomerGroup $customerGroup): void
        + changePersonalInformation(PersonalInformation $personalInformation): void
        + changeBusinessInformation(BusinessInformation $businessInformation): void
        + changeContactInformation(ContactInformation $contactInformation): void
        + changeCredit(CustomerCredit $credit): void
        + changeIsFavoriteState(bool $isFavorite): void
        ..
        + id(): int
        + customerGroup(): int
        + gender(): string
        + firstName(): string
        + lastName(): string
        + dateOfBirth(string $datetimeFormat = 'Y-m-d H:i:s'): ?string
        + customerNumber(): string
        + companyName(): string
        + vatID(): string
        + isMerchant(): bool
        + email(): string
        + phoneNumber(): string
        + faxNumber(): string
        + credit(): float
        + isGuestAccount(): bool
        + isFavorite(): bool
    }

}

package Gambio\Admin\Modules\Customer\Model\ValueObjects {

    class CustomerId {
        - value: int
        --
        + {static} create(int $customerId): CustomerId
        ..
        + value(): int
    }

    class CustomerGroup {
        - id: int
        --
        + {static} create(int $customerGroup): CustomerGroup
        ..
        + id(): int
    }

    class CustomerGender {
        + {static} GENDER_MALE: string = 'm'
        + {static} GENDER_FEMALE: string = 'f'
        + {static} GENDER_OTHER: string = 'o'
        + {static} GENDER_ALLOWED_VALUES: array = ['m', 'f', 'o', '']
        ..
        - value: string
        --
        + {static} create(string $value = ''): CustomerGender
        + value(): string
    }

    class PersonalInformation {
        - firstName: string
        - lastName: string
        - dateOfBirth: ?DateTimeImmutable
        - customerNumber: string
        --
        + {static} create(\
        \n    string $gender, string $firstName = '', string $lastName = '',\
        \n    string $customerNumber = '', ?DateTimeImmutable $dateOfBirth = null\
        \n): PersonalInformation
        + toArray(string $datetimeFormat = 'Y-m-d H:i:s'): array
        ..
        + gender(): string
        + firstName(): string
        + lastName(): string
        + dateOfBirth(string $datetimeFormat = 'Y-m-d H:i:s'): ?string
        + customerNumber(): string
    }

    class BusinessInformation {
        - companyName: string
        - vatID: string
        - isMerchant: bool
        --
        + {static} create(string $companyName = '', string $vatID = '', bool $isMerchant = false): BusinessInformation
        + toArray(): array
        ..
        + companyName(): string
        + vatID(): string
        + isMerchant(): bool
    }

    class ContactInformation {
        - email: string
        - phoneNumber: string
        - faxNumber: string
        --
        + {static} create(string $email, string $phoneNumber = '', string $faxNumber = ''): ContactInformation
        + toArray(): array
        ..
        + email(): string
        + phoneNumber(): string
        + faxNumber(): string
    }

    class CustomerCredit {
        - credit: float
        --
        + {static} create(float $credit = 0.0): Credit
        ..
        + credit(): float
    }

}

AbstractEventRaisingEntity <|-- Customer

Customers o- Customer
Customers -up-|> IteratorAggregate

CustomerIds o- CustomerId
CustomerIds -up-|> IteratorAggregate

Customer *-- CustomerId
Customer *-- PersonalInformation
Customer *-- BusinessInformation
Customer *-- ContactInformation
Customer *-- Credit

PersonalInformation *-- CustomerGender

note top of PersonalInformation: Currently, the default value of dob is "1000-01-01 00:00:00"\n\
which sucks ... what are we going to do with that?\n\
API v2 default value is the current date.

@enduml