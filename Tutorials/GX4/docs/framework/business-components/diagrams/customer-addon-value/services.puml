@startuml
'https://plantuml.com/class-diagram

!theme gambio from ../gambio-puml-theme

package Gambio\Admin\Modules\Customer\Submodules\AddonValues\Services {
	class CustomerAddonValueFactory {
		+ createCustomerAddonValues(CustomerAddonValue ...$customerAddonValues): CustomerAddonValues
		+ createCustomerAddonValueIds(CustomerAddonValueId ...$customerAddonValueId): CustomerAddonValueIds
		+ createCustomerAddonValueId(int $customerId, string $key): CustomerAddonValueId
		+ createCustomerAddonValueKey(string $key): CustomerAddonValueKey
		+ createCustomerId(int $customerId): CustomerId
	}

	interface CustomerAddonValueReadService {
		+ getCustomerAddonValue(int $customerId, string $key): CustomerAddonValue
		+ getCustomerAddonValues(int $customerId): CustomerAddonValues
	}

	interface CustomerAddonValueFilterService {
		+ filterCustomerAddonValues(int $customerId, array $filters, ?string $sorting = null, int $limit = 25, int $offset = 0): CustomerAddonValues
		+ getCustomerAddonValuesTotalCount(int $customerId, array $filters): int
	}

	interface CustomerAddonValueWriteService {
		+ createCustomerAddonValue(int $customerId, string $key, string $value): CustomerAddonValueId
		+ createMultipleCustomerAddonValues(array ...$creationArguments): CustomerAddonValueIds
		+ storeCustomerAddonValues(CustomerAddonValue ...$customerAddonValues): void
		+ deleteCustomerAddonValuesByIds(array ...$customerAddonValueIds): void
		+ deleteCustomerAddonValuesByKeys(string ...$keys): void
		+ deleteCustomerAddonValuesByCustomerIds(int ...$ids): void
	}

	interface CustomerAddonValueStorage {
		+ setValue(int $customerId, string $key, string $value): void
		+ getValue(int $customerId, string $key, string $defaultValue = ''): string
	}

	note bottom of CustomerAddonValueStorage: "setValue"-method creates new customer addon value if it doesn't exist.\n\
Otherwise the existing one will be updated.

	interface CustomerAddonValueRepository {
		+ getCustomerAddonValue(CustomerId $customerId, CustomerAddonValueKey $key): CustomerAddonValue
		+ getCustomerAddonValues(CustomerId $customerId): CustomerAddonValues
		+ filterCustomerAddonValues(CustomerId $customerId, Filters $filters, Sorting $sorting, Pagination $pagination): CustomerAddonValues
		+ getCustomerAddonValuesTotalCount(CustomerId $customerId, Filters $filters): int
		+ createCustomerAddonValue(CustomerId $customerId, CustomerAddonValueKey $key, string $value): CustomerAddonValueId
		+ createMultipleCustomerAddonValues(array ...$creationArguments): CustomerAddonValueIds
		+ storeCustomerAddonValues(CustomerAddonValue ...$customerAddonValues): void
		+ deleteCustomerAddonValuesByIds(CustomerAddonValueId ...$customerAddonValueIds): void
		+ deleteCustomerAddonValuesByKeys(CustomerAddonValueKey ...$keys): void
		+ deleteCustomerAddonValuesByCustomerIds(CustomerId ...$customerIds): void
	}
}

package Gambio\Admin\Modules\Customer\Submodules\AddonValues\Services\Exceptions {
	left to right direction

	class CustomerAddonValueDoesNotExistException
	class CreationOfCustomerAddonValueFailedException
	class DeletionOfCustomerAddonValueFailedException
	class StorageOfCustomerAddonValueFailedException
	class CustomerAddonValueKeyAlreadyExistsException
}

CustomerAddonValueDoesNotExistException -up-|> Exception
CreationOfCustomerAddonValueFailedException -up-|> Exception
DeletionOfCustomerAddonValueFailedException -up-|> Exception
StorageOfCustomerAddonValueFailedException -up-|> Exception
CustomerAddonValueKeyAlreadyExistsException -up-|> CreationOfCustomerAddonValueFailedException

@enduml