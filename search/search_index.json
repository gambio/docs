{"config":{"lang":["de"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tutorials","text":"<p>On this page, we provide you with all kind of tutorials supporting you to start developing within the Gambio shop system quickly.</p> <ul> <li> <p> Set up in 5 minutes</p> <p>In the section Development Environment, we will show you how to quickly and easily set up the development environment and start developing your modules.</p> <p> Getting started</p> </li> <li> <p> Architecture</p> <p>The Architecture and Framework section gives you an overview of the architecture of the shop software and its components and helpful services.</p> <p> Reference</p> </li> <li> <p> Modules</p> <p>How to create your modules and what's essential regarding the store and admin area will be explained in the Module Development section.</p> <p>Of course, we have also prepared a few sample modules for you, which can be found in the Sample Modules section.</p> <p> Module Development</p> </li> <li> <p> Themes</p> <p>The Theme Development section provides step-by-step instructions for creating a new theme with modifications and your contents.</p> <p> License</p> </li> </ul> <p>Of course, we have also prepared a few sample modules for you, which can be found in the Sample Modules section.</p>"},{"location":"API/","title":"REST API","text":""},{"location":"API/#general-information","title":"General Information","text":"<p>Since GX v4.1.1.0 there is a new REST API version available. Similar to the existing v2 API, the new endpoints can be called via <code>https://www.your-shop-domain.de/path-to-shop/api.php/v3</code>.</p>"},{"location":"API/#error-handling","title":"Error Handling","text":"<p>Every error response will contain a valid HTTP Status Code. The response body itself will provided error information based on the current mode of the application (develop or production). If there is a <code>.dev-environment</code> file exists in the base directory of the shop, the develop mode is active and the response body will contain not only a error message itself, but also a stack trace of the error.</p>"},{"location":"API/#hateoas-support","title":"HATEOAS Support","text":"<p>HATEOAS stands for Hypermedia as the Engine of Application State and describes the use of links which point to external resources or actions that are related to a specific resource. The API will provide links inside the response body, if available.</p>"},{"location":"API/#http-caching-support","title":"HTTP Caching Support","text":"<p>Web caching is not currently supported by any resource but is planned for a future release of the API. Caching support will be stated in each section explicitly and the API will return an <code>ETag</code> or <code>Last-Modified</code> along with an <code>Expires</code> headers, containing information about the provided response.</p>"},{"location":"API/#usage-with-postman","title":"Usage with Postman","text":"<p>Postman is a third party graphical user interface to easily communicate with RESTful APIs. It enables you to directly import the swagger-defined GX4 API v3 specification, which we provide for you (link is at the top of this page).</p> <p>Importing the specification into Postman automatically provides you with all API-Endpoints available and additionally, most variables are already declared, allowing you to quickly explore the GX4 RESTful API v3.</p>"},{"location":"API/#defining-your-api-location","title":"Defining your API location","text":"<p>Once you downloaded the <code>swagger.json</code>, it is advised to manually re-define your API's location according to your hosting. To do so, open the previously downloaded <code>swagger.json</code> with a text-editor of your choice, and you will see a JSON document defining all of the API's available communication.</p> <p>To quickly customize the specification to your needs, change the following values at the beginning of the document by replacing the string <code>https://www.gambio-shop.de/shop1</code> according to your setup:</p> <p><code>json   {     //...     \"servers\": [       {         \"url\": \"https://www.gambio-shop.de/shop1\"       }     ],     //...   }</code></p>"},{"location":"API/#importing-into-postman","title":"Importing into Postman","text":"<p>Once the above stated changes were manually applied, you may proceed to open Postman. Navigate to <code>File -&gt; Import...</code> in Postman's top menu bar. Once clicked, a dialog will open asking you to specify what to import. Either drag the edited <code>swagger.json</code> into the dialog, or click the <code>Choose Files</code> button and point Postman to the document. Once the API's <code>swagger.json</code> was imported into postman, you will have a Postman collection called <code>Gambio REST API v3</code> available, allowing you to quickly dive into the Gambio GX4 RESTful API v3.</p>"},{"location":"API/#optional-query-parameters","title":"Optional Query Parameters","text":"<p>There are some optional query parameters, that can be used for endpoints that generally return a collection of documents.</p> <p>Note: The attributes that can be used for the following actions, are the same like the attributes of the documents in the HTTP response. A dot <code>.</code> can be used to address attributes in on a deeper level.</p>"},{"location":"API/#filtering","title":"Filtering","text":"<p>You can filter the documents of a collection by using the query parameter <code>filter</code> like:</p> <ul> <li>GET <code>/api.php/v3/withdrawals?filter[customer.firstName]=John</code> will return all withdrawals of customers with first   name <code>John</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[customer.firstName]=J*</code> will return all withdrawals of customers whose first   name begins with <code>J</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[customer.firstName]=J*&amp;filter[id]=*1</code> will return all withdrawals of customers   whose first name begins with <code>J</code> and withdrawal IDs will end with an one.</li> <li>GET <code>/api.php/v3/withdrawals?filter[id]=gt|42</code> will return all withdrawals with an ID that is greater than <code>42</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[id]=gte|42</code> will return all withdrawals with an ID that is equals or greater   than <code>42</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[id]=lt|42</code> will return all withdrawals with an ID that is less than <code>42</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[id]=lte|42</code> will return all withdrawals with an ID that is equals or less   than <code>42</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[id]=neq|42</code> will return all withdrawals with an ID that is not equal to <code>42</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[date]=eq|2020-04-05</code> or GET <code>/api.php/v3/customers?filter[date]=2020-04-05</code>   will return all withdrawals with a withdrawal date of <code>2020-04-05</code>.</li> <li>GET <code>/api.php/v3/withdrawals?filter[createdByAdmin]=1</code> will return all withdrawals that have been created by an   admin.</li> </ul>"},{"location":"API/#sorting","title":"Sorting","text":"<p>The sorting order can be modified by using the query parameter <code>sort</code>. This parameter always expects a comma separated list of the document attributes. A <code>+</code> (ascending) or <code>-</code> (descending) at the beginning of a attribute can be used modify the order. If no specific order is provided than a ascending order should be used.</p> <p>Example: <code>/api.php/v3/withdrawals?sort=-customer.firstName,+customer.lastName</code></p>"},{"location":"API/#pagination","title":"Pagination","text":"<p>The query parameters <code>page</code> and <code>per-page</code> can be used for pagination.</p> <p>Example: <code>/api.php/v3/withdrawals?per-page=5&amp;page=3</code></p>"},{"location":"API/#trim-documents","title":"Trim documents","text":"<p>Endpoint providing a collection of specific documents (like <code>/api.php/v3/withdrawals</code>), offer the possibility to reduce the amount of information inside the provided documents. By using the query parameter <code>fields</code> you are able to provided a comma separated list of document attributes, which describe the structure of the returned documents.</p> <p>Example: <code>/api.php/v3/withdrawals?fields=id,customer.firstName,customer.lastName</code></p>"},{"location":"API/v2/","title":"API v2 <span class=\"api-version\"></span>","text":""},{"location":"API/v2/#api-v2","title":"API v2","text":"<p>This is the Gambio GX Restful API documentation for the GX shop software. You can find out more about Gambio at http://www.gambio.de.</p>"},{"location":"API/v2/#address_formats","title":"address_formats","text":""},{"location":"API/v2/#get-address_formats","title":"GET /address_formats","text":"<p>Get Address Formats</p> Description <p>Get all address formats or a single address format.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#addresses","title":"addresses","text":""},{"location":"API/v2/#delete-addressesaddress_id","title":"DELETE /addresses/{address_id}","text":"<p>Delete Address</p> Description <p>Remove an address record from the system. This method will always return success even if the address record does not exist (due to internal architecture decisions, which strive to avoid unnecessary failures).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>address_id</code> path None No The ID of the address to be removed <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-addressesaddress_id","title":"GET /addresses/{address_id}","text":"<p>Get Address (Single)</p> Description <p>Get a single address record through a GET requets. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>address_id</code> path None No The ID of the address to fetch <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-addressesaddress_id","title":"PUT /addresses/{address_id}","text":"<p>Update Address</p> Description <p>Update an existing address record by providing new data. You do not have to provide the full presentation of the address in the JSON string of the request, rather just the fields to be updated. The address ID will be taken from the URI of the request so it is not required that it is included withing the request JSON.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>address_id</code> path None No The ID of the address to be updated <p> Response 200 OK </p>"},{"location":"API/v2/#get-addresses","title":"GET /addresses","text":"<p>Get Addresses (Multiple)</p> Description <p>Get multiple address records through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-addresses","title":"POST /addresses","text":"<p>Create Address</p> Description <p>Create an address record for a customer in the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>address</code> body None No The address to be created <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#attachments","title":"attachments","text":""},{"location":"API/v2/#post-attachments","title":"POST /attachments","text":"<p>Upload Attachment</p> Description <p>If an email contains an attachment this must be uploaded before the email is sent. This method accepts the upload of one file at a time. It will return its temporary path which can be used as the attachment path in the email JSON data. The name of the file form field is not taken into concern (can be whatever). The important rule is that only one file will be uploaded at a time and that you are sending the Content-Type: multipart/form-data header instead of application/json.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>filename</code> formData None No The final filename <code>upload_attachment</code> formData None No The attachment to upload <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#cache","title":"cache","text":""},{"location":"API/v2/#delete-cache","title":"DELETE /cache","text":"<p>Clear Shop Cache</p> Description <p>Clear the shop cache with a DELETE request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p>"},{"location":"API/v2/#category_icons","title":"category_icons","text":""},{"location":"API/v2/#delete-category_icons","title":"DELETE /category_icons","text":"<p>Delete Category Icon</p> Description <p>Removes the category icon file from the server. This method will always provide a successful response even if the image file was not found.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-category_icons","title":"GET /category_icons","text":"<p>Get Category Icons</p> Description <p>Returns a list of all category icon files which exists in the servers filesystem through a GET request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-category_icons","title":"POST /category_icons","text":"<p>Upload Category Icon</p> Description <p>Upload an icon image for the categories. Make sure this request with Content-Type: multipart/form-data header instead of application/json. Except from the file the POST request must also contain a \"filename\" value with the final filename.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>filenae</code> formData None No The final filename <code>uploaded_file</code> formData None No The icon to upload <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-category_icons","title":"PUT /category_icons","text":"<p>Rename Icon File</p> Description <p>Use this method to rename an existing icon file.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#category_images","title":"category_images","text":""},{"location":"API/v2/#delete-category_images","title":"DELETE /category_images","text":"<p>Delete Category Image</p> Description <p>Removes the category image file from the server. This method will always provide a successful response even if the image file was not found.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-category_images","title":"GET /category_images","text":"<p>Get Category Images</p> Description <p>Get a list of all category image files which exists in the server's filesystem through a GET request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-category_images","title":"POST /category_images","text":"<p>Upload Category Image</p> Description <p>Uploads an icon image for the categories. Make sure this request with Content-Type: multipart/form-data header instead of application/json. Except from the file the POST request must also contain a \"filename\" value with the final filename.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>filename</code> formData None No The final filename <code>upload_category_image</code> formData None No The category image to upload <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-category_images","title":"PUT /category_images","text":"<p>Rename Image File</p> Description <p>Use this method to rename an existing image file.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#countries","title":"countries","text":""},{"location":"API/v2/#get-countriescountry_id","title":"GET /countries/{country_id}","text":"<p>Get Countries (Single)</p> Description <p>Get a single country. This method is currently limited to only fetching a single country resource so make sure that you provide the country ID in the request URI.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>country_id</code> path None No The country ID <p> Response 200 OK </p> <p> Response 500 Internal Server Error </p> <p> Response 501 Not Implemented </p>"},{"location":"API/v2/#get-countriescountry_idzones","title":"GET /countries/{country_id}/zones","text":"<p>Get Countries Zones</p> Description <p>Get a single countrys zones. This method is currently limited to only fetching a single countrys zone resource so make sure that you provide the country ID in the request URI.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>country_id</code> path None No The country ID <p> Response 200 OK </p> <p> Response 500 Internal Server Error </p> <p> Response 501 Not Implemented </p>"},{"location":"API/v2/#cronjobs","title":"cronjobs","text":""},{"location":"API/v2/#post-cronjobsimage_processing","title":"POST /cronjobs/image_processing","text":"<p>Set ImageProcessing Trigger</p> Description <p>Set a trigger for the ImageProcessing cronjob to regenerate the product images using a POST request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#customer_groups","title":"customer_groups","text":""},{"location":"API/v2/#delete-customer_groupscustomer_group_id","title":"DELETE /customer_groups/{customer_group_id}","text":"<p>Delete Customer Groups</p> Description <p>Removes a customer groups record from the system. This method will always return success even if the customer group does not exist.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_group_id</code> path None No Customer Group ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-customer_groupscustomer_group_id","title":"GET /customer_groups/{customer_group_id}","text":"<p>Get customer groups</p> Description <p>Get multiple or a single customer groups record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_group_id</code> path None No The customer group ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#patch-customer_groupscustomer_group_id","title":"PATCH /customer_groups/{customer_group_id}","text":"<p>Updates CustomerGroup entity</p> Description <p>Use this method if you want to update an existing customer groups record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_group_id</code> path None No The customer group ID <code>GXCustomerGroup</code> body None No The customer group <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-customer_groups","title":"POST /customer_groups","text":"<p>Create CustomerGroups</p> Description <p>This method enables the creation of a new CustomerGroups into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCustomerGroup</code> body None No The customer group <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#customers","title":"customers","text":""},{"location":"API/v2/#delete-customerscustomer_ids","title":"DELETE /customers/{customer_ids}","text":"<p>Delete Customers</p> Description <p>Removes customer records from the system. This method will always return success even if the customers do not exist (due to internal CustomerWriteService architecture decisions, which strive to avoid unnecessary failures). An example script to demonstrate how to delete a customer is located under <code>./docs/REST/samples/customer- service/remove_account.php</code> in the git clone.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_ids</code> path None No A comma-seperated list of customer IDs to delete <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-customers","title":"GET /customers","text":"<p>Get Customers</p> Description <p>Get customer records through the GET method. This resource supports the following GET parameters as described in the first section of documentation: sorting minimization, search, pagination and links. Additionally you can filter customers by providing the GET parameter \"type=guest\" or \"type=registree\". Sort and pagination GET parameters do not apply when a single customer record is selected (e.g. api.php/v2/customers/84). An example script to demonstrate how to fetch customer data is located under <code>./docs/REST/samples/customer-service/get_admin_data.php</code> in the git clone Important: Currently the CustomerReadService does not support searching in address information of a customer.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>changed</code> query None No *Optional parameter*. If provided, receive a change history of items that were **changed/deleted** at the given date. <code>deleted</code> query None No *Optional parameter*. If provided, receive a change history of items that were **deleted** at the given date. <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>modified</code> query None No *Optional parameter*. If provided, receive a change history of items that were **modified** at a given date. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-customers","title":"POST /customers","text":"<p>Create Customers</p> Description <p>This method enables the creation of new customers (whether registree or a guest). Additionally the user can provide new address information or just set the id of an existing one. Check the examples bellow. An example script to demonstrate the creation of a new customer is located under <code>./docs/REST/samples/customer-service/create_account.php</code> in the git clone, another one to demonstrate the creation of a guest customer is located under <code>./docs/REST/samples/customer-service/create_guest_account.php</code>.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCustomerArray</code> body array No An array of customers <p> Response 201 Created </p> <p> Response 400 Bad Request </p> <p> Response 409 Conflict </p>"},{"location":"API/v2/#put-customers","title":"PUT /customers","text":"<p>Update Customers (Multiple)</p> Description <p>Use this method to update multiple existing customer records. It takes an array of GXCustomer Objects, identified by their id property.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCustomerArray</code> body array No An array of products to update. <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-customerscustomer_id","title":"GET /customers/{customer_id}","text":"<p>Get Customer (Single)</p> Description <p>Get a single customer record through the GET method. This resource supports the following GET parameters as described in the first section of documentation: sorting minimization, search, pagination and links. Additionally you can filter customers by providing the GET parameter \"type=guest\" or \"type=registree\". Sort and pagination GET parameters do not apply when a single customer record is selected (e.g. api.php/v2/customers/84). An example script to demonstrate how to fetch customer data is located under <code>./docs/REST/samples/customer- service/get_admin_data.php</code> in the git clone Important: Currently the CustomerReadService does not support searching in address information of a customer.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_id</code> path None No The customer ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-customerscustomer_id","title":"PUT /customers/{customer_id}","text":"<p>Update Customer</p> Description <p>This method will update the information of an existing customer record. You will need to provide all the customer information with the request (except from password and customer id). Also note that you only have to include the \"addressId\" property. An example script to demonstrate how to update the admin accounts telephone number is located under <code>./docs/REST/samples/customer-service/update_admin_telephone.php</code> in the git clone.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_id</code> path None No The customer ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p> <p> Response 409 Conflict </p>"},{"location":"API/v2/#post-customerssearch","title":"POST /customers/search","text":"<p>Search Customers</p> Description <p>Returns multiple customers that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#emails","title":"emails","text":""},{"location":"API/v2/#delete-emailsemail_id","title":"DELETE /emails/{email_id}","text":"<p>Delete Email</p> Description <p>Delete an email record from database. To see an example usage take a look at <code>docs/REST/samples/email-service/remove_email.php</code>.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>email_id</code> path None No The email ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-emailsemail_id","title":"GET /emails/{email_id}","text":"<p>Get Emails</p> Description <p>Get a single email record through the GET method. This resource supports the following GET parameters as described in the first section of documentation: sorting minimization, search, pagination. Additionally you can filter emails by providing the GET parameter \"state=pending\" or \"state=sent\". These filter parameters do not apply when a single emails record is selected (e.g. api.php/v2/emails/84) or when the emails are searched by the \"q\" parameter. To see an example usage take a look at <code>docs/REST/samples/email- service/fetch_email.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>email_id</code> path None No The email ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-emailsemail_id","title":"POST /emails/{email_id}","text":"<p>Send Email</p> Description <p>This method will send and save a new or an existing email to the system. If you include mail attachments then they must already exist in the server. You will need to provide the full path to the file. To see an example usage take a look at <code>docs/REST/samples/email-service/send_email.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>email_id</code> path None No The email ID <code>GXCustomerEmail</code> body None No The email <p> Response 201 Created </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-emails","title":"PUT /emails","text":"<p>Queue Email</p> Description <p>This method will queue a new email so that it can be send later (with the POST method). See the \"post\" method for parameter description. To see an example usage take a look at <code>docs/REST/samples/email- service/queue_email.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCustomerEmail</code> body None No The email <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#languages","title":"languages","text":""},{"location":"API/v2/#get-languages","title":"GET /languages","text":"<p>Get Languages (Multiple)</p> Description <p>Get multiple languages record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p>"},{"location":"API/v2/#manufacturers","title":"manufacturers","text":""},{"location":"API/v2/#delete-manufacturersmanufacturer_id","title":"DELETE /manufacturers/{manufacturer_id}","text":"<p>Delete Manufacturers</p> Description <p>Removes a manufacturers record from the system. This method will always return success even if the manufacturers does not exist (due to internal ManufacturersWriteService architecture decisions, which strive to avoid unnecessary failures).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>manufacturer_id</code> path None No The manufacturers ID <p> Response 200 OK </p> <p> Response 500 Internal Server Error </p>"},{"location":"API/v2/#get-manufacturersmanufacturer_id","title":"GET /manufacturers/{manufacturer_id}","text":"<p>Get Manufacturers</p> Description <p>Get a single manufacturers record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>manufacturer_id</code> path None No The manufacturers ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#patch-manufacturersmanufacturer_id","title":"PATCH /manufacturers/{manufacturer_id}","text":"<p>Updates Manufacturers</p> Description <p>Use this method if you want to update an existing manufacturers record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXManufacturer</code> body None No The manufacturer <code>manufacturer_id</code> path None No The manufacturer ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p> <p> Response 500 Internal Server Error </p>"},{"location":"API/v2/#get-manufacturers","title":"GET /manufacturers","text":"<p>Get Manufacturers (Multiple)</p> Description <p>Get multiple manufacturers record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-manufacturers","title":"POST /manufacturers","text":"<p>Create Manufacturers</p> Description <p>This method enables the creation of a new Manufacturers into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXManufacturer</code> body None No The manufacturer <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-manufacturerssearch","title":"POST /manufacturers/search","text":"<p>Search Manufacturers</p> Description <p>Returns multiple manufacturers that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>SearchCondition</code> body None No The search condition <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#order_statuses","title":"order_statuses","text":""},{"location":"API/v2/#delete-order_statusesorder_status_id","title":"DELETE /order_statuses/{order_status_id}","text":"<p>Delete Order Status</p> Description <p>Removes a order status record from the system. This method will always return success.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_status_id</code> path None No The order status ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-order_statusesorder_status_id","title":"GET /order_statuses/{order_status_id}","text":"<p>Get order statuses (Single)</p> Description <p>Get a single order status entries.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_status_id</code> path None No The order status ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-order_statusesorder_status_id","title":"PUT /order_statuses/{order_status_id}","text":"<p>Update Order Status</p> Description <p>This method updates a order status in the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderStatus</code> body None No The order status <code>order_status_id</code> path None No The order status ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-order_statuses","title":"GET /order_statuses","text":"<p>Get order statuses (Multiple)</p> Description <p>Get a multiple order status entries.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-order_statuses","title":"POST /order_statuses","text":"<p>Create Order Status</p> Description <p>This method creates a new order status in the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderStatus</code> body None No The order status <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#orders","title":"orders","text":""},{"location":"API/v2/#delete-ordersorder_id","title":"DELETE /orders/{order_id}","text":"<p>Delete Order</p> Description <p>Remove an entire Order record from the database. This method will also remove the order-items along with their attributes and the order-total records. To see an example usage take a look at <code>docs/REST/samples/order- service/remove_order.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-ordersorder_id","title":"GET /orders/{order_id}","text":"<p>Get Order (Single)</p> Description <p>Get a single order record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. Important: Whenever you make requests that will return multiple orders the response will contain a smaller version of each order record called order-list-item. This is done for better performance because the creation of a complete order record takes significant time (many objects are involved). If you still need the complete data of an order record you will have to make an extra GET request with the ID provided.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#put-ordersorder_id","title":"PUT /orders/{order_id}","text":"<p>Update Order</p> Description <p>Use this method to update an existing order record. It uses the complete order JSON resource so it might be useful to fetch it through a GET request, alter its values and PUT it back in order to perform the update operation. Take a look in the POST method for more detailed explanation on every resource property. To see an example usage take a look at <code>docs/REST/samples/order-service/update_order.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#delete-ordersorder_iditemsitem_id","title":"DELETE /orders/{order_id}/items/{item_id}","text":"<p>Delete Order Item</p> Description <p>Use this method to remove an order item from an existing order.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-ordersorder_iditemsitem_id","title":"GET /orders/{order_id}/items/{item_id}","text":"<p>Get Order Item (Single)</p> Description <p>Get a single order item from an existing order. All the GET manipulation parameters are applied with this method (search, sort, minimize, paginate etc).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#put-ordersorder_iditemsitem_id","title":"PUT /orders/{order_id}/items/{item_id}","text":"<p>Update Order Item</p> Description <p>Use this method to update an existing order item. Use the same order item JSON format as in the POST method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderItem</code> body None No The order item <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#delete-ordersorder_iditemsitem_idattributesattribute_idproperty","title":"DELETE /orders/{order_id}/items/{item_id}/attributes/{attribute_id}/Property","text":"<p>Delete Order Item Attribute/Property</p> Description <p>Removes a single order item attribute/property entry from an existing order item record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>attribute_id</code> path None No The attribute ID <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-ordersorder_iditemsitem_idattributesattribute_idproperty","title":"GET /orders/{order_id}/items/{item_id}/attributes/{attribute_id}/Property","text":"<p>Get Order Item Attribute/Property (Single)</p> Description <p>Returns single order item attribute/property record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>attribute_id</code> path None No The attribute ID <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#put-ordersorder_iditemsitem_idattributesattribute_idproperty","title":"PUT /orders/{order_id}/items/{item_id}/attributes/{attribute_id}/Property","text":"<p>Update Order Item Attribute/Property</p> Description <p>Use this method to update an existing order item attribute record. It uses the same attribute JSON format as in the \"Create Order Item Attribute\" method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>attribute_id</code> path None No The attribute ID <code>GXOrderItemAttributes</code> body None No The order item attributes <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#delete-ordersorder_idtotalstotal_id","title":"DELETE /orders/{order_id}/totals/{total_id}","text":"<p>Delete Order Total</p> Description <p>Use this method to remove an order total from an existing order.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <code>total_id</code> path None No The total ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-ordersorder_idtotalstotal_id","title":"PUT /orders/{order_id}/totals/{total_id}","text":"<p>Update Order Total</p> Description <p>Use this method to update an existing order total. Use the same order total JSON format as in the POST method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrder</code> body None No The order <code>order_id</code> path None No The order ID <code>total_id</code> path None No The total ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-orders","title":"GET /orders","text":"<p>Get Orders (Multiple)</p> Description <p>Get multiple order list item records through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. Important: Whenever you make requests that will return multiple orders the response will contain a smaller version of each order record called order-list-item. This is done for better performance because the creation of a complete order record takes significant time (many objects are involved). If you still need the complete data of an order record you will have to make an extra GET request with the ID provided.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>changed</code> query None No *Optional parameter*. If provided, receive a change history of items that were **changed/deleted** at the given date. <code>deleted</code> query None No *Optional parameter*. If provided, receive a change history of items that were **deleted** at the given date. <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>modified</code> query None No *Optional parameter*. If provided, receive a change history of items that were **modified** at a given date. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-orders","title":"POST /orders","text":"<p>Create Order</p> Description <p>This method enables the creation of a new order into the system. The order can be bound to an existing customer or be standalone as implemented in the OrderService. Make sure that you check the Order resource representation. To see an example usage take a look at <code>docs/REST/samples/order- service/create_order.php</code>.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrder</code> body None No The order <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-ordersorder_idhistory","title":"GET /orders/{order_id}/history","text":"<p>Get Order History (Multiple)</p> Description <p>Returns multiple order status history records. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-ordersorder_idhistoryhistory_id","title":"GET /orders/{order_id}/history/{history_id}","text":"<p>Get Order History (Single)</p> Description <p>Returns multiple or a single order status history records. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>history_id</code> path None No The history ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-ordersorder_iditems","title":"GET /orders/{order_id}/items","text":"<p>Get Order Items (Multiple)</p> Description <p>Get multiple order items from an existing order. All the GET manipulation parameters are applied with this method (search, sort, minimize, paginate etc).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#post-ordersorder_iditems","title":"POST /orders/{order_id}/items","text":"<p>Create Order Item</p> Description <p>Use this method to create a new order item to an existing order. The order item JSON format must be the same with the \"items\" entries in the original order item.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderItem</code> body None No The order item <code>order_id</code> path None No The order ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-ordersorder_iditemsitem_idattributesproperty","title":"GET /orders/{order_id}/items/{item_id}/attributes/Property","text":"<p>Get Order Item Attributes/Properties (Multiple)</p> Description <p>Returns multiple order item attribute/property records through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-ordersorder_idpayment_details","title":"GET /orders/{order_id}/payment_details","text":"<p>Get Order Payment Details</p> Description <p>Get the payment details for a specific order record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-ordersorder_idtotals","title":"GET /orders/{order_id}/totals","text":"<p>Get Order Totals (Multiple)</p> Description <p>Returns all single order totals from an existing order. All the GET manipulation parameters are applied with this method (search, sort, minimize, paginate etc).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#post-ordersorder_idtotals","title":"POST /orders/{order_id}/totals","text":"<p>Create Order Total</p> Description <p>Creates a new order total entry to the existing order. The order total JSON format must be the same with the \"totals\" entries in the original order total.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderTotal</code> body None No The order total <code>order_id</code> path None No The order ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-ordersorder_idtotalstotals_id","title":"GET /orders/{order_id}/totals/{totals_id}","text":"<p>Get Order Total</p> Description <p>Returns a single order total from an existing order. All the GET manipulation parameters are applied with this method (search, sort, minimize, paginate etc).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <code>totals_id</code> path None No The totals ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-ordersorder_idtracking_code","title":"GET /orders/{order_id}/tracking_code","text":"<p>Get Order Tracking Codes (Multiple) (deprecated)</p> Description <p>Get an array of all tracking code records of an order through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#post-ordersorder_idtracking_code","title":"POST /orders/{order_id}/tracking_code","text":"<p>Create Order Tracking Code (deprecated)</p> Description <p>Create a new tracking code for an order.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXTrackingCodeRequestBody</code> body None No The tracking code to be created <code>order_id</code> path None No The order ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-ordersorder_idtracking_codes","title":"GET /orders/{order_id}/tracking_codes","text":"<p>Get Order Tracking Codes (Multiple)</p> Description <p>Get an array of all tracking code records of an order through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#post-ordersorder_idtracking_codes","title":"POST /orders/{order_id}/tracking_codes","text":"<p>Create Order Tracking Code</p> Description <p>Create a new tracking code for an order. See GXTrackingCode resource.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXTrackingCode</code> body None No The tracking code to be created. <code>order_id</code> path None No The order ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#patch-ordersorder_idstatus","title":"PATCH /orders/{order_id}/status","text":"<p>Update Order Status</p> Description <p>Use this method if you want to update the status of an existing order and create an order history entry. The status history entry must also contain extra information as shown in the JSON example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderStatusHistory</code> body None No The order status <code>order_id</code> path None No The orders ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-ordersorder_iditemsitem_idattributes","title":"POST /orders/{order_id}/items/{item_id}/attributes","text":"<p>Create Order Item Attribute</p> Description <p>Use this method to create a new order item attribute to an existing order item. The order item attribute JSON object is the same as the one included in the full order representation. There are two different order item variation systems in the shop, the \"attributes\" and the \"properties\". Both of them define a variation of an order item (e.g. color, size etc). You must always use only one of them for a single order item.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXOrderItemAttributes</code> body None No The order item attributes <code>item_id</code> path None No The item ID <code>order_id</code> path None No The order ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-orderssearch","title":"POST /orders/search","text":"<p>Search Orders</p> Description <p>Returns multiple orders that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#orders_history","title":"orders_history","text":""},{"location":"API/v2/#get-orders_historyorder_id","title":"GET /orders_history/{order_id}","text":"<p>Get Order History (Single)</p> Description <p>Get a single order history record through a GET request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID to GET history for. <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#parcel_services","title":"parcel_services","text":""},{"location":"API/v2/#delete-parcel_servicesparcel_service_id","title":"DELETE /parcel_services/{parcel_service_id}","text":"<p>Delete Parcel Service</p> Description <p>Removes a parcel service entity from the system. This method will always return success even if the parcel service does not exist.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>parcel_service_id</code> path None No The parcel service ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-parcel_servicesparcel_service_id","title":"GET /parcel_services/{parcel_service_id}","text":"<p>Get Parcel Service (Single)</p> Description <p>Get a single parcel service record through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>parcel_service_id</code> path None No The parcel service ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-parcel_servicesparcel_service_id","title":"PUT /parcel_services/{parcel_service_id}","text":"<p>Updates Parcel Service</p> Description <p>Use this method if you want to update an existing parcel service.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXParcelService</code> body None No The updated parcel service. <code>parcel_service_id</code> path None No The parcel service ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-parcel_services","title":"GET /parcel_services","text":"<p>Get Parcel Services (Multiple)</p> Description <p>Get multiple parcel services records through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-parcel_services","title":"POST /parcel_services","text":"<p>Create Parcel Service</p> Description <p>This method enables the creation of a new parcel service into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXParcelService</code> body None No The created parcel service. <p> Response 201 Created </p>"},{"location":"API/v2/#post-parcel_servicessearch","title":"POST /parcel_services/search","text":"<p>Search Parcel Services</p> Description <p>Returns multiple parcel services that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#payment_details","title":"payment_details","text":""},{"location":"API/v2/#get-payment_detailsorder_id","title":"GET /payment_details/{order_id}","text":"<p>Get Payment Details</p> Description <p>Get the payment details for a specific order record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>order_id</code> path None No The order ID <p> Response 200 OK </p>"},{"location":"API/v2/#product_images","title":"product_images","text":""},{"location":"API/v2/#delete-product_images","title":"DELETE /product_images","text":"<p>Delete Product Image</p> Description <p>Remove the product image file from the server. This method will always provide a successful response, even if the image file was not found.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXFilename</code> body None No The filename <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-product_images","title":"GET /product_images","text":"<p>Get Product Images</p> Description <p>Get a list of all product image files which exists in the server's filesystem through a GET request.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-product_images","title":"POST /product_images","text":"<p>Upload Product Image</p> Description <p>Uploads an image file for the products. Make this request without the \"Content-Type: application/json\". Except from the file the POST request must also contain a \"filename\" value with the final filename.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>filename</code> formData None No The final filename <code>upload_product_image</code> formData None No The product image to upload <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-product_images","title":"PUT /product_images","text":"<p>Rename Image File</p> Description <p>Use this method to rename an existing image file.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXFilenameChange</code> body None No The filenames <p> Response 200 OK </p>"},{"location":"API/v2/#product_prices","title":"product_prices","text":""},{"location":"API/v2/#delete-product_pricesproduct_id","title":"DELETE /product_prices/{product_id}","text":"<p>Delete Product Prices</p> Description <p>Deletes all customer group- and graduated prices of a product. This method will always return success even if the product does not exist.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_id</code> path None No The product id <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-product_pricesproduct_id","title":"GET /product_prices/{product_id}","text":"<p>Get Product Prices</p> Description <p>Get prices for customer groups and their graduated prices, if exists.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_id</code> path None No The product id <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-product_pricesproduct_id","title":"PUT /product_prices/{product_id}","text":"<p>Update Product Prices</p> Description <p>Updates product price data for the product of the given id. All price information gets replaced with the new one.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProductPrices</code> body object No Product price data <code>product_id</code> path None No The product id <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-product_pricesproduct_idcustomer_groupscustomer_group_idquantity","title":"GET /product_prices/{product_id}/customer_groups/{customer_group_id}/{quantity}","text":"<p>Get Graduated Product Price</p> Description <p>Get price information for given customer group and product quantity. Graduated- and customer group prices are included in the response</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_group_id</code> path None No The customer group id <code>product_id</code> path None No The product id <code>quantity</code> path None No Products quantity <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#products","title":"products","text":""},{"location":"API/v2/#delete-productsproduct_idlinks","title":"DELETE /products/{product_id}/links","text":"<p>Delete Product Link</p> Description <p>Deletes an existing product to category link. If there is no categoryId property set, all the product links will be removed.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>categoryId</code> body None No The category ID <code>product_id</code> path None No The product or category link ID <p> Response 200 OK </p>"},{"location":"API/v2/#get-productsproduct_idlinks","title":"GET /products/{product_id}/links","text":"<p>Get Product Links</p> Description <p>Get all product or category links associated with a specific product.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_id</code> path None No The product or category ID <p> Response 200 OK </p>"},{"location":"API/v2/#post-productsproduct_idlinks","title":"POST /products/{product_id}/links","text":"<p>Create Product Link</p> Description <p>Creates a new product to category record in the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>categoryId</code> body None No The category ID <code>product_id</code> path None No The product ID <p> Response 201 Created </p>"},{"location":"API/v2/#put-productsproduct_idlinks","title":"PUT /products/{product_id}/links","text":"<p>Update Product Link</p> Description <p>Changes an existing product to category link.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProductLinkPutRequest</code> body None No The old and new category ID <code>product_id</code> path None No The product link ID <p> Response 200 OK </p>"},{"location":"API/v2/#delete-productsproduct_ids","title":"DELETE /products/{product_ids}","text":"<p>Delete Products (Multiple)</p> Description <p>Removes multiple product records from the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_ids</code> path None No A comma-seperated list of product IDs to delete <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-products","title":"GET /products","text":"<p>Get Products</p> Description <p>Get a multiple product records through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. To see an example usage take a look at <code>docs/REST/samples/product-service/remove_product.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>changed</code> query None No *Optional parameter*. If provided, receive a change history of items that were **changed/deleted** at the given date. <code>deleted</code> query None No *Optional parameter*. If provided, receive a change history of items that were **deleted** at the given date. <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>modified</code> query None No *Optional parameter*. If provided, receive a change history of items that were **modified** at a given date. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-products","title":"POST /products","text":"<p>Create Products</p> Description <p>Creates new product records in the system. May be provided an array of product records, for bulk insertion. For single insertion, provide a single GXProduct object.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProductArray</code> body array No An array of products <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-products","title":"PUT /products","text":"<p>Update Products (Multiple)</p> Description <p>Use this method to update multiple existing product records. It takes an array of GXProduct Objects, identified by their id property.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProductArray</code> body array No An array of products to update. <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-productsproduct_id","title":"GET /products/{product_id}","text":"<p>Get Products</p> Description <p>Get a single product record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. To see an example usage take a look at <code>docs/REST/samples/product-service/remove_product.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_id</code> path None No The product ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-productsproduct_id","title":"PUT /products/{product_id}","text":"<p>Update Product</p> Description <p>Use this method to update an existing product record. Take a look in the POST method for more detailed explanation on every resource property. To see an example usage consider <code>docs/REST/samples/product- service/update_product.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProduct</code> body None No The product <code>product_id</code> path None No The product ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-productsproduct_idproduct_prices","title":"GET /products/{product_id}/product_prices","text":"<p>Get Product Prices</p> Description <p>Get prices for customer groups and their graduated prices, if exists.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>product_id</code> path None No The product id <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-productsproduct_idproduct_prices","title":"PUT /products/{product_id}/product_prices","text":"<p>Update Product Prices</p> Description <p>Updates product price data for the product of the given id. All price information gets replaced with the new one.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXProductPrices</code> body object No Product price data <code>product_id</code> path None No The product id <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-productsproduct_idproduct_pricescustomer_groupscustomer_group_idquantity","title":"GET /products/{product_id}/product_prices/customer_groups/{customer_group_id}/{quantity}","text":"<p>Get Graduated Product Price</p> Description <p>Get price information for given customer group and product quantity. Graduated- and customer group prices are included in the response</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>customer_group_id</code> path None No The customer group id <code>product_id</code> path None No The product id <code>quantity</code> path None No Products quantity <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-productssearch","title":"POST /products/search","text":"<p>Search Products</p> Description <p>Returns multiple products that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#quantity_units","title":"quantity_units","text":""},{"location":"API/v2/#delete-quantity_unitsquantity_unit_id","title":"DELETE /quantity_units/{quantity_unit_id}","text":"<p>Delete Quantity Units</p> Description <p>Removes a quantity units record from the system. This method will always return success even if the quantity unit does not exist.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>quantity_unit_id</code> path None No The quantity unit ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-quantity_unitsquantity_unit_id","title":"GET /quantity_units/{quantity_unit_id}","text":"<p>Get Quantity Units (Single)</p> Description <p>Get a single quantity unit record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>quantity_unit_id</code> path None No The quantity unit ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#patch-quantity_unitsquantity_unit_id","title":"PATCH /quantity_units/{quantity_unit_id}","text":"<p>Updates Quantity Units</p> Description <p>Use this method if you want to update an existing quantity units record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXQuantityUnit</code> body None No The quantity unit <code>quantity_unit_id</code> path None No The quantity unit ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-quantity_units","title":"GET /quantity_units","text":"<p>Get Quantity Units (Multiple)</p> Description <p>Get multiple quantity unit records through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-quantity_units","title":"POST /quantity_units","text":"<p>Create Quantity Units</p> Description <p>This method enables the creation of a new QuantityUnits into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXQuantityUnit</code> body None No The Quantity Unit. <p> Response 200 OK </p>"},{"location":"API/v2/#reviews","title":"reviews","text":""},{"location":"API/v2/#delete-reviewsreview_id","title":"DELETE /reviews/{review_id}","text":"<p>Delete Review</p> Description <p>Removes a review record from the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>review_id</code> path None No The ID of the review to be removed <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-reviewsreview_id","title":"GET /reviews/{review_id}","text":"<p>Get Review (Single)</p> Description <p>Get a single review through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>review_id</code> path None No The review ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-reviewsreview_id","title":"PUT /reviews/{review_id}","text":"<p>Update Review</p> Description <p>Use this method to update an existing review record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXReview</code> body None No The review to be updated <code>review_id</code> path None No The review ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-reviews","title":"GET /reviews","text":"<p>Get Reviews (Multiple)</p> Description <p>Get an array of all review records through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-reviews","title":"POST /reviews","text":"<p>Create Review</p> Description <p>Create a new review.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXReview</code> body None No The review to be created <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#shop_information","title":"shop_information","text":""},{"location":"API/v2/#get-shop_information","title":"GET /shop_information","text":"<p>Get Shop Information</p> Description <p>Returns shop information like shop url, shop name, shop owner address data, shop template name and shop version.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <p> Response 200 OK </p>"},{"location":"API/v2/#special_offers","title":"special_offers","text":""},{"location":"API/v2/#delete-special_offersspecial_offer_id","title":"DELETE /special_offers/{special_offer_id}","text":"<p>Removes Special Offers</p> Description <p>Removes a special offer record from the system. This method will always return success even if the vpe does not exist.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>special_offer_id</code> path None No The special offer ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-special_offersspecial_offer_id","title":"GET /special_offers/{special_offer_id}","text":"<p>Get Special Offers</p> Description <p>Gets a single special offer record through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>special_offer_id</code> path None No The special offer ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-special_offersspecial_offer_id","title":"PUT /special_offers/{special_offer_id}","text":"<p>Updates Special Offers</p> Description <p>Use this method if you want to update an existing special offer.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXSpecialOffer</code> body None No The updated special offer. <code>special_offer_id</code> path None No The special offer ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-special_offers","title":"GET /special_offers","text":"<p>Get Special Offers (Multiple)</p> Description <p>Get multiple special offers record through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-special_offers","title":"POST /special_offers","text":"<p>Create Special Offers</p> Description <p>This method enables the creation of a new special offer into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXSpecialOffer</code> body None No The created special offer. <p> Response 201 Created </p>"},{"location":"API/v2/#post-special_offerssearch","title":"POST /special_offers/search","text":"<p>Search Special Offer</p> Description <p>Returns multiple special offers that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#tax","title":"tax","text":""},{"location":"API/v2/#get-tax_classes","title":"GET /tax_classes","text":"<p>Get Tax Classes</p> Description <p>Get all tax classes or a single tax class including tax rates.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-tax_rates","title":"GET /tax_rates","text":"<p>Get Tax Rates</p> Description <p>Get all tax rates or a single tax rate.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-tax_zones","title":"GET /tax_zones","text":"<p>Get Tax Zones</p> Description <p>Get all tax zones or a single tax zone.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#tracking_code","title":"tracking_code","text":""},{"location":"API/v2/#delete-tracking_codetracking_code_id","title":"DELETE /tracking_code/{tracking_code_id}","text":"<p>Delete Tracking Code (deprecated)</p> Description <p>Removes a tracking code record from the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>tracking_code_id</code> path None No The tracking code ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-tracking_codetracking_code_id","title":"GET /tracking_code/{tracking_code_id}","text":"<p>Get Tracking Code (Single) (deprecated)</p> Description <p>Get a single tracking code through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>tracking_code_id</code> path None No The tracking code ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-tracking_code","title":"GET /tracking_code","text":"<p>Get Tracking Codes (Multiple) (deprecated)</p> Description <p>Get an array of all tracking code records through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#tracking_codes","title":"tracking_codes","text":""},{"location":"API/v2/#delete-tracking_codestracking_code_id","title":"DELETE /tracking_codes/{tracking_code_id}","text":"<p>Delete Tracking Code</p> Description <p>Removes a tracking code record from the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>tracking_code_id</code> path None No The tracking code ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-tracking_codestracking_code_id","title":"GET /tracking_codes/{tracking_code_id}","text":"<p>Get Tracking Code (Single)</p> Description <p>Get a single tracking code through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>tracking_code_id</code> path None No The tracking code ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-tracking_codes","title":"GET /tracking_codes","text":"<p>Get Tracking Codes (Multiple)</p> Description <p>Get an array of all tracking code records through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#vpe","title":"vpe","text":""},{"location":"API/v2/#delete-vpevpe_id","title":"DELETE /vpe/{vpe_id}","text":"<p>Delete VPE</p> Description <p>Removes a vpe record from the system. This method will always return success even if the vpe does not exist (due to internal VPEWriteService architecture decisions, which strive to avoid unnecessary failures).</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>vpe_id</code> path None No The VPE ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-vpevpe_id","title":"GET /vpe/{vpe_id}","text":"<p>Get VPE (Single)</p> Description <p>Get a single vpe record through the GET method</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>vpe_id</code> path None No The VPE ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#patch-vpevpe_id","title":"PATCH /vpe/{vpe_id}","text":"<p>Updates VPE</p> Description <p>Use this method if you want to update an existing vpe record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXVPE</code> body None No The updated VPE <code>vpe_id</code> path None No The VPE ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#post-vpe","title":"POST /vpe","text":"<p>Create VPE</p> Description <p>This method enables the creation of a new VPE into the system.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXVPE</code> body None No The VPE to be created <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#withdrawal","title":"withdrawal","text":""},{"location":"API/v2/#delete-withdrawalswithdrawal_id","title":"DELETE /withdrawals/{withdrawal_id}","text":"<p>Delete Withdrawal</p> Description <p>Removes a withdrawal record from the database.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>withdrawal_id</code> path None No The withdrawal ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-withdrawalswithdrawal_id","title":"GET /withdrawals/{withdrawal_id}","text":"<p>Get Withdrawal (Single)</p> Description <p>Get a single withdrawal through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>withdrawal_id</code> path None No The withdrawal ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-withdrawalswithdrawal_id","title":"PUT /withdrawals/{withdrawal_id}","text":"<p>Update Withdrawal</p> Description <p>Use this method to update an existing withdrawal record.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXWithdrawal</code> body None No The withdrawal to be updated <code>withdrawal_id</code> path None No The withdrawal ID <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-withdrawals","title":"GET /withdrawals","text":"<p>Get Withdrawals (Multiple)</p> Description <p>Get an array of withdrawals through the GET method.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p>"},{"location":"API/v2/#post-withdrawals","title":"POST /withdrawals","text":"<p>Create Withdrawal</p> Description <p>Create a new withdrawal.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXWithdrawal</code> body None No The withdrawal to be created <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#zones","title":"zones","text":""},{"location":"API/v2/#get-zoneszone_id","title":"GET /zones/{zone_id}","text":"<p>Get Zones</p> Description <p>Get a single registered zone resource. This method is currently limited to only fetching a single zone and might be updated in a future version of the API.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>zone_id</code> path None No The zone ID <p> Response 200 OK </p> <p> Response 400 Bad Request </p> <p> Response 501 Not Implemented </p>"},{"location":"API/v2/#categories","title":"categories","text":""},{"location":"API/v2/#delete-categoriescategory_ids","title":"DELETE /categories/{category_ids}","text":"<p>Delete Categories</p> Description <p>Removes multiple category records from the database, provided a comma- seperated list of IDs to delete.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>category_ids</code> path None No A comma-seperated list of category IDs to delete <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-categories","title":"GET /categories","text":"<p>Get Categories (Multiple)</p> Description <p>Get multiple category records through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. To see an example usage take a look at <code>docs/REST/samples/category-service/fetch_category.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>changed</code> query None No *Optional parameter*. If provided, receive a change history of items that were **changed/deleted** at the given date. <code>deleted</code> query None No *Optional parameter*. If provided, receive a change history of items that were **deleted** at the given date. <code>fields</code> query None No *Optional parameter*. If provided limits the properties to be included in the response. <code>modified</code> query None No *Optional parameter*. If provided, receive a change history of items that were **modified** at a given date. <code>page</code> query None No *Optional parameter*. If provided, displays the specified page. Defaults to 0. <code>per_page</code> query None No *Optional parameter*. If provided, limits the amount of records in the response. Defaults to 50. <code>recursive</code> query None No *Optional parameter*. If provided, recursively includes the ressources child-resources. <code>search</code> query None No *Optional parameter*. Search for a url-encoded keyword. <code>sort</code> query None No *Optional parameter*. Sorts by the desired properties. Maximum sorting fields are 5. (prefix property with + for ascending, - for descending) <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-categories","title":"POST /categories","text":"<p>Create Categories</p> Description <p>Creates new categories in the system by taking an array of categories. It is also possible to provide a single GXCategory ressource, to create a single entry.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCategoryArray</code> body array No An array of categories <p> Response 201 Created </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#put-categories","title":"PUT /categories","text":"<p>Update Category (Multiple)</p> Description <p>Use this method to update multiple existing category records. It takes an array of GXCategory Objects, updating them based on their id property.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>GXCategoryArray</code> body array No An array of categories to update. <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-categoriescategory_id","title":"GET /categories/{category_id}","text":"<p>Get Categories (Single)</p> Description <p>Get a single category record through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation. To see an example usage take a look at <code>docs/REST/samples/category-service/fetch_category.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>category_id</code> path None No The category ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#put-categoriescategory_id","title":"PUT /categories/{category_id}","text":"<p>Update Category</p> Description <p>Use this method to update an existing category record. Take a look in the POST method for more detailed explanation on every resource property. To see an example usage take a look at <code>docs/REST/samples/category- service/update_category.php</code></p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>category_id</code> path None No The category ID <code>GXCategory</code> body None No An array of categories to update. <p> Response 200 OK </p> <p> Response 400 Bad Request </p>"},{"location":"API/v2/#get-categoriescategory_idproducts","title":"GET /categories/{category_id}/products","text":"<p>Get Category Products</p> Description <p>Get multiple product records of an specified category through a GET request. Using the <code>recursive</code> query parameter allows you to receive the products from the sub categories.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>category_id</code> path None No The category ID <code>recursive</code> query None No *Optional parameter*. If provided, recursively includes the ressources child-resources. <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#get-categoriescategory_idchildren","title":"GET /categories/{category_id}/children","text":"<p>Get Category Children</p> Description <p>Get multiple or a single sub category records of a given category through a GET request. This method supports all the GET parameters that are mentioned in the \"Introduction\" section of this documentation.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>category_id</code> path None No The parent category ID <p> Response 200 OK </p> <p> Response 404 Not Found </p>"},{"location":"API/v2/#post-categoriessearch","title":"POST /categories/search","text":"<p>Search Categories</p> Description <p>Returns multiple categories that are respecting the given search condition. Further information about defining a search condition can be found in the Search Example.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>basicAuth</code> header string N/A No <code>SearchCondition</code> body None No The search condition <p> Response 200 OK </p>"},{"location":"API/v2/#tags","title":"Tags","text":"Name Description address_formats Address Formats addresses Addresses attachments Attachments cache Cache category_icons Category Icons category_images Category Images countries Countries cronjobs Cronjobs customer_groups Customer Groups customers Customers emails Emails languages Languages manufacturers Manufacturers order_statuses Order Statuses orders Orders orders_history Orders History parcel_services Parcel Services payment_details Payment Details product_images Product Images product_prices Product Prices products Products quantity_units Quantity Units reviews Reviews shop_information Shop Information special_offers Special Offers tax Tax tracking_code Tracking Code tracking_codes Tracking Codes vpe Vpe withdrawal Withdrawal zones Zones categories Categories"},{"location":"API/v3/","title":"V3","text":""},{"location":"develop-environment/","title":"Development Environment","text":"<p>In order to set up the project or development environment, we assume that you already have some standard development tools such as a webserver, Git, Composer, Node and Yarn installed. If this is not the case, you can look up how to install them in the section about required development tools.</p> <p>It would also make sense to have access to our Gitlab Server, as you can fork the shop project and clone it from there. If you don't have access, you can request it or start with the files from a downloaded full version.</p> <p>The section about setting up the shop project will show you how to set up the development environment based on Gitlab access. More information about the support PHP versions or other requirements can be found here.</p>"},{"location":"develop-environment/development-tools/","title":"Required Development Tools","text":"<p>The development of modules for the shop system requires some programs and tools. These include:</p> <ul> <li>A webserver (such as Apache or nginx) is needed to run the online shop software. For version GX 4.1, a   webserver with a minimum PHP version of 7.2 is required.</li> <li>Git is used as a version management system for the source code of the shop software.</li> <li>Composer is a package manager for PHP, that is used to install and manage PHP   dependencies (like external PHP libraries).</li> <li>Node.js is a platform used for server-side execution of JavaScript code and serves   as the basis for many of our development tools, such as Gulp.</li> <li>Yarn is an alternative package manager for Node.js that can be used to install modules   and development tools.</li> </ul>"},{"location":"develop-environment/development-tools/#windows","title":"Windows","text":"<p>We don't support Windows for development or production any longer. Please use a virtual machine or a different operating system.</p>"},{"location":"develop-environment/development-tools/#mac-os","title":"Mac OS","text":"<p>Homebrew is a package manager for Mac OS. With the help of this package manager, you can easily install various programs via the command line, which otherwise would have to be downloaded and installed manually from the respective website. To install Homebrew, enter the following command in your terminal:</p> <pre><code>&gt; /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre> <p>Homebrew should be installed afterwards. You can test the successful installation with the following command:</p> <pre><code>&gt; brew -v\n\nHomebrew 0.9.5 (git version b04f; last commit 2016-02-15)\n</code></pre> <p>If you receive a similar message, everything went perfectly.</p>"},{"location":"develop-environment/development-tools/#git","title":"Git","text":"<p>First we use the following command to make sure Homebrew has the latest information about all packages:</p> <pre><code>&gt; brew update\n\nUpdated Homebrew from d47bd54 to b40f107\n...\n</code></pre> <p>Then we install Git:</p> <pre><code>&gt; brew install git\n</code></pre> <p>To verify that Git has been installed correctly, you can run the following command in the terminal:</p> <pre><code>&gt; git --version\n\ngit version 2.5.0\n</code></pre>"},{"location":"develop-environment/development-tools/#composer","title":"Composer","text":"<p>Composer is not a part of PHP and therefore has to be installed manually:</p> <ul> <li>Navigate to the official Composer website.</li> <li>Execute the commands there in the terminal.</li> </ul> <p>After a successful installation, the following command should output the installed Composer version:</p> <pre><code>&gt; composer --version\n\nComposer version 1.0-dev (a2fc502c208fcb3ac4700b934057a33ca130644b) 2016-01-18 12:41:09\n</code></pre>"},{"location":"develop-environment/development-tools/#nodejs","title":"Node.js","text":"<p>Execute the following command inside the terminal to install Node.js:</p> <pre><code>&gt; brew install node\n</code></pre> <p>After the installation is complete, you can check if the installation was successful by executing the following command:</p> <pre><code>&gt; node -v\n\nv4.0.0\n</code></pre>"},{"location":"develop-environment/development-tools/#yarn","title":"Yarn","text":"<p>Yarn is not part of Node.js and must therefore be installed manually:</p> <ul> <li>Navigate to the official Yarn website.</li> <li>Execute the commands there inside a terminal.</li> </ul> <p>After a successful installation, the following command should output the installed Yarn version:</p> <pre><code>&gt; yarn --version\n</code></pre>"},{"location":"develop-environment/development-tools/#linux","title":"Linux","text":"<p>Please note that depending on the distribution, some components may already be pre-installed. If this is the case, we recommend that you update the corresponding components to the latest version.</p> <p>Some Linux distributions also use different system package managers. Ubuntu for example uses Aptitude (apt). Fedora and openSUSE use rpm (yum). In this tutorial, we assume that you use Aptitude.</p>"},{"location":"develop-environment/development-tools/#git_1","title":"Git","text":"<p>In most Linux distributions, such as Ubuntu, Git should already be installed. To check if Git is available, you can run the following command in the terminal:</p> <pre><code>&gt; git --version\n</code></pre> <p>If Git is available, an output of the version should follow. If not, Git must be installed, which can be done with the following command:</p> <pre><code>&gt; sudo apt-get install git\n</code></pre>"},{"location":"develop-environment/development-tools/#composer_1","title":"Composer","text":"<p>Composer is not a part of PHP and therefore has to be installed manually:</p> <ul> <li>Navigate to the official Composer website.</li> <li>Execute the commands there in the terminal.</li> </ul> <p>After a successful installation, the following command should output the installed Composer version:</p> <pre><code>&gt; composer --version\n</code></pre>"},{"location":"develop-environment/development-tools/#nodejs_1","title":"Node.js","text":"<p>Execute the following commands in the terminal to install Node.js:</p> <pre><code>&gt; curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash --\n&gt; sudo apt-get install -y nodejs\n</code></pre> <p>After installation, you can check if the installation was successful by executing the following command:</p> <pre><code>&gt; node -v\n</code></pre>"},{"location":"develop-environment/development-tools/#yarn_1","title":"Yarn","text":"<p>Yarn is not part of Node.js and therefore has to be installed manually:</p> <ul> <li>Navigate to the official Yarn website.</li> <li>Execute the commands there in the terminal.</li> </ul> <p>After a successful installation, the following command should output the installed Yarn version:</p> <pre><code>&gt; yarn --version\n</code></pre>"},{"location":"develop-environment/setup-project/","title":"Set up the shop project","text":"<p>Setting up the shop project is only necessary if you have access to the Gitlab repository. This access must be requested separately. If you don't have access, you can directly start developing your modules based on a full version.</p> <p>If you have access to the shops Gitlab repository, you can login at https://sources.gambio-server.net.</p>"},{"location":"develop-environment/setup-project/#create-a-fork-of-the-shop-project","title":"Create a fork of the shop project","text":"<p>To create a fork for your module development, you need to follow these steps:</p> <ul> <li>Navigate to this page (you may need to log in).</li> <li>Create a fork of the project by clicking on the Fork button (located in the upper right corner).</li> <li>Assign the fork to yourself by clicking on your username.</li> </ul>"},{"location":"develop-environment/setup-project/#clone-your-fork-locally","title":"Clone your fork locally","text":"<p>Now you can clone the created fork for local development. To do this, you need to access your fork in Gitlab and then choose between cloning the fork via SSH or HTTPS. The advantage of SSH over HTTPS is that you don't have to enter your username and password every time you push a change.</p> <p>However, to create a clone using SSH, an SSH key has to be created first. You can read more about this here.</p> <p>Now you can finally create a local clone of your fork. For this you have to do the following:</p> <ul> <li>Call up your fork in Gitlab.</li> <li>Click on the Clone button in the upper right corner.</li> <li>Copy the content from the SSH input field; this is the Git repository address.</li> <li>Open a terminal and navigate to your desired destination directory (e.g. the directory of your local webserver).</li> </ul> <p>Now enter the following command:</p> <pre><code>&gt; git clone GIT-ADRESS\n</code></pre> <p><code>GIT-ADRESS</code> corresponds to the git repository address, you just copied.</p> <p>After cloning your fork, you are in the default branch. In general, the default branch is always the latest version we are working on. If you want to change the branch, you can do so with the following command:</p> <pre><code>&gt; git checkout BRANCHNAME\n</code></pre> <p><code>BRANCHNAME</code> corresponds to the desired branch.</p> <p>Ideally, we recommend using one of our release branches or release tags (version tag) for development. This way, you make sure your development base corresponds to a real shop version.</p>"},{"location":"develop-environment/setup-project/#set-up-the-shop-project_1","title":"Set up the shop project","text":"<p>Before you can develop within the shop, you first have to install the required dependencies. You can do this with the following commands:</p> <pre><code>&gt; yarn install\n&gt; yarn build:dev\n</code></pre> <p>This process may take a few minutes. Once the process is complete, you can upload the project files to your web server (or copy them to an equivalent directory) and access the shop.</p> <p>Notice</p> <p>Instead of the command <code>yarn build:dev</code> you can also use the command <code>yarn setup:dev</code>. Using the last command, the StyleEdit 4 will not be built, so that executing this command is much faster.</p>"},{"location":"framework/","title":"Architecture and Framework","text":"<p>This part of our documentation explains the architecture and framework of the shop software. This basic knowledge will help you understand how the software is structured or handles incoming requests.</p> <p>Looking at the architecture of the shop software, we made a huge jump from GX3 to GX4. With GX4, we began to design and implement a new architecture, which should be the footing for our future development. Even if we weren't able to replace the architecture fully yet or set up interfaces to interact with the system, we were able to improve the performance and way of development considerably.</p> <p>The tutorial about the Application Core gives you an overview of the new architecture and mentions essential components. We also provide further information about the Application Layers, Autoloading and Namespaces, DI Container and Service Providers, which are all part of the system.</p> <p>Besides the general footing of our shop software, we also wanted to give you further information about the technical- and business-related components you can use for developing your modules.</p> <p>Because there are still some parts of the shop software that are using the old architecture, we put up some information about it as well, but we recommend to base your modules on the new architecture as far as possible.</p>"},{"location":"framework/application-core/","title":"Application Core","text":"<p>With the new shop version GX 4, we started developing a new Application Core. This will provide more flexibility and future-proofness to the shop system but it also has far-reaching consequences and changes. We are currently using this new Application Core for parts of the shop software because refactoring the whole shop system will take a lot of time. Whenever the new Application Core isn't used, a previously developed (by us or XTC) architecture is used.</p>"},{"location":"framework/application-core/#what-is-an-application-core","title":"What is an Application Core?","text":"<p>The Application Core (or application) handles all processes that trigger specific functionalities and mechanics of the software, like showing the products page, registering a customer account, or placing an order. Because this software is a web-based application, the triggers are HTTP requests that will be interpreted and processed by internal components of the application. The following picture shows you the essential parts of the Application Core:</p> <p></p>"},{"location":"framework/application-core/#kernel","title":"Kernel","text":"<p>The kernel is the central component that delegates the start, execution, and finalisation of the application. In the starting process, it uses Bootstrapper to set up the application and delegates to specific application services to handle incoming requests.</p> <p>Our <code>Gambio\\Core\\Application\\Kernel\\HttpKernel</code> implementation is based on the microframework Slim. For execution, the processing of the HTTP request will be forwarded to Slim, which receives the incoming HTTP requests and starts the processing that handles these requests.</p> <p>Another example for a general use case for a kernel would be a CLI program.</p>"},{"location":"framework/application-core/#bootstrapper","title":"Bootstrapper","text":"<p>Besides the kernel, we have the Bootstrappers, which set up the application itself. Each Bootstrapper prepares a part of the application before any HTTP requests will be handled. Typical tasks of these Bootstrappers are the registration of components, handling of HTTP sessions, or registration of routes and middlewares.</p>"},{"location":"framework/application-core/#service-providers","title":"Service Providers","text":"<p>We designed the application in a way that it acts as a DI Container; that allows an easy way of Inversion of Control and Dependency Injection. Having a DI Container means that every component or service class used to handle specific functionalities of the application needs to be registered. The container/application will generally arrange the instantiation of these components, services and classes by itself. The Service Providers are the parts of the application responsible for registering these components and services.</p>"},{"location":"framework/application-core/#modules","title":"Modules","text":"<p>After the application has received an incoming HTTP request and determines which module is responsible, a corresponding HTTP controller or action will be executed. These controllers or actions are part of the module. A single module only provides a fraction of the shop softwares complete functionality. Therefore it uses (and sometimes even contains) a domain.</p>"},{"location":"framework/application-core/#domains","title":"Domains","text":"<p>Domain is a term of the Domain-driven design and represents a part of the softwares business logic.  While an HTTP controller or other components of a module orchestrate processes (e.g. placing an order), the domain contains the inner logic and model of the business itself. </p>"},{"location":"framework/application-core/#core-components-framework","title":"Core components / Framework","text":"<p>The block \"Framework / Core components\" contains core components that are used by different modules. Systems for caching, logging, or providing language-depended text phrases are examples for these components. They can be seen as the general framework for every module.</p>"},{"location":"framework/application-core/#the-old-application-core","title":"The old Application Core","text":"<p>Before version GX 4 (and even still) each page that had been processed by the shop system included one of the following files:</p> <ul> <li>admin/includes/application_top.php</li> <li>includes/application_top.php</li> <li>includes/application_top_callback.php</li> <li>includes/application_top_export.php</li> <li>includes/application_top_main.php</li> </ul> <p>These files can be seen as the old Application Core. They for example included the MainFactory, the old autoloading system, or started the session.</p> <p>The entry point determines how the application is started and is therefore essential to the Application Core. There were two possible entry points in Gambio Admin before version 4.1:</p> <ol> <li>Direct call of a file: http://www.example.org/admin/customers.php</li> <li>So-called front controller: http://www.example.org/admin/admin.php?do=[Controller name without controller suffix]</li> </ol> <p>Ultimately, both options initially included one of the listed application_top files but handled the page processing differently. The logic was either executed directly in the PHP file or it was delegated to a controller class.</p>"},{"location":"framework/application-core/#problems-with-the-old-application-core","title":"Problems with the old Application Core","text":"<p>The files mentioned above have grown over the years and are hardly maintainable. Decades-old programming paradigms, which are no longer up to date, have been used and thus lead to a significant Bottleneck. Therefore, we have decided to develop a new Application Core.</p>"},{"location":"framework/application-core/#differences-between-old-and-new-application-core","title":"Differences between old and new Application Core","text":"<p>The new Application Core has been developed from scratch. In doing so, we have adhered to the current PHP standards (PSR's) and integrate modern open-source libraries to meet these standards.</p> <p>The modernized Application Core forms the basis for all future developments. The goal is to renew all pages with an old Application Core in the next few years, so that in the long term the old Application Core can be removed without any problems.</p> <p>Because of that we strongly recommend that external developers integrate their functions into the shop system using the new tools. Currently, the new Application Core has only been integrated into a few places in the shop system. We'll replace old areas of the Gambio Admin gradually within the following versions.</p> <p>With GX 4.1 for example, the REST API v3 as well as the management of parcel services and revocations in Gambio Admin are based on the new Application Core.</p>"},{"location":"framework/application-core/#processing-http-requests","title":"Processing HTTP requests","text":"<p>As already mentioned, the task of the Application Core is to process and respond to incoming HTTP requests. The shop system responds to HTTP requests with HTTP responses, which in turn coined the term Request Lifecycle. The browser can render (draw) the desired page, which usually takes only a fraction of a second within the entire cycle.</p> <p></p>"},{"location":"framework/application-core/#developing-new-core-components","title":"Developing new core components","text":"<p>The new development of the Application Core meant that not only all previous components but also all services, which we have developed in recent years, could no longer be used in the new system. Therefore, the integration of the new Application Core is a long-term project and we had to develop new core components.</p>"},{"location":"framework/application-core/#usage-of-namespaces","title":"Usage of namespaces","text":"<p>To avoid interfering with third-party developers and our modules, we used several namespaces for the new Application Core, as well as the PSR-4 autoloading of Composer. We introduced the following namespaces and mapped them to the listed directories.</p> Namespace Directory Description <code>Gambio\\Admin</code> <code>src/GambioAdmin</code> Contains all components and modules regarding the Gambio Admin <code>Gambio\\Api</code> <code>src/GambioApi</code> Contains all components and modules regarding the REST API v3 <code>Gambio\\Core</code> <code>src/GambioCore</code> Contains all core components or general framework for every module <code>Gambio\\Shop</code> <code>src/GambioShop</code> Contains all components and modules regarding the public  Gambio Shop <code>GXModules</code> <code>src/GXModules</code> Contains all components and modules developed by third-party  developers, as well as some of our modules <p>Notice</p> <p>If you have downloaded the full version of the shop, the <code>src</code> directory will match the root directory of the shop files.</p>"},{"location":"framework/application-core/#differences-between-new-and-legacy-architecture","title":"Differences between new and legacy architecture","text":"<p>The main difference between these two areas is the instantiation and implementation of classes. While the legacy architecture uses the MainFactory to instantiate classes and allow Class-Overloading, the new architecture provides more freedom to implement classes but restricts the possibilities to extend the system. For instance, if you wanted to execute some logic in the legacy architecture, you would have created an overload following specific rules and conventions. Using the new architecture, you would have to create a component or service that does what you wanted to do, register it to the application core using a Service Provider and connect your component or service with an event or command.</p> <p>Creating a new HTTP controller/action shows the differences as well. The legacy architecture demanded you create a class extending the <code>HttpViewController</code> or <code>AdminHttpViewController</code> controller and add the suffix <code>Controller</code> to your class name. The methods inside your controller class needed to start with <code>actions</code> and the HTTP routes would always be something like <code>&lt;ShopBaseUrl&gt;/shop.php?do=&lt;ControllerNameWithoutSuffix&gt;/&lt;MethodNameWithoutPrefix&gt;</code>. More importantly, you also wouldn't be able to add dependencies into your HTTP controller using Dependency Injection but you needed to instantiate your dependency inside the class itself. The new architecture allows you to create a class as you wish. Sometimes there are classes you need to extend from, but you are free to use Dependency Injection, define your routes, and aren't bound to naming conventions.</p>"},{"location":"framework/legacy-architecture/","title":"Legacy architecture","text":"<p>In the old architecture that is used in the GX2 and GX3 versions of the shop software, the <code>MainFactory</code> class acted as the only component which provided all essential classes/services that were needed to execute the shop software. Compared to the new architecture, there are some similarities to the DI Container but without describing how components should be built and how they interact or depend on each other.</p> <p>The focus of the MainFactory was to allow overloading classes and to provide a powerful way of extending the system. The main problem of it was that any incorrect usage of it would lead to issues that could break the whole system and would be hard to debug.</p> <p>Notice</p> <p>This tutorial explains the old overloading and extender system that we used in the old architecture. The new GX4 architecture does not support this. There are still some parts of the shop software that are using the old architecture and that's why we still provide this information.</p> <p>There are two possibilities to change existing PHP classes in the shop system. The first possibility is class-overloading and allows you to overload the behaviour of an existing class with your logic. The second possibility, the extending system, can hook into existing program logic and execute your own logic. </p>"},{"location":"framework/legacy-architecture/#class-overloading","title":"Class-Overloading","text":"<p>Class-Overloading increases the update-security of code changes. Class-Overloading allows you to change the behaviour of PHP classes without modifying the class itself. Since the changes aren't made in the original class, they are not lost when original files get replaced with new ones.</p> <p>Changes made by Class-Overloading can be, e.g. extensions of existing methods, adding new methods, replacing methods (or even the whole class). Thus, all possibilities are available to change the class's behaviour to your wishes.</p>"},{"location":"framework/legacy-architecture/#how-to-overload-a-class","title":"How to overload a class","text":"<p>To overload an existing class, a new class following some specific rules needs to be created. You need to create a subdirectory inside the <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Overloads</code> or <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Overloads</code> directory with the name of the class you want to overload (e.g. 'breadcrumb'). Then you create a PHP file inside this directory with a new unique class name (e.g. <code>CustomizedBreadcrumb.inc.php</code>). The naming convention for these files is: <code>&lt;ClassName&gt;.inc.php</code>.</p> <p>The following example shows an overload <code>CustomizedBreadcrumb</code>, which extends the <code>trail</code> method of the original <code>breadcrumb</code> class. The entries in the breadcrumb will be enclosed in square brackets and the separator replaced with a pipe, unless the given separator differs from the standard. For this purpose a file <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Overloads/breadcrumb/CustomizedBreadcrumb.inc.php</code> is created with the following content:</p> <pre><code>class CustomizedBreadcrumb extends CustomizedBreadcrumb_parent\n{\n    /**\n     * Returns a modified breadcrumb as a string. The items are in brackets. \n     *\n     * They are separated by a pipe if the standard separator is a dash. Otherwise \n     * the given separator is used.\n     * \n     * @param string $separator Optional, the breadcrump separator string.\n     * \n     * @return string Returns the modified breadcrump string. \n     */\n    public function trail($separator = ' - ')\n    {\n        foreach($this-&gt;_trail as &amp;$item)\n        {\n            $item['title'] = '[' . $item['title'] . ']';\n        }\n\n        if($separator === ' - ')\n        {\n            $separator = ' | '; // Replace the original separator.\n        }\n\n        return parent::trail($separator);\n    }\n}\n</code></pre> <p>In the example above, you can see that the <code>CustomizedBreadcrumb</code> inherits classes from <code>CustomizedBreadcrumb_parent</code>, which is very important for the overloading system. The parent class always follows the naming convention: <code>&lt;ClassName&gt;_parent</code>. The MainFactory starts the inheritance for overloading based on the folder name <code>breadcrumb</code>, in which the overload class is located. Overloading the same class multiple times is possible. To do this, place all overloads in the same specific directory.</p> <p>Technically the overloading corresponds to an inheritance chain. The classes all inherit from each other in the order they are located in the file system.</p>"},{"location":"framework/legacy-architecture/#which-classes-can-be-overloaded","title":"Which classes can be overloaded?","text":"<p>All classes created by the MainFactory can be overloaded. This covers almost all classes of the old architecture. The overloadable classes are located in the following directories including their subdirectories:</p> <ul> <li><code>admin/includes/classes</code></li> <li><code>admin/includes/gm/classes</code></li> <li><code>gm/classes</code></li> <li><code>GXEngine</code></li> <li><code>GXMainComponents</code></li> <li><code>includes/classes</code> (except <code>includes/classes/scssphp</code>)</li> <li><code>includes/modules/order_total</code></li> <li><code>includes/modules/payment</code></li> <li><code>includes/modules/shipping</code></li> <li><code>system/classes</code></li> <li><code>system/core</code></li> <li><code>system/extender</code></li> <li><code>system/overloads</code></li> </ul> <p>Excluded are classes that are only used for type validation (TypeHints) and therefore are not created via the MainFactory. These classes are located in the directory <code>GXEngine/Shared/Types</code>.</p> <p>Especially worth mentioning are the extenders, which can be used by Class-Overloading.</p> <p>You can find some sample overloads to illustrate the functionality in the <code>GXMainComponents/overloads/_samples</code> directory. They can be activated by moving the respective folder one level up.</p>"},{"location":"framework/legacy-architecture/#overloading-a-class-with-namespaces","title":"Overloading a class with namespaces","text":"<p>If you want to overload a class within a namespace, the namespace must also be mapped into the folder structure of the overload. If, for example, you want to overload the class <code>Customer</code> in the namespace <code>Gambio\\Orders\\ValueObjects</code> with a new overload called <code>OverloadedCustomer</code>, then this class must be placed like this:</p> <p><code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Overloads/Gambio/Orders/ValueObjects/Customer/OverloadCustomer.inc.php</code></p>"},{"location":"framework/legacy-architecture/#what-else-should-be-considered","title":"What else should be considered","text":"<ul> <li>A few classes occur twice in the system, for example the <code>order</code>, which can be found both in the <code>includes/classes</code>   and <code>admin/includes/classes</code> directory. If  you want to overload the class from the <code>admin/includes/classes</code>   directory, you need to use <code>admin-order</code> as the directory name, instead of <code>order</code>. This <code>admin-</code> prefix works   exclusively for the following duplicate classes:<ul> <li><code>language</code></li> <li><code>messageStack</code></li> <li><code>order</code></li> <li><code>shoppingCart</code></li> <li><code>splitPageResults</code></li> </ul> </li> <li>Since the same class can be overloaded several times, you have to be careful not to interrupt the inheritance chains.   So when extending a method, make sure to call the parent method.</li> <li>After creating an overload, the cache for module information must be cleared in Gambios Admin panel (Toolbox &gt;   Cache). Only then a new overload becomes effective.</li> <li>Changes of original classes, e.g. caused by shop updates, may influence the functionality of an overload. The   behaviour may no longer be as expected, or errors may occur if, for example, methods or entire classes no longer   exist. If original classes change, it is necessary to check whether the overload still works.</li> <li>The class name of the overload must be chosen uniquely throughout the system. Otherwise, the MainFactory cannot   instantiate the overload, since class names must be unique in PHP. Namespaces are taken into account. Identical   class names in different namespaces are distinguished and are therefore allowed.</li> <li>The class name must match the file name.</li> <li>The same namespace must be specified in the overload and in the class to be overloaded.</li> </ul>"},{"location":"framework/legacy-architecture/#extender-system","title":"Extender system","text":"<p>The extender system is a hook-point system and is used for convenient and update-safe adaptation and expansion of the shop system. It enables module developers to inject content or behaviour at predefined points. Using the <code>OrderExtender</code>, it's possible to add additional information to the order detail view. An extender not only allows content to be placed at specific locations but also allows functions to be executed at particular points in the code. For example, if you have added another input field to the product processing, you need to store this inputs content.  This can be achieved by overloading the <code>AdminCategoriesExtender</code>.</p> <p>The example below shows how to use the extender system. The example adds some order details to the confirmation page that is displayed after a successful order.</p>"},{"location":"framework/legacy-architecture/#choosing-the-right-extender","title":"Choosing the right extender","text":"<p>The currently existing extenders can be found in this list.</p> <p>For our example, a suitable extender already exists: <code>CheckoutSuccessExtenderComponent</code>. With this extender, you can execute source code after a successful order and place additional HTML code into the confirmation page.</p>"},{"location":"framework/legacy-architecture/#page-manipulation-by-overloading-the-extender","title":"Page manipulation by overloading the extender","text":"<p>The extenders are based on the Class-Overloading system. For this purpose, many extenders have individual specifications as to the form in which they expect content or provide data.</p> <p>To display your content on the order confirmation page, follow these steps.</p>"},{"location":"framework/legacy-architecture/#create-a-subdirectory-for-the-overload","title":"Create a subdirectory for the overload","text":"<p>First of all, a directory with the same name as the extender class must be created in your <code>Overloads</code> directory: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Overloads/CheckoutSuccessExtenderComponent</code>. Then the file <code>MyOrderDetails.inc.php</code> can be created inside this directory.</p>"},{"location":"framework/legacy-architecture/#create-your-overload-and-implement-the-proceed-method","title":"Create your overload and implement the <code>proceed</code> method","text":"<p>Again, the class name must correspond to the name of the file. The parent class name for each overload follows the convention: <code>&lt;ClassName&gt;_parent</code>.</p> <pre><code>class MyOrderDetails extends MyOrderDetails_parent {\n}\n</code></pre> <p>Every extender uses the <code>proceed</code> method. This method executes the whole logic of the overload. When using extenders it's important that you call the <code>proceed</code> method of the parent class using <code>parent::proceed()</code>, otherwise the overload system will not work correctly.</p> <p>Using this extender, the ID of the completed order can be taken from the variable <code>$this-&gt;v_data_array['orders_id']</code>. To access the data of the order later on an object of the type <code>IDType</code> must be instantiated using <code>new IdType($this-&gt;v_data_array['orders_id'])</code>, because the <code>OrderReadService</code> expects an object of this type.</p> <p>The <code>proceed</code> method should look like this:</p> <pre><code>public function proceed()\n{\n    parent::proceed();\n\n    $orderId = new IdType($this-&gt;v_data_array['orders_id']);\n}\n</code></pre> <p>There are two different ways to display HTML code.</p> <p>The first option allows you to add content at any position. For this, a Smarty variable (e.g. <code>{$myOrderDetails}</code>) must be added to the <code>checkout_success</code> template. Then, <code>$this-&gt;v_output_buffer['&lt;variable_name&gt;'] = '&lt;html_code&gt;';</code> can be used to assign a Smarty variable.</p> <p>The second option is to add HTML code in a fixed position. With <code>$this-&gt;v_output_buffer[] = '&lt;html_code&gt;';</code> the HTML code is added directly below the actual confirmation message.</p> <p>For simplicity's sake, we will use the second option for this example and use helper method <code>createOrderDetails(IdType $orderId)</code>, to generate the HTML code to be added. Adding the order details should look like this:</p> <p><code>$this-&gt;html_output_array[] = $this-&gt;createOrderDetails($orderId);</code></p> <p>In the example code below, you can see the whole <code>MyOrderDetails</code> class. Within the <code>createOrderDetails</code> method, the <code>OrderReadService</code> is used to read the order information from the database, and the HTML code generated.</p> <pre><code>class MyOrderDetails extends MyOrderDetails_parent {\n    public function proceed()\n    {\n        parent::proceed();\n\n        $orderId = new IdType($this-&gt;v_data_array['orders_id']);\n        $this-&gt;html_output_array[] = $this-&gt;createOrderDetails($orderId);\n    }\n\n    private function createOrderDetails(IdType $orderId)\n    {\n        $orderReadService = StaticGXCoreLoader::getService('OrderRead');\n        $order = $orderReadService-&gt;getOrderById($orderId);\n\n        $customerAddressBlock = $order-&gt;getCustomerAddress();\n        $billingAddressBlock = $order-&gt;getBillingAddress();\n        $deliveryAddressBlock = $order-&gt;getDeliveryAddress();\n\n        $html = '&lt;h2&gt;Bestelldetails (#' . $order-&gt;getOrderId() . ')&lt;/h2&gt;'\n                . '&lt;div class=\"row\"&gt;'\n                    . '&lt;div class=\"col-sm-4\"&gt;&lt;b&gt;Kundenadresse:&lt;/b&gt;&lt;br /&gt; '\n                        . $customerAddressBlock-&gt;getFirstname() . ' '\n                        . $customerAddressBlock-&gt;getLastname() . '&lt;br /&gt;'\n                        . $customerAddressBlock-&gt;getStreet() . ' '\n                        . $customerAddressBlock-&gt;getHouseNumber() . '&lt;br /&gt;'\n                        . $customerAddressBlock-&gt;getPostcode() . ' '\n                        . $customerAddressBlock-&gt;getCity() . '&lt;br /&gt;'\n                    . '&lt;/div&gt;'\n                    . '&lt;div class=\"col-sm-4\"&gt;&lt;b&gt;Rechnungsadresse:&lt;/b&gt;&lt;br /&gt; '\n                        . $billingAddressBlock-&gt;getFirstname() . ' '\n                        . $billingAddressBlock-&gt;getLastname() . '&lt;br /&gt;'\n                        . $billingAddressBlock-&gt;getStreet() . ' '\n                        . $billingAddressBlock-&gt;getHouseNumber() . '&lt;br /&gt;'\n                        . $billingAddressBlock-&gt;getPostcode() . ' '\n                        . $billingAddressBlock-&gt;getCity() . '&lt;br /&gt;'\n                    . '&lt;/div&gt;'\n                    . '&lt;div class=\"col-sm-4\"&gt;&lt;b&gt;Lieferadresse:&lt;/b&gt;&lt;br /&gt; '\n                        . $deliveryAddressBlock-&gt;getFirstname() . ' '\n                        . $deliveryAddressBlock-&gt;getLastname() . '&lt;br /&gt;'\n                        . $deliveryAddressBlock-&gt;getStreet() . ' '\n                        . $deliveryAddressBlock-&gt;getHouseNumber() . '&lt;br /&gt;'\n                        . $deliveryAddressBlock-&gt;getPostcode() . ' '\n                        . $deliveryAddressBlock-&gt;getCity() . '&lt;br /&gt;'\n                    . '&lt;/div&gt;'\n                . '&lt;/div&gt;';\n\n        return $html;\n    }\n}\n</code></pre> <p>The complete overload/extender can be found here.</p>"},{"location":"framework/legacy-architecture/#clearing-the-module-cache","title":"Clearing the module cache","text":"<p>Because the extender system also uses the overloading system, you need to clear the module cache after adding or implementing an extender. This can be done in the Gambio Admin (Toolbox &gt; Cache).</p>"},{"location":"framework/legacy-architecture/#result-of-this-example","title":"Result of this example","text":"<p>Using this sample extender the result should look like this:</p> <p></p>"},{"location":"framework/legacy-architecture/#additional-examples","title":"Additional examples","text":"<p>Some additional example can be downloaded here.</p>"},{"location":"framework/business-components/","title":"All available business-related components","text":"<p>Using the DI Container it's possible to request and use several services and components. The following list shows all available business ones and their interfaces that can be requested through the DI Container or Legacy DI Container.</p> <p>Notice</p> <p>Please have in mind that you can find the public API (public methods etc.) of a service following the namespace of this service and opening the corresponding PHP file.</p> <p>Available components:</p> <ul> <li> <p><code>Gambio\\Admin\\ParcelService\\ParcelServiceService</code>:   Service class to manage (read, update, delete) the parcel service of the shop.</p> </li> <li> <p><code>Gambio\\Admin\\TrackingCode\\TrackingCodeService</code>:   Service class to manage (read, update, delete) the tracking codes of the shop.</p> </li> <li> <p><code>Gambio\\Admin\\UserConfiguration\\CurrentUserConfigurationService</code>:   Simple service to get and set user-based (admin-based) configurations.</p> </li> <li> <p><code>Gambio\\Admin\\Withdrawal\\WithdrawalService</code>:   Service class to manage (read, update, delete) the withdrawals of the shop.</p> </li> <li> <p><code>Gambio\\Core\\AdminAccess\\AdminService</code>:   Service class to fetch available admins.</p> </li> <li> <p><code>Gambio\\Core\\AdminAccess\\GroupService</code>:   Service class to manage (read, update, delete) the admin access groups.</p> </li> <li> <p><code>Gambio\\Core\\AdminAccess\\PermissionService</code>:   Service class to check and update permissions.</p> </li> <li> <p><code>Gambio\\Core\\AdminAccess\\RoleService</code>:   Service class to manage (read, update, delete) the admin access roles.</p> </li> </ul>"},{"location":"framework/business-components/_template/","title":"&lt;&lt; Name of the domain or noun that stands for the module &gt;&gt;","text":"<p>TODO: Describe the general topic in relation of the complete shop software. Like what is this all about and how does it fit in the whole software? How does it interact with other modules or systems?</p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/_template/#aggregate-root-name-domain","title":"&lt;&lt; Aggregate root name &gt;&gt; domain","text":"<p>TODO: Shortly describe the domain itself. What is can be done with it? You don't need to explain the model, that comes next ;-).</p>"},{"location":"framework/business-components/_template/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>TODO: Describe the domain model.</p>"},{"location":"framework/business-components/_template/#use-cases-using-readwritefilter-service","title":"Use cases using &lt;&lt; read|write|filter &gt;&gt; service","text":""},{"location":"framework/business-components/_template/#use-case","title":"&lt;&lt; Use Case &gt;&gt;","text":"<p>TODO: Add code snippet here. Use inline variable declaration if possible to describe provided arguments.</p>"},{"location":"framework/business-components/_template/#business-rules","title":"Business rules","text":"<p>TODO: Add business rules here.</p>"},{"location":"framework/business-components/_template/#domain-events","title":"Domain events","text":"Event Description <p>TODO: Add events here.</p>"},{"location":"framework/business-components/admin-access/","title":"Admin Access","text":"<p>The Admin Access manages admin actions in certain areas of the shop. It controls what an admin can do, see or interact with in the shop system. The shop owner (or any admin with specific permissions) can manage other admins permissions by assigning roles to an admin. An admin can have multiple roles, and each role can have various permissions granted.</p> <p>The Admin Access can be divided into three domains (admins, groups and roles). Each of these domains has its application service and factory to interact with that specific domain. Besides the three application services, there is also a fourth application service for permissions. This service depends on the other services and can be used as a simpler abstraction to interact with the permissions of an admin. Because of its context we handle this service as part of the role domain.</p> <p>The following sections describe each of these domains, their model, use cases and business rules.</p>"},{"location":"framework/business-components/admin-access/#admin-domain","title":"Admin domain","text":"<p>The admin domain provides some admin management functionality like serving all or a specific admin and assigning or removing roles. </p> <p>Furthermore, this domain doesn't allow creating or deleting an admin, nor can it change specific attributes like the name of an admin, because this would also affect parts of legacy code that handle the creation of customers or users. In a future refactoring this could also become a functionality of this domain. </p>"},{"location":"framework/business-components/admin-access/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Admin\\Model\\Admin</code> encapsulates a customer with admin permissions (having a specific customer group). Among other information the aggregate root contains the currently assigned roles of the admin. Using the services you can assign or remove roles from the aggregate root.</p>"},{"location":"framework/business-components/admin-access/#use-cases","title":"Use cases","text":""},{"location":"framework/business-components/admin-access/#fetching-all-or-a-specific-admin","title":"Fetching all or a specific admin","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminReadService **/\n\n$allAdmins     = $readService-&gt;getAdmins();\n$specificAdmin = $readService-&gt;getAdminById(1);\n</code></pre>"},{"location":"framework/business-components/admin-access/#assigning-one-or-multiple-roles-to-an-admin","title":"Assigning one or multiple roles to an admin","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminFactory **/\n\n$admin1  = $readService-&gt;getAdminById(1);\n$admin2  = $readService-&gt;getAdminById(1);\n\n$roleId1 = $factory-&gt;createRoleId(1);\n$roleId2 = $factory-&gt;createRoleId(2);\n\n$admin1-&gt;assignRole($roleId1);\n$admin2-&gt;assignRole($roleId1);\n$admin2-&gt;assignRole($roleId2);\n\n$writeService-&gt;storeAdmins($admin1, $admin2);\n</code></pre>"},{"location":"framework/business-components/admin-access/#removing-one-or-multiple-roles-from-an-admin","title":"Removing one or multiple roles from an admin","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Admin\\Services\\AdminFactory **/\n\n$admin1  = $readService-&gt;getAdminById(1);\n$admin2  = $readService-&gt;getAdminById(1);\n\n$roleId1 = $factory-&gt;createRoleId(1);\n$roleId2 = $factory-&gt;createRoleId(2);\n\n$admin1-&gt;removeRole($roleId1);\n$admin2-&gt;removeRole($roleId1);\n$admin2-&gt;removeRole($roleId2);\n\n$writeService-&gt;storeAdmins($admin1, $admin2);\n</code></pre>"},{"location":"framework/business-components/admin-access/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/admin-access/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Admin\\Model\\Events\\RoleToAdminAssigned</code> Will be raised if a role has been assigned to an admin. <code>Gambio\\Admin\\Modules\\Admin\\Model\\Events\\RoleFromAdminRemoved</code> Will be raised if a role has been removed from an admin."},{"location":"framework/business-components/admin-access/#access-group-domain","title":"Access Group domain","text":"<p>The group domain is a representation of a simple data management (or CRUD) system. The focus on this domain lies in managing groups and their group items. A group always represents a collection of group items which have a specific context in common.</p>"},{"location":"framework/business-components/admin-access/#aggregate-root-and-domain-model_1","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\AccessGroup</code> contains a collection of items. Each of the items represents an available page, a controller, an ajax handler or an HTTP route of the Gambio Admin. A group thus represents a specific area or module in the Gambio Admin (e.g. product management, categories, etc.).</p> <p>By default, the groups inside the shop are provided by Gambio. These groups are naturally protected and their names and descriptions cannot be changed. However, a third-party developer may introduce new sections into the Gambio Admin that they wish to encapsulate under a group. Such groups are not protected and their names and descriptions can be freely changed. Shop owners can use these groups to manage the permissions of admins.</p> <p>Group items are characterized by a type and a descriptor. The item type can represent a single page, controller, AJAX handler or HTTP route of the Gambio Admin. The system uses the descriptor to determine which page, controller, etc. it's representing.</p>"},{"location":"framework/business-components/admin-access/#use-cases_1","title":"Use cases","text":""},{"location":"framework/business-components/admin-access/#fetching-all-or-a-specific-group","title":"Fetching all or a specific group","text":"<pre><code>use Gambio\\Admin\\Modules\\AccessGroup\\Model\\ValueObjects\\GroupItem;\n\n/** $service \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\GroupReadService **/\n\n$allGroups                 = $service-&gt;getAccessGroups();\n$specificGroup             = $service-&gt;getAccessGroupById(1);\n$groupWithSpecificRoute    = $service-&gt;getAccessGroupByTypeAndDescriptor(GroupItem::ROUTE_TYPE, 'a-route');\n$groupForUnknownRouteItems = $service-&gt;getAccessGroupForUnknownItemsByType(GroupItem::ROUTE_TYPE);\n</code></pre>"},{"location":"framework/business-components/admin-access/#find-best-matching-group","title":"Find best-matching group","text":"<p>Sometimes you don't know if there is a specific group for the given type and descriptor. Therefore, the <code>findGroupByTypeAndDescriptor</code> method always provides the best-matching group. This could be the group for unknown items or a group containing a more generic descriptor as group item (e.g. <code>&lt;controller&gt;</code> instead of <code>&lt;controller&gt;/&lt;methoder&gt;</code> or <code>/some/http/route</code> instead of <code>/some/http/route/that/is/to/specific</code>).</p> <pre><code>use Gambio\\Admin\\Modules\\AccessGroup\\Model\\ValueObjects\\GroupItem;\n\n/** $service \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\GroupReadService **/\n\n$group = $service-&gt;findAccessGroupByTypeAndDescriptor(GroupItem::ROUTE_TYPE, 'a-route');\n</code></pre>"},{"location":"framework/business-components/admin-access/#create-a-new-group","title":"Create a new group","text":"<pre><code>/** $service \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n\n$names         = ['en' =&gt; 'english name', 'de' =&gt; 'german name'];\n$descriptions  = ['en' =&gt; 'english description', 'de' =&gt; 'german description'];\n$sortOrder     = 100;\n\n// Creating a new group with some default values.\n$newGroup1 = $service-&gt;createAccessGroup($names, $descriptions, $sortOrder);\n\n$isProtected   = true;\n$parentGroupId = 2;\n\n// This time, we set some optional values like protection state and parent group ID.\n$newGroup2 = $service-&gt;createAccessGroup($names, $descriptions, $sortOrder, $isProtected, $parentGroupId);\n</code></pre>"},{"location":"framework/business-components/admin-access/#delete-an-existing-group","title":"Delete an existing group","text":"<pre><code>/** $service \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteAccessGroups($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteAccessGroups($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/admin-access/#add-items-to-a-group","title":"Add items to a group","text":"<pre><code>use Gambio\\Admin\\Modules\\AccessGroup\\Model\\ValueObjects\\GroupItem;\n\n/** $readService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\GroupFactory **/\n\n$groupItem = $factory-&gt;createAccessGroupItem(GroupItem::PAGE_TYPE, 'customers.php');\n\n$group = $readService-&gt;getAccessGroupById(1);\n$group-&gt;addItem($groupItem);\n\n$writeService-&gt;storeAccessGroups($group);\n</code></pre>"},{"location":"framework/business-components/admin-access/#remove-items-from-a-group","title":"Remove items from a group","text":"<pre><code>use Gambio\\Admin\\Modules\\AccessGroup\\Model\\ValueObjects\\GroupItem;\n\n/** $readService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\GroupFactory **/\n\n$groupItem = $factory-&gt;createAccessGroupItem(GroupItem::CONTROLLER_TYPE, 'OrdersOverview');\n\n$group = $readService-&gt;getAccessGroupById(1);\n$group-&gt;removeItem($groupItem);\n\n$writeService-&gt;storeAccessGroups($group);\n</code></pre>"},{"location":"framework/business-components/admin-access/#update-name-and-description-of-a-group","title":"Update name and description of a group","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n\n$names        = $factory-&gt;createGroupNames(['en' =&gt; 'new english name', 'de' =&gt; 'new german name']);\n$descriptions = $factory-&gt;createGroupDescriptions(['en' =&gt; 'new english description', 'de' =&gt; 'new german description']);\n\n$group = $readService-&gt;getAccessGroupById(1);\n$group-&gt;updateNamesAndDescriptions($names, $descriptions);\n\n$writeService-&gt;storeAccessGroups($group);\n</code></pre>"},{"location":"framework/business-components/admin-access/#update-sort-order-of-a-group","title":"Update sort order of a group","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessGroup\\Services\\AccessGroupWriteService **/\n\n$group = $readService-&gt;getAccessGroupById(1);\n$group-&gt;updateSortOrder(200);\n\n$writeService-&gt;storeAccessGroups($group);\n</code></pre>"},{"location":"framework/business-components/admin-access/#business-rules_1","title":"Business rules","text":"<ul> <li>Each combination of item type and descriptor can only belong to one group.</li> <li>The name and description of a group with an active protected state should not be mutable through the Gambio Admin.</li> </ul>"},{"location":"framework/business-components/admin-access/#domain-events_1","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\ItemToAccessGroupAdded</code> Will be raised if an item has been added to a group. <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\AccessGroupCreated</code> Will be raised if a group has been created. <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\AccessGroupDeleted</code> Will be raised if a group has been deleted. <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\ItemFromAccessGroupRemoved</code> Will be raised if an item has been removed from a group. <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\NamesAndDescriptionsUpdated</code> Will be raised if a group name and description has been updated. <code>Gambio\\Admin\\Modules\\AccessGroup\\Model\\Events\\SortOrderUpdated</code> Will be raised if a group sort order has been updated."},{"location":"framework/business-components/admin-access/#role-domain","title":"Role domain","text":"<p>The role domain is mainly a representation of a simple data management (or CRUD) system. The focus on this domain lies in managing roles and their granted permissions.</p>"},{"location":"framework/business-components/admin-access/#aggregate-root-and-domain-model_2","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\AccessRole</code> contains a collection of permissions which describe what this role is allowed to do. Permissions are split into reading, writing and deletion. Each permission is applied to a specific group and its group items.</p> <p>By default, roles inside the shop are provided by Gambio. These roles are naturally protected and can not be changed. However, it is possible to introduce new roles that can freely be managed and changed.</p>"},{"location":"framework/business-components/admin-access/#use-cases_2","title":"Use cases","text":""},{"location":"framework/business-components/admin-access/#fetching-all-or-a-specific-role","title":"Fetching all or a specific role","text":"<pre><code>/** $service \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleReadService **/\n\n$allRoles             = $service-&gt;getAccessRoles();\n$rolesOfSpecificAdmin = $service-&gt;getAccessRolesByAdmin(1);\n$specificRole         = $service-&gt;getAccessRoleById(1);\n</code></pre>"},{"location":"framework/business-components/admin-access/#create-a-new-role","title":"Create a new role","text":"<pre><code>/** $service \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleWriteService **/\n\n$names         = ['en' =&gt; 'english name', 'de' =&gt; 'german name'];\n$descriptions  = ['en' =&gt; 'english description', 'de' =&gt; 'german description'];\n$sortOrder     = 100;\n\n// Creating a new role with a default value.\n$role1 = $service-&gt;createAccessRole($names, $descriptions, $sortOrder);\n\n$isProtected = true;\n\n// This time, we set the optional value protection state.\n$role2 = $service-&gt;createAccessRole($names, $descriptions, $sortOrder, $isProtected);\n</code></pre>"},{"location":"framework/business-components/admin-access/#delete-an-existing-role","title":"Delete an existing role","text":"<pre><code>/** $service \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteAccessRoles($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteAccessRoles($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/admin-access/#check-permission-of-a-role","title":"Check permission of a role","text":"<pre><code>use Gambio\\Admin\\Modules\\AccessRole\\Model\\ValueObjects\\PermissionAction;\n\n/** $service \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleReadService **/\n/** $factory \\Gambio\\Admin\\Modules\\AccessRole\\Services\\RoleFactory **/\n\n$action  = $factory-&gt;createPermissionAction(PermissionAction::READ);\n$groupId = $factory-&gt;createAccessGroupId(1);\n\n$role = $service-&gt;getAccessGroupById(1);\n\n$permissionGranted = $role-&gt;checkPermission($action, $groupId);\n</code></pre> <p>Note: To check the permissions on an admin, you need to iterate over all roles of that admin.</p>"},{"location":"framework/business-components/admin-access/#update-permission-of-a-role","title":"Update permission of a role","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\AccessRole\\Services\\RoleFactory **/\n\n$groupId         = 1;\n$readingGranted  = true;\n$writingGranted  = true;\n$deletingGranted = false;\n\n$permission = $factory-&gt;createPermission($groupId, $readingGranted, $writingGranted, $deletingGranted);\n\n$role = $readService-&gt;getAccessRoleById(1);\n$role-&gt;updatePermission($permission);\n\n$writeService-&gt;storeAccessRoles($role);\n</code></pre>"},{"location":"framework/business-components/admin-access/#update-name-and-description-of-a-role","title":"Update name and description of a role","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\AccessRole\\Services\\RoleFactory **/\n\n$names        = $factory-&gt;createAccessRoleNames(['en' =&gt; 'new english name', 'de' =&gt; 'new german name']);\n$descriptions = $factory-&gt;createAccessRoleDescriptions(['en' =&gt; 'new english description', 'de' =&gt; 'new german description']);\n\n$role = $readService-&gt;getAccessRoleById(1);\n$role-&gt;updateNamesAndDescriptions($names, $descriptions);\n\n$writeService-&gt;storeAccessRoles($role);\n</code></pre>"},{"location":"framework/business-components/admin-access/#update-sort-order-of-a-role","title":"Update sort order of a role","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\AccessRole\\Services\\AccessRoleWriteService **/\n\n$role = $readService-&gt;getAccessRoleById(1);\n$role-&gt;updateSortOrder(200);\n\n$writeService-&gt;storeAccessRoles($role);\n</code></pre>"},{"location":"framework/business-components/admin-access/#business-rules_2","title":"Business rules","text":"<ul> <li>If you check a permission that the role does not have (e.g. because it doesn't exist) the check should return false.</li> <li>The name and description of a role with an active protected state should not be mutable through the Gambio Admin.</li> </ul>"},{"location":"framework/business-components/admin-access/#domain-events_2","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\Events\\AccessRoleCreated</code> Will be raised if a role has been created. <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\Events\\AccessRoleDeleted</code> Will be raised if a role has been deleted. <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\Events\\NamesAndDescriptionsUpdated</code> Will be raised if a role name and description has been updated. <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\Events\\PermissionUpdated</code> Will be raised if a role permission has been updated. <code>Gambio\\Admin\\Modules\\AccessRole\\Model\\Events\\SortOrderUpdated</code> Will be raised if a role sort order has been updated."},{"location":"framework/business-components/customer-addon-value/","title":"Customer Addon Value","text":"<p>External modules often need to add their own information about a specific customer. The addon values represent this functionality and allows module developers to store additional data for specific customers, which can be stored, updated, and deleted.</p> <p>The following sections describe the domain, model, use cases, business rules, and events.</p>"},{"location":"framework/business-components/customer-addon-value/#customer-addon-value-domain","title":"Customer addon value domain","text":"<p>The customer addon values domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing values.</p> <p>This domain is part of the general customer management domain and is tightly linked to the Customer domain.</p>"},{"location":"framework/business-components/customer-addon-value/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Model\\CustomerAddonValue</code> provides additional information for a specific customer. Addon values have an uniq key to identify them and can store data as a string.</p> <p></p>"},{"location":"framework/business-components/customer-addon-value/#read-and-write-services","title":"Read and write services","text":""},{"location":"framework/business-components/customer-addon-value/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/customer-addon-value/#fetching-all-or-a-specific-customer-addon-value","title":"Fetching all or a specific customer addon value","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueReadService **/\n\n$allCustomerAddonValues     = $readService-&gt;getCustomerAddonValues($customerId = 1);\n$specificCustomerAddonValue = $readService-&gt;getCustomerAddonValue($customerId = 1, $key = 'key');\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/customer-addon-value/#creating-a-new-customer-addon-value","title":"Creating a new customer addon value","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService **/\n\n$addonValueId = $writeService-&gt;createCustomerAddonValue($customerId = 1, $key = 'key', $value = 'value');\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#creating-multiple-customer-addon-values-at-once","title":"Creating multiple customer addon values at once","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService * */\n\n$creationArguments = [\n    [$customerId = 1, $key = 'key', $value = 'value'],\n    [$customerId = 1, $key = 'key2', $value = 'value2'],\n];\n\n$addonValueId = $writeService-&gt;createMultipleCustomerAddonValues(...$creationArguments);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#updating-an-existing-customer-addon-value","title":"Updating an existing customer addon value","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService * */\n/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueReadService * */\n\n$addonValue = $readService-&gt;getCustomerAddonValue($customerId = 1, $key = 'key');\n$addonValue-&gt;changeValue($newValue = 'new-value');\n\n$writeService-&gt;storeCustomerAddonValues($addonValue);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#deleting-a-customer-addon-value-by-customer-addon-value-id","title":"Deleting a customer addon value by customer addon value ID","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService **/\n\n$addonValueIds = [\n    ['customerId' = 1, 'key' = 'key'],\n    ['customerId' = 1, 'key' = 'key2'],\n];\n\n$writeService-&gt;deleteCustomerAddonValuesByIds(...$addonValueIds);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#deleting-a-customer-addon-value-by-customers","title":"Deleting a customer addon value by customers","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService **/\n\n$customerIds = [1, 2];\n\n$writeService-&gt;deleteCustomerAddonValuesByCustomerIds(...$customerIds);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#deleting-a-customer-addon-value-by-keys","title":"Deleting a customer addon value by keys","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueWriteService **/\n\n$keys = ['key1', 'key2'];\n\n$writeService-&gt;deleteCustomerAddonValuesByKeys(...$keys);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#safe-and-easy-service-to-set-and-get-customer-addon-values","title":"Safe and easy service to set and get customer addon values","text":""},{"location":"framework/business-components/customer-addon-value/#set-a-customer-addon-value","title":"Set a customer addon value","text":"<pre><code>/** @var $storage \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueStorage **/\n\n$storage-&gt;setValue($customerId = 1, $key = 'my-key', $value = 'my-value');\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#get-a-customer-addon-value","title":"Get a customer addon value","text":"<pre><code>/** @var $storage \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueStorage **/\n\n$storage-&gt;getValue($customerId = 1, $key = 'my-key', $defaultValue = 'default-value');\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#filter-all-existing-customer-addon-values-including-sorting-and-pagination","title":"Filter all existing customer addon values including sorting and pagination","text":"<pre><code>/** @var $filterService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Services\\CustomerAddonValueFilterService **/\n\n$customerId    = 1;\n$filters       = ['value' =&gt; 'prefix*']; // Only show addon values their values start with \"prefix\"\n$sorting       = '+key';    // in ascending order of the key\n$filteredAddonValues = $filterService-&gt;filterCustomerAddonValues($customerId, $filters, $sorting);\n</code></pre>"},{"location":"framework/business-components/customer-addon-value/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the customer addon value and the filtering term. The assigned string (e.g. <code>get|2022-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2022-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>key</code> X X <code>value</code> X X"},{"location":"framework/business-components/customer-addon-value/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/customer-addon-value/#business-rules","title":"Business rules","text":"<ul> <li>If a customer has been deleted the corresponding addon values need to be deleted as well.</li> <li>The identifier is to be unique for each customer.</li> </ul>"},{"location":"framework/business-components/customer-addon-value/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Model\\Events\\CustomerAddonValueCreated</code> Will be raised if a customer addon value has been created. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Model\\Events\\CustomerAddonValueDeleted</code> Will be raised if a customer addon value has been removed. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\AddonValues\\Model\\Events\\CustomerAddonValuesContentUpdated</code> Will be raised if the value of a customer addon value has been updated."},{"location":"framework/business-components/customer-legacy-services/","title":"Customer Legacy Services","text":"<p>The current Gambio Admin page for editing a customer contains several configurations that aren't part of the new customer domains or the other ones we designed. Therefore, we are going to introduce further compatibility services or even domains that we don't want to advertise for external developers to use.</p> <p>The following documentation is for internal use and should create an image of how these old systems/mechanics are linked with the new designed domains.</p>"},{"location":"framework/business-components/customer-legacy-services/#customer-address","title":"Customer Address","text":"<p>In the Gambio Admin it's possible to change the general default address of a customer. For this reason we need partially implemented the customer address domain. To keep the work here to a minimum we are going to implement only the necessary logic to get and update the customers' default address.</p> <p> </p>"},{"location":"framework/business-components/customer-legacy-services/#newsletter","title":"Newsletter","text":"<p>The subscription for newsletters can also be seen and changed in the Gambio Admin page where you edit the customers. Therefore, we are going to implement a super simple model plus service to see if a customer is already subscribed as well as managing all subscriptions.</p> <p> </p>"},{"location":"framework/business-components/customer-legacy-services/#payment-and-shipping-modules","title":"Payment and Shipping Modules","text":"<p>It's also possible to decide which payment and shipping modules are disallowed for a certain customer. To allow this in the future version, we are going to implement a simple model plus service for these two domains.</p> <p> </p> <p> </p>"},{"location":"framework/business-components/customer-memo/","title":"Customer Memo","text":"<p>An admin can create and add memos to customers, which are visible to other admins. These memos can be used to store and provide information about a specific customer to other admins.</p> <p>The following sections describe the domain, model, use cases, business rules, and events.</p>"},{"location":"framework/business-components/customer-memo/#customer-memo-domain","title":"Customer memo domain","text":"<p>The customer memos domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing memos.</p> <p>This domain is part of the general customer management domain and is tightly linked to the Customer domain.</p>"},{"location":"framework/business-components/customer-memo/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Model\\CustomerMemo</code> references one specific customer memo.</p> <p>A customer memo encapsulates information like the author/creator, a memo content, and timestamps for creation and the last update. Beside creation and deletion, it's only possible to update the content of a memo.</p> <p></p>"},{"location":"framework/business-components/customer-memo/#read-and-write-services","title":"Read and write services","text":""},{"location":"framework/business-components/customer-memo/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/customer-memo/#fetching-all-or-a-specific-customer-memo","title":"Fetching all or a specific customer memo","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoReadService **/\n\n$allCustomerMemos     = $readService-&gt;getCustomerMemos($customerId = 1);\n$specificCustomerMemo = $readService-&gt;getCustomerMemoById($memoId = 1);\n</code></pre>"},{"location":"framework/business-components/customer-memo/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/customer-memo/#creating-a-new-customer-memo","title":"Creating a new customer memo","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoWriteService **/\n\n$memoId = $writeService-&gt;createCustomerMemo(\n    $customerId = 1, $creatorId = 2, $content = 'important note about a customer'\n);\n</code></pre>"},{"location":"framework/business-components/customer-memo/#creating-multiple-customer-memos-at-once","title":"Creating multiple customer memos at once","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoWriteService **/\n\n$creationArguments = [\n    [\n        $customerId = 1, \n        $creatorId = 2, \n        $content = 'important note about a customer'    \n    ],\n    [\n        $customerId = 1, \n        $creatorId = 2, \n        $content = 'a second important note about a customer'    \n    ],\n];\n\n$memoId = $writeService-&gt;createMultipleCustomerMemos(...$creationArguments);\n</code></pre>"},{"location":"framework/business-components/customer-memo/#updating-the-customer-memos-content","title":"Updating the customer memos content","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoWriteService **/\n/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoReadService **/\n\n$memo = $readService-&gt;getCustomerMemoById($memoId = 1);\n$memo-&gt;changeContent($content = 'updated memo text');\n\n$writeService-&gt;storeCustomerMemos($memo);\n</code></pre>"},{"location":"framework/business-components/customer-memo/#deleting-a-customer-memo","title":"Deleting a customer memo","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoWriteService **/\n\n$memoIds = [1, 2];\n\n$writeService-&gt;deleteCustomerMemosByMemoIds(...$memoIds);\n</code></pre> <pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoWriteService **/\n\n$customerIds = [1, 2];\n\n$writeService-&gt;deleteCustomerMemosByCustomerIds(...$customerIds);\n</code></pre>"},{"location":"framework/business-components/customer-memo/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/customer-memo/#filter-all-existing-customer-memos-including-sorting-and-pagination","title":"Filter all existing customer memos including sorting and pagination","text":"<pre><code>/** @var $filterService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Services\\CustomerMemoFilterService **/\n\n$customerId    = 1;\n$filters       = ['creatorId' =&gt; 1]; // Only show memos created by admin with ID 1\n$sorting       = '+creationTime';    // in ascending order of the creation date\n$filteredMemos = $filterService-&gt;filterCustomerMemos($customerId, $filters, $sorting);     \n</code></pre>"},{"location":"framework/business-components/customer-memo/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the customer memo and the filtering term. The assigned string (e.g. <code>get|2022-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2022-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>creatorId</code> X X X X X <code>content</code> X X <code>creationTime</code> X X X X X <code>updatedAtTime</code> X X X X X"},{"location":"framework/business-components/customer-memo/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/customer-memo/#business-rules","title":"Business rules","text":"<ul> <li>If a customer has been deleted the corresponding memos need to be deleted as well.</li> <li>The content can't be whitespace only.</li> </ul>"},{"location":"framework/business-components/customer-memo/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Model\\Events\\CustomerMemoCreated</code> Will be raised if a customer memo has been created. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Model\\Events\\CustomerMemoDeleted</code> Will be raised if a customer memo has been removed. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Memos\\Model\\Events\\CustomerMemosContentUpdated</code> Will be raised if the content of a customer memo has been updated."},{"location":"framework/business-components/customer/","title":"Customer","text":"<p>Customers are an essential part of the shop software. For ordering a product a visitor of the shop must create an account. Each account is connected to other parts of the shop software like orders, reviews, addresses etc. Even the admins are based on customer accounts and have extended permissions and additional functionalities.</p> <p>Customers refer to a person that have a registered or guest account. A customer account is needed for certain actions like placing orders, writing reviews, and so on.</p> <p>The following sections describe the domain, model, use cases, business rules, and events.</p>"},{"location":"framework/business-components/customer/#customer-domain","title":"Customer Domain","text":"<p>The Customer domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing customers.</p> <p>It's linked with other domains which sums up to the general customer management domain:</p> <ul> <li>Customer Memo</li> <li>Customer Addon Value</li> <li>Customer Credential</li> <li>Customer Address</li> <li>Customer Address Addon Value</li> <li>Customer Group</li> </ul>"},{"location":"framework/business-components/customer/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Customer\\Model\\Customer</code> encapsulates personal, business, contact, and credit information. A customer itself can be created as normal or guest account. Guest account can only be used temporary to order products and can be deleted by an admin, if they aren't in use anymore.</p> <p>Furthermore, a customer can be assigned a merchant state, which is mainly done by adding the customer to a specific customer group (the merchants).</p> <p>There are some configurations like disallowed payment and shipping methods or the newsletter subscription that are customer-specific and can be configured by referencing an existing customer in services of other domains.</p> <p></p>"},{"location":"framework/business-components/customer/#read-and-write-services","title":"Read and write services","text":""},{"location":"framework/business-components/customer/#use-cases-using-read-services","title":"Use cases using read services","text":""},{"location":"framework/business-components/customer/#fetching-all-or-a-specific-customer","title":"Fetching all or a specific customer","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n\n$allCustomers     = $readService-&gt;getCustomers();\n$allGuestAccounts = $readService-&gt;getGuestAccounts();\n$specificCustomer = $readService-&gt;getCustomerById($customerId = 1);\n</code></pre>"},{"location":"framework/business-components/customer/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/customer/#creating-a-new-customer-as-guest-account","title":"Creating a new customer (as guest account)","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$personalInformation = $factory-&gt;createPersonalInformation(\n    $gender = CustomerGender::GENDER_DIVERSE, \n    $firstName = 'John', \n    $lastName = 'Doe', \n    $customerNumber = 'c-001', \n    $dateOfBirth = new DateTimeImmutable('1970-01-01 00:00:00')\n);\n\n$businessInformation = $factory-&gt;createBusinessInformation(\n    $companyName = 'Gambio GmbH', $vatId = '', $isMerchant = false\n);\n\n$contactInformation = $factory-&gt;createContactInformation(\n    $email = 'admin@example.org',\n    $phoneNumber = '0170123456789',\n    $faxNumber = '0170987654321'\n);\n\n$id = $writeService-&gt;createCustomer(\n    $personalInformation, $businessInformation, $contactInformation,\n    $credit = 10000, $isFavorite = false, $customerGroup = 1\n);\n\n// It's also possible to define them as guest accounts when creating them.\n// Therefore, we provide a specific method in the write service:\n// \n// $id = $writeService-&gt;createGuestAccount(\n//     $personalInformation, $businessInformation, $contactInformation,\n//     $credit = 10000, $isFavorite = false, $customerGroup = 1\n// );\n</code></pre> <p>Notice</p> <p>Please don't forget to create a default address, because the legacy frontend expects one for each customer.</p>"},{"location":"framework/business-components/customer/#creating-multiple-customers-as-guest-accounts-at-once","title":"Creating multiple customers (as guest accounts) at once","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$personalInformation = [\n    $factory-&gt;createPersonalInformation(\n        $gender = CustomerGender::GENDER_DIVERSE, \n        $firstName = 'John', \n        $lastName = 'Doe', \n        $customerNumber = 'c-001', \n        $dateOfBirth = new DateTimeImmutable('1970-01-01 00:00:00')\n    ),\n    $factory-&gt;createPersonalInformation(\n        $gender = CustomerGender::GENDER_FEMALE, \n        $firstName = 'Jane', \n        $lastName = 'Doe', \n        $customerNumber = 'c-002', \n        $dateOfBirth = new DateTimeImmutable('1970-01-01 00:00:00')\n    )\n];\n\n$businessInformation = [\n    $factory-&gt;createBusinessInformation(\n        $companyName = 'Gambio GmbH', $vatId = '', $isMerchant = false\n    ),\n    $factory-&gt;createBusinessInformation(\n        $companyName = 'Gambio GmbH', $vatId = '', $isMerchant = false\n    ),\n];\n\n$contactInformation  = [\n    $factory-&gt;createContactInformation(\n        $email = 'admin@example.org', $phoneNumber = '0170123456789',\n        $faxNumber = '0170987654321'\n    ),\n    $factory-&gt;createContactInformation(\n        $email = 'admin2@example.org', $phoneNumber = '0170123456789',\n        $faxNumber = '0170987654321'\n    ),\n];\n\n$creationArgs = [\n    [\n        $personalInformation[0], $businessInformation[0], $contactInformation[0], \n        $credits = 10000, $isFavorite = false, $customerGroup = 1,\n    ],\n    [\n        $personalInformation[1], $businessInformation[1], $contactInformation[1], \n        $credits = 0, $isFavorite = true, $customerGroup = 2,\n    ],\n];\n\n$ids = $writeService-&gt;createMultipleCustomers(...$creationArgs);\n\n// It's also possible to define them as guest accounts when creating them.\n// Therefore, we provide a specific method in the write service:\n// \n// $ids = $writeService-&gt;createMultipleGuestAccounts(...$creationArgs);\n</code></pre> <p>Notice</p> <p>Please don't forget to create a default address, because the legacy frontend expects one for each customer.</p>"},{"location":"framework/business-components/customer/#updating-the-customers-customer-group","title":"Updating the customers customer group","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$customerGroup = $this-&gt;factory-&gt;createCustomerGroup($customerGroup = 1);\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changeCustomerGroup($customerGroup);\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#updating-the-customers-personal-information","title":"Updating the customers personal information","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$personalInformation = $factory-&gt;createPersonalInformation(\n    $gender = CustomerGender::GENDER_DIVERSE, \n    $firstName = 'John', \n    $lastName = 'Doe', \n    $customerNumber = 'c-001', \n    $dateOfBirth = new DateTimeImmutable('1970-01-01 00:00:00')\n);\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changePersonalInformation($personalInformation);\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#updating-the-customers-business-information","title":"Updating the customers business information","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$businessInformation = $factory-&gt;createBusinessInformation(\n    $companyName = 'Gambio GmbH', $vatId = '', $isMerchant = false\n);\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changeBusinessInformation($businessInformation);\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#updating-the-customers-contact-information","title":"Updating the customers contact information","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$contactInformation = $factory-&gt;createContactInformation(\n    $email = 'admin@example.org', $phoneNumber = '0170123456789',\n    $faxNumber = '0170987654321'\n);\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changeContactInformation($contactInformation);\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#updating-the-customers-credit","title":"Updating the customers credit","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changeCredit($factory-&gt;createCredit(0));\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#updating-the-customers-is-favorite-state","title":"Updating the customers is-favorite state","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFactory **/\n\n$customer = $readService-&gt;getCustomerById($customerId = 1);\n$customer-&gt;changeIsFavoriteState(false);\n\n$writeService-&gt;storeCustomers($customer);\n</code></pre>"},{"location":"framework/business-components/customer/#setting-the-customers-password","title":"Setting the customers password","text":"<pre><code>/** @var $passwordService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerPasswordWriteService **/\n\n$passwordService-&gt;setCustomerPassword($customerId = 1, $password = 'my-new-password');\n</code></pre>"},{"location":"framework/business-components/customer/#deleting-a-customer","title":"Deleting a customer","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n$ids = [1, 3, 5];\n\n$writeService-&gt;deleteCustomers(...$ids);\n</code></pre>"},{"location":"framework/business-components/customer/#deleting-a-guest-customers","title":"Deleting a guest customers","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerWriteService **/\n\n$writeService-&gt;deleteOutdatedGuestAccounts();\n</code></pre>"},{"location":"framework/business-components/customer/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/customer/#filter-all-existing-customers-including-sorting-and-pagination","title":"Filter all existing customers including sorting and pagination","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $filterService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerFilterService **/\n\n$filters = [\n    'gender' =&gt; CustomerGender::GENDER_DIVERSE, // Customers with diverse gender\n];\n$sorting = '-id'; // In descending order of customer id\n\n$filteredCustomers             = $filterService-&gt;filterCustomers(\n    $filters, $sorting, $limit = 25, $offset = 0\n);\n$totalCountOfFilteredCustomers = $filterService-&gt;getCustomersTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/customer/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the customer and the filtering term. The assigned string (e.g. <code>get|2022-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2022-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>customerGroup</code> X X X X X <code>isGuestAccount</code> X <code>isFavorite</code> X <code>personalInformation.gender</code> X X <code>personalInformation.firstName</code> X X <code>personalInformation.lastName</code> X X <code>personalInformation.dateOfBirth</code> X X <code>personalInformation.customerNumber</code> X X <code>contactInformation.email</code> X X <code>contactInformation.phoneNumber</code> X X <code>contactInformation.faxNumber</code> X X <code>businessInformation.companyName</code> X X <code>businessInformation.vatId</code> X X <code>businessInformation.isMerchant</code> X <code>credit</code> X X X X X"},{"location":"framework/business-components/customer/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/customer/#use-cases-using-search-service","title":"Use cases using search service","text":""},{"location":"framework/business-components/customer/#search-existing-customers-including-sorting-and-pagination","title":"Search existing customers including sorting and pagination","text":"<pre><code>use Gambio\\Admin\\Modules\\Customer\\Model\\ValueObjects\\CustomerGender;\n\n/** @var $searchService \\Gambio\\Admin\\Modules\\Customer\\Services\\CustomerSearchService **/\n\n$searchTerm = 'Jon'\n$sorting    = '-id'; // In descending order of customer id\n$customers  = $filterService-&gt;searchCustomers($searchTerm, $sorting, $limit = 25, $offset = 0);\n\n$totalCountOfSearchedCustomers = $filterService-&gt;getSearchedCustomerTotalCount($searchTerm);\n</code></pre>"},{"location":"framework/business-components/customer/#business-rules","title":"Business rules","text":"<ul> <li>Customers can be guests. A guest account can only be used as long as the customer has an active (browser) session,   therefore, these customers don\u2019t have credentials. The same guests can be identified by the email address so that a   new customer can replace an existing guest account when using the same email address.</li> <li>Guest account can only be deleted, if the configuration <code>DELETE_GUEST_ACCOUNT</code> is enabled and these users aren't   online (which means, there is no entry in the <code>whos_online</code> DB table).</li> <li>The main admin (customer ID <code>1</code>) can't be deleted.</li> <li>An email address must be unique for registered accounts and can only be assigned to one single customer. This rule   does not apply to guest accounts.</li> <li>A customer can be identified as a merchant if:<ul> <li>the <code>isMerchant</code> state is <code>true</code>.</li> <li>the customer is part of a merchant customer group. In this case, the customer-specific <code>isMerchant</code> state is   always <code>true</code> and can't be set to <code>false</code>.</li> </ul> </li> <li>Minimal length of attributes (first name, street, etc.) is determined by the general shop configurations:<ul> <li><code>ENTRY_CITY_MIN_LENGTH</code></li> <li><code>ENTRY_COMPANY_MIN_LENGTH</code></li> <li><code>ENTRY_DOB_MIN_LENGTH</code></li> <li><code>ENTRY_EMAIL_ADDRESS_MIN_LENGTH</code></li> <li><code>ENTRY_FIRST_NAME_MIN_LENGTH</code></li> <li><code>ENTRY_HOUSENUMBER_MIN_LENGTH</code></li> <li><code>ENTRY_LAST_NAME_MIN_LENGTH</code></li> <li><code>ENTRY_PASSWORD_MIN_LENGTH</code></li> <li><code>ENTRY_POSTCODE_MIN_LENGTH</code></li> <li><code>ENTRY_STATE_MIN_LENGTH</code></li> <li><code>ENTRY_STREET_ADDRESS_MIN_LENGTH</code></li> <li><code>ENTRY_TELEPHONE_MIN_LENGTH</code> <p>Note: This rule only apply for the registration process in the Gambio Shop so that these validations are not part of the repository logic. We will enforce these rule in the Gambio Shop frontend and its corresponding backend.</p> </li> </ul> </li> <li>The attribute merchant can only be used, if the configuration <code>ACCOUNT_B2B_STATUS</code> is enabled.</li> <li>The attribute company name can only be used, if the configuration <code>ACCOUNT_COMPANY</code> is enabled.</li> <li>The attribute day of birth can only be used, if the configuration <code>ACCOUNT_DOB</code> is enabled.</li> <li>The attribute fax can only be used, if the configuration <code>ACCOUNT_FAX</code> is enabled.</li> <li>The attribute phone can only be used, if the configuration <code>ACCOUNT_TELEPHONE</code> is enabled.</li> <li>The attribute gender can only be used, if the configuration <code>ACCOUNT_GENDER</code> is enabled.</li> <li>The attribute gender is mandatory, if the configuration <code>GENDER_MANDATORY</code> is enabled.</li> <li>The attributes first name and last name are optional, if the configuration <code>ACCOUNT_NAMES_OPTIONAL</code> is enabled and a   company name provided.</li> </ul> <p>Note: This isn't a business rule of this domain, but if the configuration <code>ACCOUNT_DEFAULT_B2B_STATUS</code> is enabled the default value of the <code>isMerchant</code> state is <code>true</code>. When creating a customer and a VAT-ID is provided, it's possible to set/determine the <code>isMerchant</code> state based on the result of the validation of the VAT-ID.</p>"},{"location":"framework/business-components/customer/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomerCreated</code> Will be raised if a customer has been created. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomerDeleted</code> Will be raised if a customer has been removed. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomersPersonalInformationUpdated</code> Will be raised if the customers personal information has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomersBusinessInformationUpdated</code> Will be raised if the customers business information has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomersContactInformationUpdated</code> Will be raised if the customers contact information has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomersCreditUpdated</code> Will be raised if the customers credit has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Model\\Events\\CustomersFavoriteStateUpdated</code> Will be raised if the customers favoritization state has been updated."},{"location":"framework/business-components/image-list/","title":"Image List","text":"<p>An image list is a collection of images that can be referenced in several other parts of the shop software.</p>"},{"location":"framework/business-components/image-list/#image-list-domain","title":"Image List domain","text":"<p>The image list domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing image lists. It's important to know that the image lists are referenced by the other domains like product options or product variants, therefore, it's not possible to delete image list or image list values that are used in these domains.</p>"},{"location":"framework/business-components/image-list/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\ImageList\\Model\\ImageList</code> encapsulates mainly a collection of images, but also has a name. The contained images are defined by a relative path that is based on the <code>images/product_images/original_images</code> directory. Furthermore, these images provide a sort order and language-dependent titles (used for the <code>title</code> attribute of the <code>img</code> tag) and alternative titles (used for the <code>alt</code> attribute of the <code>img</code> tag).</p> <p>After creation, the aggregate root provides the possibility to change the attributes of the image list itself, as well as, adding, updating or removing the contained images.</p>"},{"location":"framework/business-components/image-list/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/image-list/#fetching-all-or-a-specific-image-list","title":"Fetching all or a specific image list","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListReadService **/\n\n$allImageLists     = $readService-&gt;getAllImageLists();\n$specificImageList = $readService-&gt;getImageListById($imageListId = 1);\n</code></pre>"},{"location":"framework/business-components/image-list/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/image-list/#creating-a-new-image-list","title":"Creating a new image list","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n\n\n$id = $writeService-&gt;createImageList($imageListName = 'my-image-list');\n</code></pre>"},{"location":"framework/business-components/image-list/#creating-multiple-image-lists-at-once","title":"Creating multiple image lists at once","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n\n$imageListNames = [\n    'my-first-image-list',\n    'my-second-image-list',\n];\n\n$ids = $writeService-&gt;createMultipleImageLists(...$imageListNames);\n</code></pre>"},{"location":"framework/business-components/image-list/#updating-the-image-lists-name","title":"Updating the image lists name","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n\n$imagelist = $readService-&gt;getImageListById($imageListId = 1);\n$imagelist-&gt;changeName($newName = 'my-new-image-list-name');\n\n$writeService-&gt;storeImageLists($imagelist);\n</code></pre>"},{"location":"framework/business-components/image-list/#adding-an-image-to-an-image-list","title":"Adding an image to an image list","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListFactory **/\n\n$localPath = $factory-&gt;createImagePath($relativePath = 'relative-path-to/image.jpg');\n$titles    = $factory-&gt;createImageTitles(\n    $factory-&gt;createImageTitle($languageCode1 = 'en', $title1 = 'titel - en'),\n    $factory-&gt;createImageTitle($languageCode2 = 'de', $title2 = 'titel - de')\n);\n$altTitles = $factory-&gt;createImageAltTitles(\n    $factory-&gt;createImageAltTitle($altLanguageCode1 = 'en', $altTitle1 = 'alt titel - en'),\n    $factory-&gt;createImageAltTitle($altLanguageCode2 = 'de', $altTitle2 = 'alt titel - de')\n);\n\n$newImage = $factory-&gt;createNewImage($localPath, $titles, $altTitles, $sortOrder = 1);\n\n$imagelist = $readService-&gt;getImageListById($imageListId = 1);\n$imagelist-&gt;addNewImages($newImage); // It's also possible to add multiple images at once\n\n$writeService-&gt;storeImageLists($imagelist);\n</code></pre>"},{"location":"framework/business-components/image-list/#updating-a-image-list-value-of-an-image-list","title":"Updating a (image list) value of an image list","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListFactory **/\n\n$newTitles = $factory-&gt;createImageTitles(\n    $factory-&gt;createImageTitle($languageCode1 = 'en', $title1 = 'new titel - en'),\n    $factory-&gt;createImageTitle($languageCode2 = 'de', $title2 = 'new titel - de')\n);\n\n$imagelist    = $readService-&gt;getImageListById($imageListId = 1);\n$image        = $imagelist-&gt;images()-&gt;getByLocalPath($relativePath = 'relative-path-to/image.jpg');\n$updatedImage = $image-&gt;withSortOrder($newSortOrder = 1)-&gt;withTitles($newTitles);\n$imagelist-&gt;changeImages($updatedImage); // It's also possible to change multiple images at once\n\n$writeService-&gt;storeImage Lists($imagelist);\n</code></pre>"},{"location":"framework/business-components/image-list/#removing-a-image-list-value-from-an-image-list","title":"Removing a (image list) value from an image list","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListFactory **/\n\n$imagelist = $readService-&gt;getImageListById($imageListId = 1);\n$imagelist-&gt;removeImage($factory-&gt;createImagePath($relativePath = 'relative-path-to/image.jpg'));\n\n$writeService-&gt;storeImageLists($imagelist);\n</code></pre>"},{"location":"framework/business-components/image-list/#deleting-an-image-list","title":"Deleting an image list","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListWriteService **/\n\n$imagelistIds = [1, 2];\n\n$writeService-&gt;deleteImageLists(...$imagelistIds);\n</code></pre>"},{"location":"framework/business-components/image-list/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/image-list/#filter-all-existing-image-lists-including-sorting-and-pagination","title":"Filter all existing image lists including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\ImageList\\Services\\ImageListFilterService **/\n\n$filters = [\n    'images.localPath' =&gt; '*.png', // Image lists that have at least one image that end with `.png`\n];\n$sorting = '-name'; // In descending order of name\n$limit   = 25;\n$offset  = 0;\n\n$filteredImageLists             = $filterService-&gt;filterImageLists($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredImageLists = $filterService-&gt;getImageListsTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/image-list/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the image list and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>name</code> X X <code>images.localPath</code> X X <code>images.webPath</code> X X <code>images.sortOrder</code> X X X X X <code>images.titles.languageCode</code> X X <code>images.titles.text</code> X X <code>images.altTitles.languageCode</code> X X <code>images.altTitles.text</code> X X"},{"location":"framework/business-components/image-list/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/image-list/#business-rules","title":"Business rules","text":"<ul> <li>All local paths of images inside an image list must be uniq.</li> </ul>"},{"location":"framework/business-components/image-list/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageAdded</code> Will be raised if a new image has been added to an image list. <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageListCreated</code> Will be raised if a new image list has been created. <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageListDeleted</code> Will be raised if an image list has been deleted. <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageDeleted</code> Will be raised if an image has been removed from an image list. <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageUpdated</code> Will be raised if the image of an image list has been updated. <code>Gambio\\Admin\\Modules\\ImageList\\Model\\Events\\ImageListsNameUpdated</code> Will be raised if the name of an image list has been updated."},{"location":"framework/business-components/option/","title":"Option","text":"<p>An option represents a specific trait that can be assigned to product like size, color, as a gift, pattern, and so on. An option always provides a number of option values which specifies the trait, for instance the size XL or color red.</p> <p>Functional it can be compared as a combination of the old attribute and property system. So that it's now easier to manage them in a single place and as a single entity (or construct).</p>"},{"location":"framework/business-components/option/#option-domain","title":"Option domain","text":"<p>The option domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing options. It's important to know that the option values are referenced by the other domains like product options or product variants, therefore, it's not possible to delete option or option values that are used in these domains.</p>"},{"location":"framework/business-components/option/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Option\\Model\\Option</code> encapsulates general information like a sort order and type, as well as language-dependent details like a label, admin label, or description. Furthermore, each option may have several option values, which contain product-specific information (model number, weight, price, ...) and language-dependent details like the option itself.</p> <p>After creation, the aggregate root provides the possibility to change the attributes of the option itself, as well as, adding, updating or removing option values.</p>"},{"location":"framework/business-components/option/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/option/#fetching-all-or-a-specific-option","title":"Fetching all or a specific option","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n\n$allOptions     = $readService-&gt;getAllOptions();\n$specificOption = $readService-&gt;getOptionById($optionId = 1);\n</code></pre>"},{"location":"framework/business-components/option/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/option/#creating-a-new-option","title":"Creating a new option","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionType;\n\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$details = [\n    $factory-&gt;createOptionDetail('en', 'label - en', 'admin label - en', 'description - en'),\n    $factory-&gt;createOptionDetail('de', 'label - de', 'admin label - de', 'description - de'),\n];\n$optionDetails = $factory-&gt;createOptionDetails(...$details);\n\n$id = $writeService-&gt;createOption(\n    $optionDetails, $optionValues = [], $optionType = OptionType::DROPDOWN_TYPE, $optionSortOrder = 1\n);\n</code></pre> <p>Note</p> <p>In this example, we don't add option values to keep this sample shorter. To know which content the <code>$optionValues</code> variable would have needed, see the Adding new option values to an option use case.</p>"},{"location":"framework/business-components/option/#creating-multiple-options-at-once","title":"Creating multiple options at once","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionType;\n\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$details = [\n    'first-option'  =&gt; [\n        $factory-&gt;createOptionDetail('en', 'label 1 - en', 'admin label 1 - en', 'description 1 - en'),\n        $factory-&gt;createOptionDetail('de', 'label 1 - de', 'admin label 1 - de', 'description 1 - de'),\n    ],\n    'second-option' =&gt; [\n        $factory-&gt;createOptionDetail('en', 'label 2 - en', 'admin label 2 - en', 'description 2 - en'),\n        $factory-&gt;createOptionDetail('de', 'label 2 - de', 'admin label 2 - de', 'description 2 - de'),\n    ]\n];\n\n$optionDetails   = [\n    'first-option'  =&gt; $factory-&gt;createOptionDetails(...$details),\n    'second-option' =&gt; $factory-&gt;createOptionDetails(...$details),\n];\n$optionValues = [];\n$optionTypes   = [\n    'first-option'  =&gt; OptionType::DROPDOWN_TYPE,\n    'second-option' =&gt; OptionType::IMAGE_TYPE,\n];\n$optionSortOrders   = [\n    'first-option'  =&gt; 1,\n    'second-option' =&gt; 2,\n];\n\n$creationArgs = [\n    [$optionDetails['first-option'], $optionValues, $optionTypes['first-option'], $optionSortOrders['first-option']],\n    [$optionDetails['second-option'], $optionValues, $optionTypes['second-option'], $optionSortOrders['second-option']],\n];\n\n$ids = $writeService-&gt;createOptions(...$creationArgs);\n</code></pre>"},{"location":"framework/business-components/option/#updating-the-options-details","title":"Updating the options details","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionType;\n\n/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$details = [\n    $factory-&gt;createOptionDetail('en', 'new label - en', 'new admin label - en', 'new description - en'),\n    $factory-&gt;createOptionDetail('de', 'new label - de', 'new admin label - de', 'new description - de'),\n];\n$optionDetails = $factory-&gt;createOptionDetails(...$details);\n\n$option = $readService-&gt;getOptionById($optionId = 1);\n$option-&gt;changeDetails($optionDetails);\n\n$writeService-&gt;storeOptions($option);\n</code></pre>"},{"location":"framework/business-components/option/#updating-the-options-type","title":"Updating the options type","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionType;\n\n/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$newType = OptionType::TEXT_TYPE;\n\n$option = $readService-&gt;getOptionById($optionId = 1);\n$option-&gt;changeType($factory-&gt;createOptionType($newType = OptionType::TEXT_TYPE));\n\n$writeService-&gt;storeOptions($option);\n</code></pre>"},{"location":"framework/business-components/option/#updating-the-options-sort-order","title":"Updating the options sort order","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n\n$option = $readService-&gt;getOptionById($optionId = 1);\n$option-&gt;changeSortOrder($newSortOrder = 1);\n\n$writeService-&gt;storeOptions($option);\n</code></pre>"},{"location":"framework/business-components/option/#adding-a-option-value-to-an-option","title":"Adding a (option) value to an option","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionValueStock;\n\n/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$details = [\n    'first-option-value'  =&gt; [\n        $factory-&gt;createOptionValueDetails('en', 'label 1 - en', 'description 1 - en'),\n        $factory-&gt;createOptionValueDetails('de', 'label 1 - de', 'description 1 - de'),\n    ],\n    'second-option-value' =&gt; [\n        $factory-&gt;createOptionValueDetails('en', 'label 2 - en', 'description 2 - en'),\n        $factory-&gt;createOptionValueDetails('de', 'label 2 - de', 'description 2 - de'),\n    ],\n];\n$optionValuesProductDetails = [\n    'first-option-value' =&gt; $factory-&gt;createOptionValuesProductDetails($details['first-option-value']),\n    'second-option-value' =&gt; $factory-&gt;createOptionValuesProductDetails($details['second-option-value']),\n];\n$optionValuesStocks = [\n    'first-option-value' =&gt; $factory-&gt;createOptionValueStock(OptionValueStock::POSITIVE_STOCK_TYPE, 1, true),\n    'second-option-value' =&gt; $factory-&gt;createOptionValueStock(OptionValueStock::NOT_MANAGED_STOCK_TYPE, 0, false),\n];\n$optionValuesSortOrders = [\n    'first-option-value' =&gt; 1,\n    'second-option-value' =&gt; 2,\n];\n$optionValuesImages = [\n    'first-option-value' =&gt; '/var/www/.../option-value-1-image.png',\n    'second-option-value' =&gt; '/var/www/.../option-value-2-image.png',\n];\n\n$newOptionValues = [\n    $factory-&gt;createNewOptionValue(\n        $optionValuesProductDetails['first-option-value'], $optionValuesStocks['first-option-value'],\n        $optionValuesSortOrders['first-option-value'], $optionValuesImages['first-option-value']\n    ),\n    $factory-&gt;createNewOptionValue(\n        $optionValuesProductDetails['second-option-value'], $optionValuesStocks['second-option-value'],\n        $optionValuesSortOrders['second-option-value'], $optionValuesImages['second-option-value']\n    ),\n];\n\n$option = $readService-&gt;getOptionById($optionId = 1);\n$option-&gt;addNewValues(...$newOptionValues);\n\n$writeService-&gt;storeOptions($option);\n</code></pre>"},{"location":"framework/business-components/option/#updating-a-option-value-of-an-option","title":"Updating a (option) value of an option","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$option      = $readService-&gt;getOptionById($optionId = 1);\n$optionValue = $option-&gt;values()-&gt;getOptionValueById($optionValueId = 1);\n\nif($optionValue !== null){\n    $optionValue = $optionValue-&gt;withSortOrder($newSortOrder = 42);\n    $option-&gt;changeValues($optionValue);\n    $writeService-&gt;storeOptions($option);\n}\n</code></pre>"},{"location":"framework/business-components/option/#removing-a-option-value-from-an-option","title":"Removing a (option) value from an option","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$option = $readService-&gt;getOptionById($optionId = 1);\n$option-&gt;removeValues($factory-&gt;createOptionValueId($optionValueId = 1));\n\n$writeService-&gt;storeOptions($option);\n</code></pre>"},{"location":"framework/business-components/option/#deleting-an-option","title":"Deleting an option","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n\n$optionIds = [1, 2];\n\n$writeService-&gt;deleteOptions(...$optionIds);\n</code></pre>"},{"location":"framework/business-components/option/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/option/#filter-all-existing-options-including-sorting-and-pagination","title":"Filter all existing options including sorting and pagination","text":"<pre><code>use Gambio\\Admin\\Modules\\Option\\Model\\ValueObjects\\OptionType;\n\n/** $filterService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFilterService **/\n\n$filters = [\n    'type' =&gt; OptionType::IMAGE_TYPE, // Options with image type\n    'values.stock' =&gt; '&gt;10',          // and a stock above 10 units.\n];\n$sorting = '-details.adminLabel'; // In descending order of admin label\n\n$filteredOptions             = $filterService-&gt;filterOptions($filters, $sorting, $limit = 25, $offset = 0);\n$totalCountOfFilteredOptions = $filterService-&gt;getOptionsTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/option/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the option and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>type</code> X X <code>sortOrder</code> X X X X X <code>details.languageCode</code> X X <code>details.label</code> X X <code>details.adminLabel</code> X X <code>details.description</code> X X <code>values.id</code> X X X X X <code>values.sortOrder</code> X X <code>values.image</code> X X <code>values.modelNumber</code> X X <code>values.weight</code> X X X X X <code>values.price</code> X X X X X <code>values.stockType</code> X X <code>values.stock</code> X X X X X <code>values.stockCentrallyManaged</code> X X X X X <code>values.details.languageCode</code> X X <code>values.details.label</code> X X <code>values.details.description</code> X X"},{"location":"framework/business-components/option/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/option/#business-rules","title":"Business rules","text":"<ul> <li>The name of an option value must be uniq for an option.</li> <li>The <code>weightType</code> determine if the weight is added to the product weight or replaces it.</li> <li>The <code>priceType</code> determine if the price is added to the product price or replaces it.</li> <li>The <code>stockType</code> determines the behavior for the stock management. Three options are available here:</li> <li><code>only-positive</code>: Only positive values are allowed as stock, including zero.</li> <li><code>all-numbers</code>: All numbers are allowed as stock.</li> <li><code>not-managed</code>: The stock is not actively managed, which means that this value is not considered for the determination of the current stock.</li> <li>The <code>stockCentrallyManaged</code> determines if the stock of product option values is manageable. If this flag is active,   then the stock of this option value will be managed centrally by itself.</li> </ul>"},{"location":"framework/business-components/option/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\NewOptionValueAdded</code> Will be raised if a new option value has been added to an option. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionCreated</code> Will be raised if a new option has been created. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionDeleted</code> Will be raised if an option has been deleted. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionDetailsUpdated</code> Will be raised if the details of an option has been updated. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionsSortOrderUpdated</code> Will be raised if the sorting order of an option has been updated. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionsTypeUpdated</code> Will be raised if the type of an option has been updated. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionValueAdded</code> Will be raised if an option value has been added to an option. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionValueDeleted</code> Will be raised if an option value has been removed from an option. <code>Gambio\\Admin\\Modules\\Option\\Model\\Events\\OptionValueUpdated</code> Will be raised if an option value of an option has been updated."},{"location":"framework/business-components/parcel-service/","title":"Parcel Service","text":"<p>Parcel services provide information about the company that is responsable for shipping an order to the customer. Therefore, it's important to manage specific informationen like name, description, and the URL for looking up the current shipping status.</p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/parcel-service/#parcel-service-domain","title":"Parcel service domain","text":"<p>The parcel service domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing parcel services. In general this domain is very basic and there aren't any specific business rules or constrains.</p>"},{"location":"framework/business-components/parcel-service/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\ParcelService</code> encapsulates details regarding the  corresponding name and description of a specific parcel service. One parcel service can be selected as default, which will always be pre-selected if a tracking code is added to an order.</p> <p><code>{TRACKING_NUMBER}</code> can be used as a placeholder for the tracking code inside the description URL. </p>"},{"location":"framework/business-components/parcel-service/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/parcel-service/#fetching-all-or-a-specific-parcel-service","title":"Fetching all or a specific parcel service","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceReadService **/\n\n$allParcelServices     = $readService-&gt;getParcelServices();\n$specificParcelService = $readService-&gt;getParcelServiceById(1);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/parcel-service/#updating-the-name","title":"Updating the name","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n\n$newName = 'new-name';\n\n$parcelService = $readService-&gt;getParcelServiceById(1);\n$parcelService-&gt;changeName($newName);\n\n$writeService-&gt;storeParcelServices($parcelService);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#defining-as-default","title":"Defining as default","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n\n$parcelService = $readService-&gt;getParcelServiceById(1);\n$parcelService-&gt;setAsDefault();\n\n$writeService-&gt;storeParcelServices($parcelService);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#updating-the-descriptions","title":"Updating the descriptions","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceFactory **/\n\n$deDescription   = $factory-&gt;createParcelServiceDescription('de', 'http://example.de/{TRACKING_NUMBER}', 'sample de comment');\n$enDescription   = $factory-&gt;createParcelServiceDescription('en', 'http://example.com/{TRACKING_NUMBER}', 'sample en comment');\n$newDescriptions = $factory-&gt;createParcelServiceDescriptions($deDescription, $enDescription);\n\n$parcelService = $readService-&gt;getParcelServiceById(1);\n$parcelService-&gt;changeDescriptions($newDescriptions);\n\n$writeService-&gt;storeParcelServices($parcelService);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#updating-the-shipment-type","title":"Updating the shipment type","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n\n$newShipmentType = 'new shipment type';\n\n$parcelService = $readService-&gt;getParcelServiceById(1);\n$parcelService-&gt;changeShipmentType($newShipmentType);\n\n$writeService-&gt;storeParcelServices($parcelService);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#creating-a-new-parcel-service","title":"Creating a new parcel service","text":"<p>Full example:</p> <pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceFactory **/\n\n$name          = 'sample name';\n$deDescription = $factory-&gt;createParcelServiceDescription('de', 'http://example.de/{TRACKING_NUMBER}', 'sample de comment');\n$enDescription = $factory-&gt;createParcelServiceDescription('en', 'http://example.com/{TRACKING_NUMBER}', 'sample en comment');\n$descriptions  = $factory-&gt;createParcelServiceDescriptions($deDescription, $enDescription);\n$isDefault     = false;\n$shipmentType  = 'shipment type';\n\n\n$id = $writeService-&gt;createParcelService($name, $descriptions, $isDefault, $shipmentType);\n</code></pre> <p>Minimal example with default values:</p> <pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceFactory **/\n\n$name          = 'sample name';\n$deDescription = $factory-&gt;createParcelServiceDescription('de', 'http://example.de/{TRACKING_NUMBER}', 'sample de comment');\n$enDescription = $factory-&gt;createParcelServiceDescription('en', 'http://example.com/{TRACKING_NUMBER}', 'sample en comment');\n$descriptions  = $factory-&gt;createParcelServiceDescriptions($deDescription, $enDescription);\n\n$id = $writeService-&gt;createParcelService($name, $descriptions);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#creating-multiple-parcel-services-at-once","title":"Creating multiple parcel services at once","text":"<p>You can create multiple parcel services at once if you provide all needed information as an array.</p> <pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceFactory **/\n\n$deDescription1 = $factory-&gt;createParcelServiceDescription('de', 'http://example.de/{TRACKING_NUMBER}', 'sample de comment 1');\n$enDescription1 = $factory-&gt;createParcelServiceDescription('en', 'http://example.com/{TRACKING_NUMBER}', 'sample en comment 1');\n\n$deDescription2 = $factory-&gt;createParcelServiceDescription('de', 'http://example.de/{TRACKING_NUMBER}', 'sample de comment2');\n$enDescription2 = $factory-&gt;createParcelServiceDescription('en', 'http://example.com/{TRACKING_NUMBER}', 'sample en comment2');\n\n$names        = ['sample name 1', 'sample name 2'];\n$descriptions = [\n                    $factory-&gt;createParcelServiceDescriptions($deDescription1, $enDescription1),\n                    $factory-&gt;createParcelServiceDescriptions($deDescription2, $enDescription2),\n                ];\n\n$ids = $writeService-&gt;createParcelServices(\n           [$names[0], $descriptions[0]],\n           [$names[1], $descriptions[1]]\n       );\n</code></pre>"},{"location":"framework/business-components/parcel-service/#delete-parcel-services","title":"Delete parcel services","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteParcelServices($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteParcelServices($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/parcel-service/#filter-all-existing-parcel-services-including-sorting-and-pagination","title":"Filter all existing parcel services including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\ParcelService\\Services\\ParcelServiceFilterService **/\n\n$filters = [\n    'isDefault' =&gt; '0', // Parcel service is not default\n];\n$sorting = '-name'; // In descending order of name\n$limit   = 25;\n$offset  = 0;\n\n$filteredParcelServices             = $filterService-&gt;filterParcelServices($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredParcelServices = $filterService-&gt;getParcelServicesTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/parcel-service/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the parcel service and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>name</code> X X <code>isDefault</code> X <code>descriptions.languageCode</code> X X <code>descriptions.url</code> X X <code>descriptions.comment</code> X X <code>shipmentType</code> X X"},{"location":"framework/business-components/parcel-service/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/parcel-service/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/parcel-service/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceCreated</code> Will be raised if a parcel service has been created. <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceDeleted</code> Will be raised if a parcel service has been removed. <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceDescriptionsUpdated</code> Will be raised if the descriptions have been updated. <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceMarkedAsDefault</code> Will be raised if a parcel service is defined as default. <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceNameUpdated</code> Will be raised if a name has been updated. <code>Gambio\\Admin\\Modules\\ParcelService\\Model\\Events\\ParcelServiceShipmentTypeUpdated</code> Will be raised if a shipment type has been updated."},{"location":"framework/business-components/product-option/","title":"Product Option","text":"<p>A product option is a specific option together with some of its values that has been assigned to a specific product. The customer or visitor of the shop can select one of thies linked option values. This way the customers can specify the product they want to buy, like buying a PC with a specific CPU or the product already wrapped up in gift paper.</p> <p>The product options can be combined with product variants.</p> <p>Functionally this domain/system can be compared with the old product attributes. The main difference is here that it's no longer based on the attributes.</p>"},{"location":"framework/business-components/product-option/#product-option-domain","title":"Product option domain","text":"<p>The product option domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing options. This domain references the options and option values of the option domain.</p>"},{"location":"framework/business-components/product-option/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\ProductOption</code> encapsulates general information like  references for a product, option values, and an image list. As well as information about the customization of the option value attributes, product option stock, and a sort order.</p> <p>After creation, the aggregate root provides the possibility to change the attributes of the product option itself.</p>"},{"location":"framework/business-components/product-option/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/product-option/#fetching-all-or-a-specific-option","title":"Fetching all or a specific option","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionReadService **/\n\n$allProductOptions     = $readService-&gt;getProductOptionsByProductId($productId = 1);\n$specificProductOption = $readService-&gt;getProductOptionById($optionId = 1);\n</code></pre>"},{"location":"framework/business-components/product-option/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/product-option/#creating-a-new-product-option","title":"Creating a new product option","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductOption\\Model\\ValueObjects\\ProductOptionStock;\n\n/** $writeService \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionFactory **/\n\n$optionAndOptionValueId   = $factory-&gt;createOptionAndOptionValueId($optionId = 1, $optionValueId = 1);\n$imageListId              = $factory-&gt;createImageListId($imageListId = 1); // Id can be null if no image list exists\n$optionValueCustomization = $factory-&gt;createOptionValueCustomization(\n    $modelNumber = 'abc123', $weight = 1.23, $price = 4.56\n);\n$productOptionStock       = $factory-&gt;createProductOptionStock(\n    $stock = 0, $stockType = ProductOptionStock::STOCK_TYPE_NOT_MANAGED\n);\n\n$id = $writeService-&gt;createProductOption(\n    $productId = 1, $optionAndOptionValueId, $imageListId, $optionValueCustomization,\n    $productOptionStock, $sortOrder = 1\n);\n</code></pre>"},{"location":"framework/business-components/product-option/#creating-multiple-product-options-at-once","title":"Creating multiple product options at once","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductOption\\Model\\ValueObjects\\ProductOptionStock;\n\n/** $writeService \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionFactory **/\n\n$productIds                = [\n    'first-product-option' =&gt; 1,\n    'second-product-option' =&gt; 1,\n];\n$optionAndOptionValueIds   = [\n    'first-product-option' =&gt; $factory-&gt;createOptionAndOptionValueId(1, 1),\n    'second-product-option' =&gt; $factory-&gt;createOptionAndOptionValueId(1, 2),\n];\n$imageListIds              = [\n    'first-product-option' =&gt; $factory-&gt;createImageListId(1),\n    'second-product-option' =&gt; $factory-&gt;createImageListId(null),\n];\n$optionValueCustomizations = [\n    'first-product-option' =&gt; $factory-&gt;createOptionValueCustomization('abc123', 1.23, 4.56),\n    'second-product-option' =&gt; $factory-&gt;createOptionValueCustomization('def456', 4.56, 7.89),\n];\n$productOptionStocks       = [\n    'first-product-option' =&gt; $factory-&gt;createProductOptionStock(12, ProductOptionStock::STOCK_TYPE_ALWAYS_POSITIV),\n    'second-product-option' =&gt; $factory-&gt;createProductOptionStock(-10, ProductOptionStock::STOCK_TYPE_MAY_BE_NEGATIVE),\n];\n$sortOrders                = [\n    'first-product-option' =&gt; 1,\n    'second-product-option' =&gt; 2,\n];\n\n$creationArguments = [\n    [\n        $productIds['first-product-option'], $optionAndOptionValueIds['first-product-option'],\n        $imageListIds['first-product-option'], $optionValueCustomizations['first-product-option'],\n        $productOptionStocks['first-product-option'], $sortOrders['first-product-option']\n    ],\n    [\n        $productIds['second-product-option'], $optionAndOptionValueIds['second-product-option'],\n        $imageListIds['second-product-option'], $optionValueCustomizations['second-product-option'],\n        $productOptionStocks['second-product-option'], $sortOrders['second-product-option']\n    ],\n];\n\n$ids = $writeService-&gt;createMultipleProductOptions(...$creationArguments);\n</code></pre>"},{"location":"framework/business-components/product-option/#updating-the-product-options-image-list-id","title":"Updating the product options image list ID","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$newImageListId = 2;\n\n$productOption = $readService-&gt;getProductOptionById($productOptionId = 1);\n$productOption-&gt;changeImageListId($factory-&gt;createImageListId($newImageListId));\n\n$writeService-&gt;storeProductOptions($productOption);\n</code></pre>"},{"location":"framework/business-components/product-option/#updating-the-product-options-option-value-customization","title":"Updating the product options option value customization","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$newOptionValueCustomization = $factory-&gt;createOptionValueCustomization(\n    $modelNumber = 'abc123', $weight = 1.23, $price = 4.56\n);\n\n$productOption = $readService-&gt;getProductOptionById($productOptionId = 1);\n$productOption-&gt;changeOptionValueCustomization($newOptionValueCustomization);\n\n$writeService-&gt;storeProductOptions($productOption);\n</code></pre>"},{"location":"framework/business-components/product-option/#updating-the-product-options-option-value-customization_1","title":"Updating the product options option value customization","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductOption\\Model\\ValueObjects\\ProductOptionStock;\n\n/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Option\\Services\\OptionFactory **/\n\n$newProductOptionStock = $factory-&gt;createProductOptionStock(\n    $stock = 0, $stockType = ProductOptionStock::STOCK_TYPE_NOT_MANAGED\n);\n\n$productOption = $readService-&gt;getProductOptionById($productOptionId = 1);\n$productOption-&gt;changeProductOptionStock($newProductOptionStock);\n\n$writeService-&gt;storeProductOptions($productOption);\n</code></pre>"},{"location":"framework/business-components/product-option/#updating-the-product-options-sort-order","title":"Updating the product options sort order","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n\n$productOption = $readService-&gt;getProductOptionById($productOptionId = 1);\n$productOption-&gt;changeSortOrder($newSortOrder = 2);\n\n$writeService-&gt;storeProductOptions($productOption);\n</code></pre>"},{"location":"framework/business-components/product-option/#deleting-a-product-option","title":"Deleting a product option","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Option\\Services\\OptionWriteService **/\n\n$productOptionIds = [1, 2];\n\n$writeService-&gt;deleteOptions(...$productOptionIds);\n</code></pre>"},{"location":"framework/business-components/product-option/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/product-option/#filter-all-existing-options-including-sorting-and-pagination","title":"Filter all existing options including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\ProductOption\\Services\\ProductOptionFilterService **/\n\n$productId = 1;\n$filters = [\n    'optionId' =&gt; 1, // Product options based on the option with the ID 1\n];\n$sorting = '-price'; // In descending order of the price\n\n$filteredProductOptions             = $filterService-&gt;filterProductOptions(\n    $productId, $filters, $sorting, $limit = 25, $offset = 0\n);\n$totalCountOfFilteredProductOptions = $filterService-&gt;getProductOptionsTotalCount($productId, $filters);\n</code></pre>"},{"location":"framework/business-components/product-option/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the product option and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>optionId</code> X X X X X <code>optionValueId</code> X X X X X <code>imageListId</code> X X X X X <code>modelNumber</code> X X <code>weight</code> X X X X X <code>price</code> X X X X X <code>stockType</code> X X <code>stock</code> X X X X X <code>sortOrder</code> X X X X X"},{"location":"framework/business-components/product-option/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/product-option/#business-rules","title":"Business rules","text":"<ul> <li>The combination of product, option and option value must be uniq.</li> <li>The <code>stockType</code> determines the behavior for the stock management. Three options are available here:</li> <li><code>only-positive</code>: Only positive values are allowed as stock, including zero.</li> <li><code>all-numbers</code>: All numbers are allowed as stock.</li> <li><code>not-managed</code>: The stock is not actively managed, which means that this value is not considered for the determination of the current stock.</li> </ul>"},{"location":"framework/business-components/product-option/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionCreated</code> Will be raised if a new product option has been created. <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionDeleted</code> Will be raised if an product option has been deleted. <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionsImageListIdUpdated</code> Will be raised if the image list ID of an product option has been updated. <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionsSortOrderUpdated</code> Will be raised if the sort order of an product option has been updated. <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionsStockUpdated</code> Will be raised if the stock of an product option has been updated. <code>Gambio\\Admin\\Modules\\ProductOption\\Model\\Events\\ProductOptionsValueCustomizationUpdated</code> Will be raised if the option value customization of an product option has been updated."},{"location":"framework/business-components/product-variant/","title":"Product Variant","text":"<p>A product variant represents a specific combination of selectable option values. After a customer or visitor of the shop selected on of more linked option values of a specific product, then a product variant can be determined. This way the customers can specify the product they want to buy, like a red or blue t-shirt or a specific pattern. If a product has one or more variants only its variants can be added to the shopping cart.</p> <p>The product variants can be combined with product options.</p> <p>Functionally this domain/system can be compared with the old product properties. The main difference is here that it's no longer based on the properties.</p>"},{"location":"framework/business-components/product-variant/#product-variant-domain","title":"Product variant domain","text":"<p>The product variant domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing variants. This domain references a combination based on option and option values of the option domain.</p>"},{"location":"framework/business-components/product-variant/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\ProductVariant</code> is one specific combination of selectable option values linked to a specific product. A product variant encapsulates general information like a model number, EAN, stock, price, etc. that overwrite the corresponding attributes of the referenced product.</p> <p>After creation, the aggregate root provides the possibility to change the attributes of the product variant itself.</p>"},{"location":"framework/business-components/product-variant/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/product-variant/#fetching-all-or-a-specific-variant","title":"Fetching all or a specific variant","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantReadService **/\n\n$allProductVariants     = $readService-&gt;getProductVariantsByProductId($productId = 1);\n$specificProductVariant = $readService-&gt;getProductVariantById($variantId = 1);\n</code></pre>"},{"location":"framework/business-components/product-variant/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/product-variant/#creating-a-new-product-variant","title":"Creating a new product variant","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductCustomization;\nuse Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductVariantStock;\n\n/** $writeService \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantFactory **/\n\n$combination                  = $factory-&gt;createOptionAndOptionValueIds(\n    $factory-&gt;createOptionAndOptionValueId($optionId1 = 1, $optionValueId1 = 1),\n    $factory-&gt;createOptionAndOptionValueId($optionId2 = 2, $optionValueId2 = 1)\n);\n$imageListId                  = 1; // Can also be null if no image list exists for this product variant\n$productCustomization         = $factory-&gt;createProductCustomization(\n    $deliveryTimeId = 1, $priceType = ProductCustomization::PRICE_TYPE_ADDITION, $price = 0,\n    $weightType = ProductCustomization::WEIGHT_TYPE_ADDITION, $weight = 0, $vpeScalarValue = 0, $vpeUnitId = null\n);\n$productIdentificationNumbers = $factory-&gt;createProductIdentificationNumbers(\n    $modelNumber = 'abc123', $ean = '978020137962', $gtin = '04012345123456', $asin = 'B088W5PS35'\n);\n$stock                        = $factory-&gt;createProductVariantStock(\n    $stock = 0, $stockType = ProductVariantStock::STOCK_TYPE_NOT_MANAGED\n);\n\n$id = $writeService-&gt;createProductVariant(\n    $productId = 1, $combination, $imageListId, $productCustomization,\n    $productIdentificationNumbers, $stock, $sortOrder = 1\n);\n</code></pre>"},{"location":"framework/business-components/product-variant/#creating-multiple-product-variants-at-once","title":"Creating multiple product variants at once","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductCustomization;\nuse Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductVariantStock;\n\n/** $writeService \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantFactory **/\n\n$productIds                   = [\n    'first-product-variant'  =&gt; 1, \n    'second-product-variant' =&gt; 1,\n];\n$combinations                 = [\n    'first-product-variant'  =&gt; $factory-&gt;createOptionAndOptionValueIds(\n        $factory-&gt;createOptionAndOptionValueId($optionId1 = 1, $optionValueId1 = 1),\n        $factory-&gt;createOptionAndOptionValueId($optionId2 = 2, $optionValueId2 = 1)\n    ),\n    'second-product-variant' =&gt; $factory-&gt;createOptionAndOptionValueIds(\n        $factory-&gt;createOptionAndOptionValueId($optionId1 = 1, $optionValueId1 = 1),\n        $factory-&gt;createOptionAndOptionValueId($optionId2 = 2, $optionValueId2 = 2)\n    ),\n];\n$imageListIds                 = [\n    'first-product-variant'  =&gt; 1, \n    'second-product-variant' =&gt; null,\n];\n$productCustomizations        = [\n    'first-product-variant'  =&gt; $factory-&gt;createProductCustomization(\n        $deliveryTimeId = 1, $priceType = ProductCustomization::PRICE_TYPE_ADDITION, $price = 0,\n        $weightType = ProductCustomization::WEIGHT_TYPE_ADDITION, $weight = 0, $vpeScalarValue = 0, $vpeUnitId = null\n    ),\n    'second-product-variant' =&gt; $factory-&gt;createProductCustomization(\n        $deliveryTimeId = 1, $priceType = ProductCustomization::PRICE_TYPE_REPLACING, $price = 56.78,\n        $weightType = ProductCustomization::WEIGHT_TYPE_REPLACING, $weight = 12.34, $vpeScalarValue = 0, $vpeUnitId = null\n    ),\n];\n$productIdentificationNumbers = [\n    'first-product-variant'  =&gt; $factory-&gt;createProductIdentificationNumbers(\n        $modelNumber = 'abc123', $ean = '978020137962', $gtin = '04012345123456', $asin = 'B088W5PS35'\n    ),\n    'second-product-variant' =&gt; $factory-&gt;createProductIdentificationNumbers(\n        $modelNumber = 'abc123', $ean = '978020137962', $gtin = '04012345123456', $asin = 'B088W5PS35'\n    ),\n];\n$stocks                       = [\n    'first-product-variant'  =&gt; $factory-&gt;createProductVariantStock(\n        $stock = 0, $stockType = ProductVariantStock::STOCK_TYPE_NOT_MANAGED\n    ),\n    'second-product-variant' =&gt; $factory-&gt;createProductVariantStock(\n        $stock = 0, $stockType = ProductVariantStock::STOCK_TYPE_NOT_MANAGED\n    ),\n];\n$sortOrders                   = [\n    'first-product-variant'  =&gt; 1, \n    'second-product-variant' =&gt; 2,\n];;\n\n$creationArguments = [\n    [\n        $productIds['first-product-variant'], $combinations['first-product-variant'],\n        $imageListIds['first-product-variant'], $productCustomizations['first-product-variant'],\n        $productIdentificationNumbers['first-product-variant'], $stocks['first-product-variant'],\n        $sortOrders['first-product-variant']\n    ],\n    [\n        $productIds['second-product-variant'], $combinations['second-product-variant'],\n        $imageListIds['second-product-variant'], $productCustomizations['second-product-variant'],\n        $productIdentificationNumbers['second-product-variant'], $stocks['second-product-variant'],\n        $sortOrders['second-product-variant']\n    ],\n];\n\n$ids = $writeService-&gt;createMultipleProductVariants(...$creationArguments);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-combination","title":"Updating the product variants combination","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantFactory **/\n\n$newCombination = $factory-&gt;createOptionAndOptionValueIds(\n    $factory-&gt;createOptionAndOptionValueId($optionId1 = 1, $optionValueId1 = 1),\n    $factory-&gt;createOptionAndOptionValueId($optionId2 = 2, $optionValueId2 = 1)\n);\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeCombination($newCombination);\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-stock","title":"Updating the product variants stock","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductVariantStock;\n\n/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantFactory **/\n\n$newStock = $factory-&gt;createProductVariantStock($stock = 0, $stockType = ProductVariantStock::STOCK_TYPE_NOT_MANAGED);\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeStock($newStock);\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-image-list-id","title":"Updating the product variants image list ID","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantFactory **/\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeImageListId($factory-&gt;createImageListId($imageListId = 1));\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-sort-order","title":"Updating the product variants sort order","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeSortOrder($newSortOrder = 2);\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-sort-order_1","title":"Updating the product variants sort order","text":"<pre><code>use Gambio\\Admin\\Modules\\ProductVariant\\Model\\ValueObjects\\ProductCustomization;\n\n/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n\n$newProductCustomization = $factory-&gt;createProductCustomization(\n    $deliveryTimeId = 1, $priceType = ProductCustomization::PRICE_TYPE_ADDITION, $price = 0,\n    $weightType = ProductCustomization::WEIGHT_TYPE_ADDITION, $weight = 0, $vpeScalarValue = 0, $vpeUnitId = null\n);\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeProductCustomization($newProductCustomization);\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#updating-the-product-variants-sort-order_2","title":"Updating the product variants sort order","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n\n$newProductIdentificationNumbers = $factory-&gt;createProductIdentificationNumbers(\n    $modelNumber = 'abc123', $ean = '978020137962', $gtin = '04012345123456', $asin = 'B088W5PS35'\n);\n\n$productVariant = $readService-&gt;getProductVariantById($productVariantId = 1);\n$productVariant-&gt;changeProductIdentificationNumbers($newProductIdentificationNumbers);\n\n$writeService-&gt;storeProductVariants($productVariant);\n</code></pre>"},{"location":"framework/business-components/product-variant/#deleting-a-product-variant","title":"Deleting a product variant","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Variant\\Services\\VariantWriteService **/\n\n$productVariantIds = [1, 2];\n\n$writeService-&gt;deleteVariants(...$productVariantIds);\n</code></pre>"},{"location":"framework/business-components/product-variant/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/product-variant/#filter-all-existing-variants-including-sorting-and-pagination","title":"Filter all existing variants including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\ProductVariant\\Services\\ProductVariantFilterService **/\n\n$productId = 1;\n$filters = [\n    'combination.optionId' =&gt; 1, // Product variants based on the option with the ID 1\n];\n$sorting = '-stock'; // In descending order of the stock\n\n$filteredProductVariants             = $filterService-&gt;filterProductVariants(\n    $productId, $filters, $sorting, $limit = 25, $offset = 0\n);\n$totalCountOfFilteredProductVariants = $filterService-&gt;getProductVariantsTotalCount($productId, $filters);\n</code></pre>"},{"location":"framework/business-components/product-variant/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the product variant and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>productId</code> X X X X X <code>combination.optionId</code> X X X X X <code>combination.optionValueId</code> X X X X X <code>sortOrder</code> X X X X X <code>modelNumber</code> X X <code>GTIN</code> X X <code>ASIN</code> X X <code>EAN</code> X X <code>stockType</code> X X <code>stock</code> X X X X X <code>weightType</code> X X <code>weight</code> X X X X X <code>priceType</code> X X <code>price</code> X X X X X <code>vpeScalarValue</code> X X X X X <code>vpeUnitId</code> X X X X X <code>deliveryTimeId</code> X X X X X <code>imageListId</code> X X X X X"},{"location":"framework/business-components/product-variant/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/product-variant/#business-rules","title":"Business rules","text":"<ul> <li>The combination of option values must be uniq for a specific product. (Important for adding and updating product   variants!)</li> <li>If a new option values are added to the combinations of existing variants, the product variants should be generated   by coping the existing ones.</li> <li>It is not possible to add a product variant with a combination of option values with more or less option values as the   existing product variants</li> <li>The <code>weightType</code> determine if the weight is added to the product weight or replaces it.</li> <li>The <code>priceType</code> determine if the price is added to the product price or replaces it.</li> <li>The <code>stockType</code> determines the behavior for the stock management. Three options are available here:</li> <li><code>only-positive</code>: Only positive values are allowed as stock, including zero.</li> <li><code>all-numbers</code>: All numbers are allowed as stock.</li> <li><code>not-managed</code>: The stock is not actively managed, which means that this value is not considered for the determination of the current stock.</li> <li>When removing an option from the product variant combinations, it's needed to provide a contained option value, that   defines which product variants should be kept. The option is then removed completely from the combinations.</li> </ul>"},{"location":"framework/business-components/product-variant/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\ProductVariantCreated</code> Will be raised if a new product variant has been created. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\ProductVariantDeleted</code> Will be raised if an existing product variant has been removed. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantProductCustomization</code> Will be raised if the product customizations of a product variant has been updated. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantProductIdentificationNumbers</code> Will be raised if the product identification numbers of a product variant has been updated. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantsCombination</code> Will be raised if the combination of a product variant has been updated. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantsImageListId</code> Will be raised if the image list ID of a product variant has been updated. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantsSortOrder</code> Will be raised if the sort order of a product variant has been updated. <code>Gambio\\Admin\\Modules\\ProductVariant\\Model\\Events\\\\UpdatedProductVariantsStock</code> Will be raised if the stock of a product variant has been updated."},{"location":"framework/business-components/statistics-overview/","title":"Statistics Overview","text":"<p>The statistics overview is a collection of widgets containing several KPIs and other useful statistics that can be looked at from within the Gambio Admin. The shop operator is able to adjust these to their liking, hence it's only displaying the information, that is of good use for the individual.</p> <p>The statistics overview aims to functionally replace and improve the previous statistics, while also providing new information that wasn't accessible before, with the ability to be easily extended upon.</p>"},{"location":"framework/business-components/statistics-overview/#statistics-overview-domain","title":"Statistics Overview domain","text":"<p>The statistics overview domain provides management functionality for registering, filtering and configuring different statistics, as well as the possibility to be extended with new widgets displaying individually crafted statistics.</p>"},{"location":"framework/business-components/statistics-overview/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\OverviewWidget</code> contains the information of an individual widget that is displayed on the dashboard.</p>"},{"location":"framework/business-components/statistics-overview/#use-cases","title":"Use cases","text":""},{"location":"framework/business-components/statistics-overview/#fetching-widgets-by-category","title":"Fetching widgets by category","text":"<pre><code>/** $statisticsOverviewService GambioAdmin\\Modules\\StatisticsOverview\\App\\StatisticsOverviewService **/\n\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\ValueObjects\\WidgetCategory;\n\n$customerRelatedWidgets = $statisticsOverviewService-&gt;getWidgetsByCategory(WidgetCategory::CUSTOMERS);\n$orderRelatedWidgets    = $statisticsOverviewService-&gt;getWidgetsByCategory(WidgetCategory::ORDERS);\n$systemRelatedWidgets   = $statisticsOverviewService-&gt;getWidgetsByCategory(WidgetCategory::SYSTEM);\n\n</code></pre>"},{"location":"framework/business-components/statistics-overview/#updating-options-of-a-widget","title":"Updating options of a widget","text":"<pre><code>/** $statisticsOverviewService GambioAdmin\\Modules\\StatisticsOverview\\App\\StatisticsOverviewService **/\n\n$statisticsOverviewService-&gt;configureWidget('GambioConversionRateCount', [\n    'sortOrder' =&gt; 2,\n    'visibility' =&gt; true\n]);\n\n</code></pre>"},{"location":"framework/business-components/statistics-overview/#adding-a-custom-widget","title":"Adding a custom widget","text":"<p>Create a new class that extends <code>GambioAdmin\\Modules\\StatisticsOverview\\Model\\Entities\\WidgetDefinition</code> in <code>GambioAdmin\\Modules\\StatisticsOverview\\Model\\Entities\\WidgetDefinition</code>.</p> <pre><code>/**  GambioAdmin\\Modules\\StatisticsOverview\\Model\\Entities\\WidgetDefinition\\NewWidget.php **/\n\ndeclare(strict_types=1);\n\nnamespace Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\Entities\\WidgetDefinition;\n\nuse Doctrine\\DBAL\\Connection;\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\Collections\\WidgetOptions;\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\Entities\\WidgetDefinition;\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Model\\ValueObjects\\WidgetData;\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Services\\StatisticsOverviewFactory;\nuse Gambio\\Admin\\Modules\\StatisticsOverview\\Services\\StatisticsOverviewFactory\\WidgetOptionFactory\\PredefinedOptionFactory\\TimespanOptionFactory;\nuse NumberFormatter;\n\nclass NewWidget extends WidgetDefinition\n{\n    // The ID is for internal reference and has to be unique.\n    private const ID = 'NewWidget';\n\n    // The widget name holds the name of the widget that will be displayed in its respective language. \n    private const WIDGET_NAME = [\n        self::LANGUAGE_CODE_GERMAN  =&gt; 'Neues Widget',\n        self::LANGUAGE_CODE_ENGLISH =&gt; 'New Widget',\n    ];\n\n    private $factory;\n\n    private $connection;\n\n    // The $numberFormatter is optional and in this case later used to format a number\n    // that is to be displayed as text within the return statement of the data() method.\n    private $numberFormatter;\n\n    public function __construct(\n        StatisticsOverviewFactory $factory,\n        Connection $connection,\n        NumberFormatter $numberFormatter\n    ) {\n        $this-&gt;factory         = $factory;\n        $this-&gt;connection      = $connection;\n        $this-&gt;numberFormatter = $numberFormatter;\n\n        // Assign the ID, the names in german and english and also the category, \n        // the visualization type as well as the options within the parameters of the parents' constructor.\n        // In this case the visualization is plain text, the category is orders \n        // and for the options we wanted the possibility to select a timespan including \"Today\".\n        // The predefined options for the sort order and the visibility checkbox are required.\n        parent::__construct($factory-&gt;createId(self::ID),\n                            $factory-&gt;createNames($factory-&gt;createName($factory-&gt;createLanguageCode(self::LANGUAGE_CODE_GERMAN),\n                                                                       self::WIDGET_NAME[self::LANGUAGE_CODE_GERMAN]),\n                                                  $factory-&gt;createName($factory-&gt;createLanguageCode(self::LANGUAGE_CODE_ENGLISH),\n                                                                       self::WIDGET_NAME[self::LANGUAGE_CODE_ENGLISH])),\n                            $factory-&gt;useCategories()-&gt;createForOrders(),\n                            $factory-&gt;useVisualizations()-&gt;createText(),\n                            $factory-&gt;useOptions()-&gt;createOptions($factory-&gt;useOptions()\n                                                                      -&gt;usePredefined()\n                                                                      -&gt;createTimespanDropdownIncludingToday($factory),\n                                                                  $factory-&gt;useOptions()\n                                                                      -&gt;usePredefined()\n                                                                      -&gt;createSortOrderNumber($factory),\n                                                                  $factory-&gt;useOptions()\n                                                                      -&gt;usePredefined()\n                                                                      -&gt;createVisibilityCheckbox($factory)));\n    }\n\n\n    public function data(WidgetOptions $options): WidgetData\n    {\n        // Since the use of a timespan as an option is wanted, \n        // we have to create the Timespan value-object through the TimespanFactory.\n        $timespan = $this-&gt;factory-&gt;useData()\n            -&gt;useTimespan()\n            -&gt;createFromTerm($options-&gt;getById(TimespanOptionFactory::ID)-&gt;value());\n\n        // Now it is time to fetch the data we want to display in our new widget. \n        // Therefore, we create a new QueryBuilder and configure it appropriately, execute it and fetch the result.\n        // In this specific widget, our goal is to display the number of orders within a given timespan.\n        $orders = $this-&gt;connection-&gt;createQueryBuilder()\n                    -&gt;select('COUNT(date_purchased) AS orders')\n                    -&gt;from('orders')\n                    -&gt;where('date_purchased BETWEEN :startDate AND :endDate')\n                    -&gt;setParameters([\n                                        'startDate'        =&gt; $timespan-&gt;startDate()\n                                            -&gt;format(self::DATA_QUERY_TIMESPAN_FORMAT_START),\n                                        'endDate'          =&gt; $timespan-&gt;endDate()\n                                            -&gt;format(self::DATA_QUERY_TIMESPAN_FORMAT_END),\n                                    ])\n                    -&gt;executeQuery()\n                    -&gt;fetchAllAssociative()[0];\n\n        // After fetching, our resulting array would look something along the lines of this:\n        // $orders = ['orders' =&gt; 42]\n        // \n        // Since we used text as our visualization method, we have to create the TextData we want to return.\n        // Hence, we create the TextDataValue, that is required for the creation of the TextData, \n        // by providing the result of our request, formatted by the $numberFormatter.\n        return $this-&gt;factory-&gt;useData()-&gt;useTextData()-&gt;createTextData($this-&gt;factory-&gt;useData()\n                                                                            -&gt;useTextData()\n                                                                            -&gt;createValue($this-&gt;numberFormatter-&gt;format((int)($orders['orders']\n                                                                                                                               ??\n                                                                                                                               0))));\n    }\n}\n</code></pre> <p>The widget that was just created now has to be registered within the <code>GambioAdmin\\Modules\\StatisticsOverview\\StatisticsOverviewServiceProvider</code> to be visible from within the statistics overview in the Gambio Admin.</p> <p>To do so, it is necessary to add two code snippets as follows.</p> <pre><code>/** GambioAdmin\\Modules\\StatisticsOverview\\StatisticsOverviewServiceProvider **/\n\n// This already exists and is included for demonstration purposes.\nprivate const WIDGET_DEFINITION_REGISTER_METHOD = 'register';\n\npublic function boot(): void\n{\n    // .....\n    $this-&gt;application-&gt;inflect(StatisticsOverviewWidgetDefinitionProvider::class)\n        -&gt;invokeMethod(self::WIDGET_DEFINITION_REGISTER_METHOD, [NewWidget::class]);\n    // .....\n}\n\n// Here it is necessary to also add the parameters required for the construction of the widget using -&gt;addArgument().\npublic function register(): void\n{\n    // .....\n    $this-&gt;application-&gt;registerShared(NewWidget::class)\n        -&gt;addArgument(StatisticsOverviewFactory::class)\n        -&gt;addArgument(Connection::class)\n        -&gt;addArgument($numberFormatter);\n    // .....\n}\n</code></pre>"},{"location":"framework/business-components/statistics-overview/#business-rules","title":"Business rules","text":"<ul> <li>ID of a widget must be unique</li> <li>Category of a widget must be one of these:<ul> <li><code>customers</code></li> <li><code>orders</code></li> <li><code>system</code></li> </ul> </li> <li>Visualization of a widget must be one of these:<ul> <li><code>areaChart</code></li> <li><code>barChart</code></li> <li><code>pieChart</code></li> <li><code>stackedColumnsChart</code></li> <li><code>table</code></li> <li><code>text</code></li> <li><code>treemapChart</code></li> <li><code>donutChart</code></li> <li><code>radialBarChart</code></li> <li><code>twoSidedBarChart</code></li> </ul> </li> <li>Data type of a widget must be one of these:<ul> <li><code>map</code></li> <li><code>number</code></li> <li><code>serial</code></li> <li><code>table</code></li> <li><code>text</code></li> </ul> </li> </ul>"},{"location":"framework/business-components/tracking-code/","title":"Tracking Code","text":"<p>Tracking codes provide information about the parcel service, that is responsable for shipping an order, but also about the current shipping status itself, by providing a specific URL for that parcel service.</p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/tracking-code/#tracking-code-domain","title":"Tracking code domain","text":"<p>The tracking code domain provides management functionality (create, read, and delete), as well as the possibility to filter all existing tracking codes. In general this domain is very basic, except one constrain. It is not possible to update a created tracking code, therefore, it must be deleted and created again.</p>"},{"location":"framework/business-components/tracking-code/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\TrackingCode\\Model\\TrackingCode</code> provides information about the order, the tracking code itself, when it's created, as well as details regarding the corresponding parcel service.</p>"},{"location":"framework/business-components/tracking-code/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/tracking-code/#fetching-all-or-a-specific-tracking-code","title":"Fetching all or a specific tracking code","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeReadService **/\n\n$allTrackingCodes     = $readService-&gt;getTrackingCodes();\n$specificTrackingCode = $readService-&gt;getTrackingCodeById(1);\n</code></pre>"},{"location":"framework/business-components/tracking-code/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/tracking-code/#creating-a-new-tracking-code","title":"Creating a new tracking code","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeFactory **/\n\n$orderId                   = 20024;\n$code                      = '123456789-abcdef';\n$languageCode              = 'en';\n$parcelServiceId           = 1;\n$parcelServiceName         = 'sample name';\n$parcelServiceUrl          = 'http://example.com/123456789-abcdef';\n$parcelServiceComment      = 'sample comment';\n$parcelServiceShipmentType = 'sample shipment type';\n$parcelServiceDetails      = $factory-&gt;createParcelServiceDetails(\n                                 $languageCode,\n                                 $parcelServiceId,\n                                 $parcelServiceName,\n                                 $parcelServiceUrl,\n                                 $parcelServiceComment,\n                                 $parcelServiceDetails\n                             );\n$isReturnDelivery          = true;\n\n$id = $writeService-&gt;createTrackingCode($orderId, $code, $parcelServiceDetails, $isReturnDelivery);\n</code></pre>"},{"location":"framework/business-components/tracking-code/#creating-multiple-tracking-codes-at-once","title":"Creating multiple tracking codes at once","text":"<p>You can create multiple tracking codes at once if you provide all needed information as an array.</p> <pre><code>/** $writeService \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeFactory **/\n\n$orderIds                   = [20024, 20025];\n$codes                      = ['123456789-abcdef', '987654321-fedcba'];\n$languageCodes              = ['en', 'de'];\n$parcelServiceIds           = [1, 1];\n$parcelServiceNames         = ['sample name', 'sample name'];\n$parcelServiceUrls          = ['http://example.com/123456789-abcdef', 'http://example.de/987654321-fedcba'];\n$parcelServiceComments      = ['sample comment', 'sample comment'];\n$parcelServiceShipmentTypes = ['sample shipment type', 'sample shipment type'];\n$parcelServiceDetails  = [\n    $factory-&gt;createParcelServiceDetails(\n        $languageCodes[0],\n        $parcelServiceIds[0],\n        $parcelServiceNames[0],\n        $parcelServiceUrls[0],\n        $parcelServiceComments[0],\n        $parcelServiceShipmentTypes[0]\n    ),\n    $factory-&gt;createParcelServiceDetails(\n        $languageCodes[1],\n        $parcelServiceIds[1],\n        $parcelServiceNames[1],\n        $parcelServiceUrls[1],\n        $parcelServiceComments[1],\n        $parcelServiceShipmentTypes[1]\n    ),\n];\n$isReturnDeliveries          = [true, false];\n\n$ids = $writeService-&gt;createTrackingCodes(\n           [$orderIds[0], $codes[0], $parcelServiceDetails[0], $isReturnDeliveries[0]],\n           [$orderIds[1], $codes[1], $parcelServiceDetails[1], $isReturnDeliveries[1]]\n       );\n</code></pre>"},{"location":"framework/business-components/tracking-code/#delete-tracking-codes","title":"Delete tracking codes","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteTrackingCodes($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteTrackingCodes($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/tracking-code/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/tracking-code/#filter-all-existing-tracking-codes-including-sorting-and-pagination","title":"Filter all existing tracking codes including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\TrackingCode\\Services\\TrackingCodeFilterService **/\n\n$filters = [\n    'code' =&gt; '*12345789*', // Tracking code contains \"12345789\"\n];\n$sorting = '-createdOn'; // In descending order of creation date\n$limit   = 25;\n$offset  = 0;\n\n$filteredTrackingCodes             = $filterService-&gt;filterTrackingCodes($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredTrackingCodes = $filterService-&gt;getTrackingCodesTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/tracking-code/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the tracking code and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>orderId</code> X X X X X <code>code</code> X X <code>isReturnDelivery</code> X <code>parcelService.id</code> X X X X X <code>parcelService.languageCode</code> X X <code>parcelService.name</code> X X <code>parcelService.url</code> X X <code>parcelService.comment</code> X X <code>parcelService.shipmentType</code> X X <code>createdOn</code> X X X X X"},{"location":"framework/business-components/tracking-code/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/tracking-code/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/tracking-code/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\TrackingCode\\Model\\Events\\TrackingCodeCreated</code> Will be raised if a tracking code has been created. <code>Gambio\\Admin\\Modules\\TrackingCode\\Model\\Events\\TrackingCodeDeleted</code> Will be raised if a tracking code has been removed."},{"location":"framework/business-components/user-configuration/","title":"User Configuration","text":"<p>User configurations are similar to normal shop wide configurations, but for a specific user. An example for data that is stored as a user configuration is the state of the admin navigation (expand, expand all, collapse).</p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/user-configuration/#user-configuration-domain","title":"User configuration domain","text":"<p>The user configuration domain provides a very minimalistic feature-set of accessing and storing user configurations. A user configuration always belongs to one specific user, while a user can be a normal customer or an admin of the shop software.</p>"},{"location":"framework/business-components/user-configuration/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Core\\UserConfiguration\\Model\\UserConfiguration</code> provides the user ID, as well as the configuration key and value. It's also possible to change to value of a user configuration. The configuration key and value can only be strings.</p>"},{"location":"framework/business-components/user-configuration/#use-cases-using-the-current-user-configuration-service","title":"Use cases using the current user configuration service","text":"<p>The <code>Gambio\\Core\\UserConfiguration\\Services\\CurrentUserConfigurationService</code> service always provides and stores configuration values for the current logged-in user. That way, you don't need to fetch the user ID of the current user from the session or somewhere else.</p>"},{"location":"framework/business-components/user-configuration/#fetching-a-specific-user-configuration-value","title":"Fetching a specific user configuration value","text":"<pre><code>/** $readService \\Gambio\\Core\\UserConfiguration\\Services\\CurrentUserConfigurationService **/\n\n$defaultValue = 'my-default-value'; // Otherwise, the service would return `null`\n\n$specificUserConfigurationValue = $readService-&gt;getValue('my-config-key', $defaultValue);\n</code></pre>"},{"location":"framework/business-components/user-configuration/#storing-a-specific-user-configuration-value","title":"Storing a specific user configuration value","text":"<pre><code>/** $readService \\Gambio\\Core\\UserConfiguration\\Services\\CurrentUserConfigurationService **/\n\n$configKey   = 'my-key';\n$configValue = 'my-value';\n\n$readService-&gt;storeConfiguration($configKey, $configValue);\n</code></pre>"},{"location":"framework/business-components/user-configuration/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/user-configuration/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Core\\UserConfiguration\\Model\\Events\\UserConfigurationCreated</code> Will be raised if a user configuration has been created. <code>Gambio\\Core\\UserConfiguration\\Model\\Events\\UserConfigurationValueUpdated</code> Will be raised if a user configuration has been updated."},{"location":"framework/business-components/withdrawal/","title":"Withdrawal","text":"<p>Withdrawals are created corresponding to a purchase order and must fulfill some legal terms. The shop software provides multiple ways of creating a withdrawal. For instance, the creation can be done by a customer itself or an admin and it can be created using the Web interface or the REST API.</p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/withdrawal/#withdrawal-domain","title":"Withdrawal domain","text":"<p>The withdrawal domain provides management functionality (create, read, update and delete), as well as the possibility to filter all existing withdrawals. The most important thing to know about this domain is that because of legal terms a customer only needs to provide an email address to revoke a purchase order.</p>"},{"location":"framework/business-components/withdrawal/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Withdrawal\\Model\\Withdrawal</code> encapsulates details regarding the  corresponding order and customer as well as a withdrawal date, content and a flag about who created the withdrawal. After creation, the aggregate root only provides the possibility to change the order ID.</p>"},{"location":"framework/business-components/withdrawal/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/withdrawal/#fetching-all-or-a-specific-withdrawal","title":"Fetching all or a specific withdrawal","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalReadService **/\n\n$allWithdrawals     = $readService-&gt;getWithdrawals();\n$specificWithdrawal = $readService-&gt;getWithdrawalById(1);\n</code></pre>"},{"location":"framework/business-components/withdrawal/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/withdrawal/#updating-the-order-id","title":"Updating the order ID","text":"<pre><code>/** @var $readService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalReadService **/\n/** @var $writeService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalFactory **/\n\n$withdrawal = $readService-&gt;getWithdrawalById(1);\n$newOrderId = $factory-&gt;createOrderId(2);\n\n$withdrawal-&gt;changeOrderId($newOrderId);\n\n$writeService-&gt;storeWithdrawals($withdrawal);\n</code></pre>"},{"location":"framework/business-components/withdrawal/#creating-a-new-withdrawal","title":"Creating a new withdrawal","text":"<p>Full example:</p> <pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalFactory **/\n\n$orderId      = 1;\n$creationDate = '2020-01-01';\n$deliveryDate = '2020-01-01';\n\n$customerStreet   = 'Example street';\n$customerPostcode = '12345';\n$customerCity     = 'Example city';\n$customerCountry  = 'Example country';\n\n$email     = 'john-doe@example.com';\n$address   = $factory-&gt;createCustomerAddress($customerStreet, $customerPostcode, $customerCity, $customerCountry);\n$id        = 2;\n$gender    ='m';\n$firstname = 'John';\n$lastname  = 'Doe';\n\n$order          = $factory-&gt;createOrderDetails($orderId, $creationDate, $deliveryDate);\n$customer       = $factory-&gt;createCustomerDetails($email, $address, $id, $gender, $firstname, $lastname);\n$withdrawalDate = '2020-01-01';\n$content        = 'Example content';\n$createdByAdmin = false;\n\n$id = $writeService-&gt;createWithdrawal($order, $customer, $withdrawalDate, $content, $createdByAdmin);\n</code></pre> <p>Minimal example with default values:</p> <pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalFactory **/\n\n$email   = 'john-doe@example.com';\n$address = $factory-&gt;createCustomerAddress();\n\n$order    = $factory-&gt;createOrderDetails();\n$customer = $factory-&gt;createCustomerDetails($email, $address);\n\n$id = $writeService-&gt;createWithdrawal($order, $customer);\n</code></pre>"},{"location":"framework/business-components/withdrawal/#creating-multiple-withdrawals-at-once","title":"Creating multiple withdrawals at once","text":"<p>You can create multiple withdrawals at once if you provide all needed information as an array.</p> <pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalWriteService **/\n/** @var $factory \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalFactory **/\n\n$email1  = 'john-doe-1@example.com';\n$email2  = 'john-doe-2@example.com';\n$email3  = 'john-doe-3@example.com';\n$address = $factory-&gt;createCustomerAddress();\n\n$order1          = $factory-&gt;createOrderDetails();\n$order2          = $factory-&gt;createOrderDetails();\n$order3          = $factory-&gt;createOrderDetails();\n$customer1       = $factory-&gt;createCustomerDetails($email1, $address);\n$customer2       = $factory-&gt;createCustomerDetails($email2, $address);\n$customer3       = $factory-&gt;createCustomerDetails($email3, $address);\n$withdrawalDates = ['2020-01-01', '2020-01-02', '2020-01-03'];\n\n$ids = $writeService-&gt;createMultipleWithdrawals(\n           [$order1, $customer1, $withdrawalDates[0]],\n           [$order2, $customer2, $withdrawalDates[1]],\n           [$order3, $customer3, $withdrawalDates[2]]\n       );\n</code></pre>"},{"location":"framework/business-components/withdrawal/#deleting-withdrawals","title":"Deleting withdrawals","text":"<pre><code>/** @var $writeService \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteWithdrawals($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteWithdrawals($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/withdrawal/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/withdrawal/#filter-all-existing-withdrawals-including-sorting-and-pagination","title":"Filter all existing withdrawals including sorting and pagination","text":"<pre><code>/** @var $filteredWithdrawals \\Gambio\\Admin\\Modules\\Withdrawal\\Services\\WithdrawalFilterService **/\n\n$filters = [\n    'createdByAdmin'    =&gt; '1',              // Withdrawal was created by an admin\n    'customer.lastName' =&gt; '*Doe*',          // Customer last name contains \"Doe\"\n    'createdOn'         =&gt; 'gte|2020-01-01', // Withdrawal was created after 2020-01-01\n];\n$sorting = '-customer.firstName,customer.lastName'; // In descending order of customers first name\n                                                    // and ascending order of customers last name\n$limit   = 25;\n$offset  = 0;\n\n$filteredWithdrawals             = $filterService-&gt;filterWithdrawals($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredWithdrawals = $filterService-&gt;getWithdrawalsTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/withdrawal/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the withdrawal and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>order.id</code> X X X X X <code>order.creationDate</code> X X X X X <code>order.deliveryDate</code> X X X X X <code>customer.id</code> X X X X X <code>customer.gender</code> X X <code>customer.firstName</code> X X <code>customer.lastName</code> X X <code>customer.address.street</code> X X <code>customer.address.postcode</code> X X <code>customer.address.city</code> X X <code>customer.address.country</code> X X <code>customer.email</code> X X <code>date</code> X X X X X <code>content</code> X X <code>createdByAdmin</code> X <code>createdOn</code> X X X X X"},{"location":"framework/business-components/withdrawal/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/withdrawal/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/withdrawal/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Withdrawal\\Model\\Events\\WithdrawalCreated</code> Will be raised if a withdrawal has been created. <code>Gambio\\Admin\\Modules\\Withdrawal\\Model\\Events\\WithdrawalDeleted</code> Will be raised if a withdrawal has been removed. <code>Gambio\\Admin\\Modules\\Withdrawal\\Model\\Events\\WithdrawalsOrderIdUpdated</code> Will be raised if an order ID has been updated."},{"location":"framework/business-components/internal/configuration/","title":"Internal use only - Should not be released","text":""},{"location":"framework/business-components/internal/configuration/#configuration-page","title":"Configuration page","text":"<p>Managing configurations is an essential mechanic of the Gambio Admin, which is done mainly using the configuration page. The configuration page consists of various categories, which are further divided into groups. The groups are assigned configurations which are then displayed within these groups. Tags can be assigned to the individual configurations.</p> <p>There are two ways to filter the displayed configurations. You can use the search function to filter by a term. Only configurations will be displayed if there was a match in the label of the configuration, the name of its group or the name of the category. Independently of this, you can also use the tags to filter thematically. If a tag is selected, all linked configurations are displayed.</p> <p>Because everything is managed by using JSON files, there is no need for a complex domain, which is why there are only internal components and no public interface for extension.</p> <p>Nevertheless, the following sections explain the inner structure and functionality of the configuration page and internal components.</p>"},{"location":"framework/business-components/internal/configuration/#definition-files","title":"Definition files","text":"<p>The <code>src/GambioAdmin/Modules/Configuration/App/Data/definitions</code> directory contains the data that is used to generate the configuration page. </p> <p>For the customizing, additional JSON files with the prefix <code>custom.</code> can be created (e.g. <code>custom.categories.json</code>). These additional files are read and processed after the main files. This means that not only additional categories, groups, configurations, tags or types can be added, but also existing ones can be overwritten.</p> <p>The scheme of the JSON files should be self-explanatory. In general:</p> <ul> <li>For the attributes <code>label</code> a section and phrase of a language file must always be specified.</li> <li>The attribute <code>id</code> is always a string and is used for referencing, e.g. to assign a category to a group.</li> <li>The attribute <code>key</code> in the <code>configuration.json</code> always refers to a configuration key from the <code>gx_configuration</code>   database table.</li> <li>Each type must be assigned a factory via <code>src/GambioAdmin/Modules/Configuration/ConfigurationServiceProvider.php</code>   (see line 141 and below).</li> </ul>"},{"location":"framework/business-components/internal/configuration/#adding-a-new-type-factory","title":"Adding a new type factory","text":"<p>To add a new type a new entry in the <code>types.json</code> (or <code>custom.types.json</code>) must be added, as well as a factory must be implemented. Already existing Factories can be found in the <code>src/GambioAdmin/Modules/Configuration/Services/TypeFactories</code> folder. It is important that a new factory implements the <code>Gambio\\Admin\\Modules\\Configuration\\Services\\TypeFactories\\TypeFactory</code> interface. The array, which is passed to the method, is a summary of the standard parameters (from the <code>types.json</code> or <code>custom.types.json</code>) and the parameters of the configuration (from the <code>configurations.json</code> or <code>custom.configurations.json</code>).</p>"},{"location":"framework/business-components/internal/exception-transmitter/","title":"Internal Use Only - Should Not Be Released","text":""},{"location":"framework/business-components/internal/exception-transmitter/#internal-use-only-should-not-be-released","title":"Internal Use Only - Should Not Be Released","text":""},{"location":"framework/business-components/internal/exception-transmitter/#exceptiontransmitter","title":"ExceptionTransmitter","text":"<p>The ExceptionTransmitter component allows you to send an Exception and additional data to a project-specific Sentry server.</p> <p>It utilizes an internal cache to prevent the same error from being sent more than once within a 24-hour period.</p> <p>This information is stored in the cache directory, and deleting the transmission cache file will result in the generation of additional reports.</p> <p>An Exception will only be sent if the user has consented to data transfer by installing the \"Send error reports\" module from the Modules-Center. It's important to note that this consent check is internal to the service and does not require  any additional actions outside of it.</p>"},{"location":"framework/business-components/internal/exception-transmitter/#how-to-transmit-an-exception","title":"How to Transmit an Exception","text":"<p>To transmit an Exception, use the following code:</p> <pre><code>/** @var \\Gambio\\Core\\ErrorHandling\\Services\\ExceptionTransmitter $transmitter */\n$transmitter-&gt;handleException(\n    new \\Exception('Send me please'), \n    ['optional none sensitive data']\n);\n</code></pre> <p>The <code>handleException</code> method accepts two arguments: the first is the Exception itself,  and the second is an optional argument for context data, which must be provided as an array.  Please ensure that the context data does not contain any sensitive information or personally identifiable information about users.</p>"},{"location":"framework/business-components/internal/sellingunit/","title":"Selling Unit","text":"<p>The SellingUnit is a layer that intents to give and easy and reliable source of information for a selected product/service in the Gambio Shop. It offers in a centralized way access to all the information and exceptions for a product in the shop current state. The current shop state means that the SellingUnit cannot give the representation of a product in the past, but it will reconstruct its data based on the shop current parameters.</p>"},{"location":"framework/business-components/internal/sellingunit/#sellingunit-composition","title":"SellingUnit composition","text":""},{"location":"framework/business-components/internal/sellingunit/#understanding-the-concept-of-sellable-unit","title":"Understanding the concept of sellable unit","text":"<p>The objective of the shop is to sell goods or services that will be delivered/supplied to the customer. Those goods or services may have specific characteristics that may affect what is going to be delivered.  As an example, a product can have a property called Size, inside the Size we can have different selectable options, for example for the property Size we can 41, 42, or 43 options.  The selected product with the selected size will result in a different physical good tp be delivered.</p>"},{"location":"framework/business-components/internal/sellingunit/#abstracting-the-real-world","title":"Abstracting the real world","text":"<p>The SellingUnit intents fulfill the requirements of the selling process, where the user chooses a product and supplies additional information e.g. color, size, warehouse, shipping type, etc. In this example, the selected color, size, warehouse, shipping type are the selected modifiers, and the ID of those selected modifiers will be included in the SellingUnitId.</p> <p>The minimum deliverable and sellable unit, plus the additional information related with the Selling, is called the SellingUnit.</p> <p>The selected property is named as modifier, and the property with all its options is called Modifier Group.</p> <p>The SellingUnit doesn't implement the business rules but only supply an interface where different modules can compete and/or cooperate to create some information without coupling with each other.</p>"},{"location":"framework/business-components/internal/sellingunit/#structure-examples","title":"Structure examples","text":""},{"location":"framework/business-components/internal/sellingunit/#modifier-group","title":"Modifier Group","text":"<ul> <li> <p>Group Size {id: 1, description: Size}&lt;- Modifier Group</p> <ul> <li>41 {id: 1, description: 41, class PropertyModifier} &lt;- Modifier</li> <li>42 {id: 2, description: 42, class PropertyModifier} &lt;- Modifier</li> <li>43 {id: 3, description: 43, class PropertyModifier} &lt;- Modifier</li> </ul> </li> <li> <p>Group Color {id: 2, description: Color}&lt;- Modifier Group</p> <ul> <li>Blue {id: 30, description: Blue, class PropertyModifier} &lt;- Modifier</li> <li>Black {id: 31, description: Black, class PropertyModifier} &lt;- Modifier</li> <li>Yellow {id: 32, description: Yellow, class PropertyModifier} &lt;- Modifier</li> </ul> </li> </ul>"},{"location":"framework/business-components/internal/sellingunit/#sellingunit-identification","title":"SellingUnit Identification","text":"<p>The SellingUnit identification is a composition of the productId, a language, and a collection of many modifiers. While the language doesn't change most of the values (like stock, size, and weight) it can change language-dependent information, e.g. the product description. Example:</p> <p>Bellow, it is demonstrated how the SellingUnitId use of composition to then create its unique identity. - SellingUnitId      - productId [1] &lt;- the product id     - modifiers: &lt;- collection of modifiers id         - {code: 1, class:PropertyModifierId} &lt;- id of the Size modifier Option 41         - {code: 30, class:PropertyModifierId} &lt;- id of the Color modifier Option Blue     - language {value: 1, class Language} </p>"},{"location":"framework/business-components/internal/sellingunit/#handling-the-cooperation-and-competition-between-modules","title":"Handling the cooperation and competition between modules","text":"<p>An example of modules that may compete or cooperate to create some information is the properties, the product, and the attributes.  These 3 modules compete and cooperate to the construction of the SellingUnit Weight.</p> <p>The weight is composed of two different pieces of information 1. Main Weight [1] - The principal weight of the SellingUnit.     - A null value means that the SellingUnit state is not valid.    - The modules Product and Properties compete for defining this information 1. Additional Weight [n] - Weights that will be added to the main weight.     - The module Attributes and Properties cooperate with this information.</p> <p>Every module will supply the information by using the event WeightBuilder.  The WeightBuilder accepts many additional weights, but only one main weight. To handle the concurrence, every module defines its priority when giving the information, it means that,  if the product module (priority 1000) and properties module (priority 10000) define the main weight,  the properties module information will be selected, because it has a bigger priority.</p> <p>The priorities are hardcoded, meaning that external modules can collide over the information priority.</p>"},{"location":"framework/business-components/internal/sellingunit/#advantages","title":"Advantages","text":""},{"location":"framework/business-components/internal/sellingunit/#the-main-benefits-of-the-sellingunit","title":"The main benefits of the SellingUnit","text":""},{"location":"framework/business-components/internal/sellingunit/#decoupling-modules","title":"Decoupling modules","text":"<p>Different modules that compete or cooperate for the same information and don't know about each other.</p>"},{"location":"framework/business-components/internal/sellingunit/#easy-implementation-of-new-modules","title":"Easy implementation of new modules","text":"<p>Once defined how the information is composed and how the modules should interact with each other, it is possible to implement new modules without changing the code of the existing modules.</p>"},{"location":"framework/business-components/internal/sellingunit/#reusability","title":"Reusability","text":"<p>The SellingUnit can be used in any part of the Shop FrontEnd, and it can offer a centralized source of credible information.</p>"},{"location":"framework/business-components/internal/sellingunit/#disadvantages","title":"Disadvantages","text":""},{"location":"framework/business-components/internal/sellingunit/#no-implementation-for-custom-fields","title":"No implementation for custom fields","text":"<p>The SellingUnit doesn't offer an easy way of implementing new fields, but only to interact over the information it already has.</p> <pre><code>Obs: The merge request https://sources.gambio-server.net/gambio/gxdev/-/merge_requests/965 proproses an implementation of custom fields for the SellingUnit\n</code></pre>"},{"location":"framework/business-components/internal/sellingunit/#granularity","title":"Granularity","text":"<p>The implementation of the modules of the SellingUnit modules structured in a very granular way, meaning that some modules do many queries over the same table to get different information. The Module for Properties were partially refactored in order to use a centralized in-memory cached repository.</p>"},{"location":"framework/business-components/internal/sellingunit/#structure","title":"Structure","text":"<p>All the fields of the SellingUnit are LazyLoaded by an EventBased structure. When a field accessed at the first time, it will trigger an event, this event will be captured by listeners that will compete of cooperate for the ownership of the information. The image bellow demonstrate the SellingUnit and it's events.</p> <p></p>"},{"location":"framework/business-components/work-in-progress/customer-address/","title":"Work in progress - Customer Address","text":"<p>Each customer need to provide an address while registering, but it's possible add and manage additional addresses. These customer addresses are used for payment or shipping and can be selected in the checkout process.</p> <p>The following sections describe the model, use cases, business rules, and events.</p>"},{"location":"framework/business-components/work-in-progress/customer-address/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\CustomerAddress</code> provides information like street name, house number, city, and similar. Addresses can be marked as default shipping or payment addresses.</p>"},{"location":"framework/business-components/work-in-progress/customer-address/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/work-in-progress/customer-address/#fetching-all-or-a-specific-customer-address","title":"Fetching all or a specific customer address","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressReadService **/\n\n$allCustomerAddresses    = $readService-&gt;getAllCustomerAddresses();\n$allCustomersAddresses   = $readService-&gt;getCustomerAddressesByCustomerId(1);\n$specificCustomerAddress = $readService-&gt;getCustomerAddressById(1);\n$defaultPaymentAddress   = $readService-&gt;getDefaultPaymentAddressByCustomerId(1);\n$defaultShippingAddress  = $readService-&gt;getDefaultShippingAddressByCustomerId(1);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#use-cases-using-write-service","title":"Use cases using write service","text":""},{"location":"framework/business-components/work-in-progress/customer-address/#updating-the-personal-details","title":"Updating the personal details","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$gender           = 'm'; // or $gender = \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\CustomerAddress::GENDER_MALE;\n$firstName        = 'John';\n$lastName         = 'Doe';\n$companyName      = 'Gambio GmbH';\n$personalDetails  = $factory-&gt;createPersonalDetails($gender, $firstName, $lastName, $companyName);\n\n$customerAddress = $readService-&gt;getCustomerAddressById(1);\n$customerAddress-&gt;updatePersonalDetails($personalDetails);\n\n$writeService-&gt;storeCustomerAddresses($customerAddress);\n// Method can handle multiple customer addresses like:\n// $writeService-&gt;storeCustomerAddresses($customerAddress1, $customerAddress2, $customerAddress3);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#updating-the-location-details","title":"Updating the location details","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$street          = 'Parallelweg';\n$houseNumber     = '30';\n$additionalInfo  = '';\n$suburb          = '';\n$postcode        = '28217';\n$city            = 'Bremen';\n$state           = 'Bremen';\n$countryId       = 81;\n$zoneId          = 1355;\n$locationDetails = $factory-&gt;createLocationDetails(\n                       $street,\n                       $houseNumber,\n                       $additionalInfo,\n                       $suburb,\n                       $postcode,\n                       $city,\n                       $state,\n                       $countryId,\n                       $zoneId\n                   );\n\n$customerAddress = $readService-&gt;getCustomerAddressById(1);\n$customerAddress-&gt;updateLocationDetails($personalDetails);\n\n$writeService-&gt;storeCustomerAddresses($customerAddress);\n// Method can handle multiple customer addresses like:\n// $writeService-&gt;storeCustomerAddresses($customerAddress1, $customerAddress2, $customerAddress3);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#mark-as-default-payment-address","title":"Mark as default payment address","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$customerAddress = $readService-&gt;getCustomerAddressById(1);\n$customerAddress-&gt;setAsPaymentDefaultAddress();\n\n$writeService-&gt;storeCustomerAddresses($customerAddress);\n// Method can handle multiple customer addresses like:\n// $writeService-&gt;storeCustomerAddresses($customerAddress1, $customerAddress2, $customerAddress3);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#mark-as-default-shipping-address","title":"Mark as default shipping address","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressReadService **/\n/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$customerAddress = $readService-&gt;getCustomerAddressById(1);\n$customerAddress-&gt;setAsShippingDefaultAddress();\n\n$writeService-&gt;storeCustomerAddresses($customerAddress);\n// Method can handle multiple customer addresses like:\n// $writeService-&gt;storeCustomerAddresses($customerAddress1, $customerAddress2, $customerAddress3);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#creating-a-new-customer-address","title":"Creating a new customer address","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$gender      = 'm'; // or $gender = \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\CustomerAddress::GENDER_MALE;\n$firstName   = 'John';\n$lastName    = 'Doe';\n$companyName = 'Gambio GmbH';\n\n$street         = 'Parallelweg';\n$houseNumber    = '30';\n$additionalInfo = '';\n$suburb         = '';\n$postcode       = '28217';\n$city           = 'Bremen';\n$state          = 'Bremen';\n$countryId      = 81;\n$zoneId         = 1355;\n\n$customerId      = 1;\n$personalDetails = $factory-&gt;createPersonalDetails($gender, $firstName, $lastName, $companyName);\n$locationDetails = $factory-&gt;createLocationDetails(\n                       $street, $houseNumber, $additionalInfo, $suburb,\n                       $postcode, $city, $state, $countryId, $zoneId\n                   );\n\n$id = $writeService-&gt;createCustomerAddress($customerID, $personalDetails, $locationDetails);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#creating-multiple-customer-addresses-at-once","title":"Creating multiple customer addresses at once","text":"<p>You can create multiple customer addresses at once if you provide all needed information as an array.</p> <pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n/** $factory \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFactory **/\n\n$genders      = ['m', 'w'];\n$firstNames   = ['John', 'Jane'];\n$lastNames    = ['Doe', 'Doe'];\n$companyNames = ['Gambio GmbH', 'Gambio GmbH'];\n\n$streets         = ['Parallelweg', 'Parallelweg'];\n$houseNumbers    = ['30', '30'];\n$additionalInfos = ['', ''];\n$suburbs         = ['', ''];\n$postcodes       = ['28217', '28217'];\n$citys           = ['Bremen', 'Bremen'];\n$states          = ['Bremen', 'Bremen'];\n$countryIds      = [81, 81];\n$zoneIds         = [1355, 1355];\n\n$customerIds     = [1, 1];\n$personalDetails = [\n                        $factory-&gt;createPersonalDetails($genders[0], $firstNames[0], $lastNames[0], $companyNames[0]),\n                        $factory-&gt;createPersonalDetails($genders[1], $firstNames[1], $lastNames[1], $companyNames[1]),\n                   ];\n$locationDetails = [\n                        $factory-&gt;createLocationDetails(\n                            $streets[0], $houseNumbers[0], $additionalInfos[0], $suburbs[0],\n                            $postcodes[0], $citys[0], $states[0], $countryIds[0], $zoneIds[0]\n                        ),\n                        $factory-&gt;createLocationDetails(\n                            $streets[1], $houseNumbers[1], $additionalInfos[1], $suburbs[1],\n                            $postcodes[1], $citys[1], $states[1], $countryIds[1], $zoneIds[1]\n                        ),\n                    ];\n\n$ids = $writeService-&gt;createMultipleCustomerAddresses(\n           [$customerIds[0], $personalDetails[0], $locationDetails[0]],\n           [$customerIds[1], $personalDetails[1], $locationDetails[1]]\n       );\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#delete-customer-addresses","title":"Delete customer addresses","text":"<pre><code>/** $writeService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressWriteService **/\n\n$id = 1;\n\n$writeService-&gt;deleteCustomerAddresses($id);\n// Method can handle multiple IDs like: $writeService-&gt;deleteCustomerAddresses($id1, $id2, $id3);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/work-in-progress/customer-address/#filter-all-customer-addresses-including-sorting-and-pagination","title":"Filter all customer addresses including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Services\\CustomerAddressFilterService **/\n\n$filters    = [\n    'companyNames' =&gt; '*Gambio*', // Company name contains \"Gambio\"\n];\n$sorting    = '-createdOn'; // In descending order of creation date\n$limit      = 25;\n$offset     = 0;\n\n$filteredCustomerAddresses             = $filterService-&gt;filterCustomerAddresses($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredCustomerAddresses = $filterService-&gt;getCustomerAddressesTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/customer-address/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the customer address and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>customerId</code> X X X X X <code>isPaymentDefault</code> X <code>isShippingDefault</code> X <code>personal.gender</code> X X <code>personal.firstName</code> X X <code>personal.lastName</code> X X <code>personal.companyName</code> X X <code>location.street</code> X X <code>location.houseNumber</code> X X <code>location.additionalInfo</code> X X <code>location.suburb</code> X X <code>location.postcode</code> X X <code>location.city</code> X X <code>location.state</code> X X <code>location.countryId</code> X X <code>location.zoneId</code> X X <code>createdOn</code> X X X X X <code>lastModified</code> X X X X X"},{"location":"framework/business-components/work-in-progress/customer-address/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/work-in-progress/customer-address/#business-rules","title":"Business rules","text":"<ul> <li>Minimal length of attributes (first name, street, etc.) is determined by the general shop configurations.</li> <li><code>ENTRY_CITY_MIN_LENGTH</code></li> <li><code>ENTRY_COMPANY_MIN_LENGTH</code></li> <li><code>ENTRY_FIRST_NAME_MIN_LENGTH</code></li> <li><code>ENTRY_HOUSENUMBER_MIN_LENGTH</code></li> <li><code>ENTRY_LAST_NAME_MIN_LENGTH</code></li> <li><code>ENTRY_PASSWORD_MIN_LENGTH</code></li> <li><code>ENTRY_POSTCODE_MIN_LENGTH</code></li> <li><code>ENTRY_STATE_MIN_LENGTH</code></li> <li><code>ENTRY_STREET_ADDRESS_MIN_LENGTH</code></li> <li><code>ENTRY_TELEPHONE_MIN_LENGTH</code></li> <li>Each customer can only have one default payment and shipping address.</li> <li>The attribute gender can only be used, if the configuration <code>ACCOUNT_ADDITIONAL_INFO</code> is enabled.</li> <li>The attribute state can only be used, if the configuration <code>ACCOUNT_STATE</code> is enabled.</li> <li>The attribute suburb can only be used, if the configuration <code>ACCOUNT_SUBURB</code> is enabled.</li> <li>The attribute suburb can only be used, if the configuration <code>ACCOUNT_SUBURB</code> is enabled.</li> <li>The attributes street and house number are splitted, if the configuration <code>ACCOUNT_SPLIT_STREET_INFORMATION</code> is enabled.</li> </ul>"},{"location":"framework/business-components/work-in-progress/customer-address/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomerAddressCreated</code> Will be raised if a customer address has been created. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomerAddressDeleted</code> Will be raised if a customer address has been removed. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomersPaymentMarkedAsDefaultAddress</code> Will be raised if a customer address has been marked as payment default address. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomersShippingMarkedAsDefaultAddress</code> Will be raised if a customer address has been marked as shipping default address. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomerAddressLocationDetailsUpdate</code> Will be raised if the location details has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Address\\Model\\Events\\CustomerAddressPersonalDetailsUpdate</code> Will be raised if the personal details has been updated."},{"location":"framework/business-components/work-in-progress/customer-credentials/","title":"Customer Credentials","text":"<p>The customers' credentials make the difference between a guest and a registered account. Without the corresponding credentials a customer can't reactivate a session and therefore is determined as a guest account.</p> <p>The current concept of the customer credentials only contain a proceeding that is based on a login (currently the email address) and a password. Additional, only one combination of login and password can be set for each customer. To allow more flexibility in the future, the new system can handle multiple types of credentials and allow their usage at the same time, even if we keep the current limitation (mostly because of compatibility reasons and the lack of currently related features).</p> <p>The following sections describe the domain, model, use cases, business rules, and events.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#customer-credentials-domain","title":"Customer credentials domain","text":"<p>The customer credentials domain provides management functionality (create, read, update and delete).</p> <p>This domain is part of the general customer management domain and is tightly linked to the Customer domain.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Credential\\Model\\CustomerCredential</code> references one specific customer credential. For the reason that this is an interface, there can be multiple implementation of customer credentials, each with their own characteristics.</p> <p>At the moment we have the following typs of customers' credentials:</p> <ul> <li><code>CustomerBasicAuthCredential</code>:   This type uses the mostly known combination of a login and password. This combination ist often used to identify and   authenticate a customer, e.g. in the Gambio Shop or the REST API.</li> </ul> <p></p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#read-and-write-services","title":"Read and write services","text":""},{"location":"framework/business-components/work-in-progress/customer-credentials/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/work-in-progress/customer-credentials/#fetching-all-or-a-specific-customer-memo","title":"Fetching all or a specific customer memo","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#use-cases-using-write-service","title":"Use cases using write service","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#creating-a-new-customer-memo","title":"Creating a new customer memo","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#creating-multiple-customer-memos-at-once","title":"Creating multiple customer memos at once","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#updating-the-customer-memos-content","title":"Updating the customer memos content","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#deleting-a-customer-memo","title":"Deleting a customer memo","text":"<p>// TODO: After we implemented the services.</p>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#business-rules","title":"Business rules","text":"<ul> <li>If a customer has been deleted the corresponding credentials need to be deleted as well.</li> </ul>"},{"location":"framework/business-components/work-in-progress/customer-credentials/#domain-events","title":"Domain events","text":"Event Description <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Credential\\Model\\Events\\CustomerBasicAuthCredentialCreated</code> Will be raised if a customer basic auth credential has been created. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Credential\\Model\\Events\\CustomerBasicAuthCredentialDeleted</code> Will be raised if a customer basic auth credential has been removed. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Credential\\Model\\Events\\CustomerBasicAuthCredentialsLoginUpdated</code> Will be raised if the login of a customer basic auth credential has been updated. <code>Gambio\\Admin\\Modules\\Customer\\Submodules\\Credential\\Model\\Events\\CustomerBasicAuthCredentialsPasswordUpdated</code> Will be raised if the password of a customer basic auth credential has been updated."},{"location":"framework/business-components/work-in-progress/language/","title":"Work in progress - Should not be released, as long as the model is incomplete.","text":""},{"location":"framework/business-components/work-in-progress/language/#language","title":"Language","text":"<p>Languages can be managed in the Gambio Admin and are essential for the text phrase system and language-dependent informationen that can be added to products, categories, etc. </p> <p>The following sections describe the domain, model, use cases and business rules.</p>"},{"location":"framework/business-components/work-in-progress/language/#language-domain","title":"Language domain","text":"<p>Currently, the language domain provides only reading and filter functionality. In general this domain is very basic  and there aren't any specific business rules or constrains.</p>"},{"location":"framework/business-components/work-in-progress/language/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Admin\\Modules\\Language\\Model\\Language</code> encapsulates details like language ID, code, a name, charset and its corresponding directory on the filesystem. </p>"},{"location":"framework/business-components/work-in-progress/language/#use-cases-using-read-service","title":"Use cases using read service","text":""},{"location":"framework/business-components/work-in-progress/language/#fetching-all-or-a-specific-language","title":"Fetching all or a specific language","text":"<pre><code>/** $readService \\Gambio\\Admin\\Modules\\Language\\Services\\LanguageReadService **/\n\n$allLanguages      = $readService-&gt;getLanguages();\n$specificLanguage1 = $readService-&gt;getLanguageById(1);\n$specificLanguage2 = $readService-&gt;getLanguageByCode('de');\n</code></pre>"},{"location":"framework/business-components/work-in-progress/language/#use-cases-using-filter-service","title":"Use cases using filter service","text":""},{"location":"framework/business-components/work-in-progress/language/#filter-all-existing-languages-including-sorting-and-pagination","title":"Filter all existing languages including sorting and pagination","text":"<pre><code>/** $filterService \\Gambio\\Admin\\Modules\\Language\\Services\\LanguageFilterService **/\n\n$filters = [\n    'charset' =&gt; 'utf-8', // Parcel service charset is \"utf-8\"\n];\n$sorting = '-name'; // In descending order of name\n$limit   = 25;\n$offset  = 0;\n\n$filteredLanguages             = $filterService-&gt;filterLanguages($filters, $sorting, $limit, $offset);\n$totalCountOfFilteredLanguages = $filterService-&gt;getLanguagesTotalCount($filters);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/language/#filtering","title":"Filtering","text":"<p>The filter array that is given to the filter service maps the attributes of the language and the filtering term. The assigned string (e.g. <code>get|2020-01-01</code>) always contains the comparison value, but it also may contain an operation (e.g. <code>gte</code> for greater than or equals to). Leaving the operation (e.g. <code>2020-01-01</code>) will be the same as using equals to (<code>eq</code>).</p> <p>The following table shows all attributes and the operations that can be used on them.</p> like (<code>*</code>) equals to (<code>eq</code>) lower than (<code>lt</code>) lower than or equals to (<code>lte</code>) greater than (<code>gt</code>) greater than or equals to (<code>gte</code>) <code>id</code> X X X X X <code>code</code> X X <code>name</code> X X <code>charset</code> X X <code>directory</code> X X"},{"location":"framework/business-components/work-in-progress/language/#sorting","title":"Sorting","text":"<p>To change the sorting, you can provide a string that describes the sorting order. The string must contain the attributes used for sorting. If there is a minus (<code>-</code>) in front of the attribute, it will be sorted in descending order. You can use multiple attributes to change the sorting order by linking them with a comma (<code>,</code>).</p>"},{"location":"framework/business-components/work-in-progress/language/#business-rules","title":"Business rules","text":"<p>There are no specific business rules.</p>"},{"location":"framework/business-components/work-in-progress/language/#domain-events","title":"Domain events","text":"Event Description"},{"location":"framework/business-components/work-in-progress/product-listing/","title":"Product Listing","text":"<p>Every list of products in the gambio shop is a Product Listing. They can be of different kinds, for example there could be a listing for upcoming products and another listing for specials. Pages often contain multiple listings. They can provide links to the product or for example links to put them into the cart directly.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/#product-listing-domain","title":"Product Listing Domain","text":"<p>The Product Listing Domain provides a service that is used to retrieve any kind of listing. It has a single method, which most important parameter is the filter, which defines the kind of listing.</p> <p>There are several ways to extend Product Listings. It is possible to extend all listings, only specific kinds, or exclude specific kinds. Also, it is possible to extend the whole listing at once, listing items with a specific id and a batch extending mechanism by multiple ids.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/#aggregate-root-and-domain-model","title":"Aggregate root and domain model","text":"<p>The aggregate root <code>Gambio\\Shop\\Modules\\ProductListing\\Model\\Listing</code> contains listing items <code>Gambio\\Shop\\Modules\\ProductListing\\Model\\ListingItem</code>. Listing items contains product- and customer related, translated product information like the product name, description, prices, tax, stock information and more. They can be extended in different ways, which will be explained in the chapters Extending a listing item, Extending a listing , Extending with extenders, and Extending with events.</p> <p>Note: In the first iteration, the listing item contains only a small dataset. In further iterations, we add more data until we archive the final result.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/#use-case","title":"Use case","text":"<p>The <code>Gambio\\Shop\\Modules\\ProductListing\\Service\\ListingService</code> provides a single method to obtain an extended listing. Filters determine the kind of listing.</p> <pre><code>$listing = $listingService-&gt;getListing($filter, $pagination, $listingSettings);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/#filter","title":"Filter","text":"<p>Filters must implement <code>Gambio\\Shop\\Modules\\ProductListing\\Service\\ListingFilter</code>. They produce a list of product ids for the service, which are used to create the listing items.</p> <p>They determine the kind of listings and are therefore an important component of the domain. Filters are responsible to determine product ids for a specific tasks. This can be done through external input, like for a search page, or through internal data, like dates defined in some products related tables.</p> <p>Additionally, filters can define an event that will be dispatched in order to provide extendability by event for that filter.</p> <p>Event tho filters might get components injected in order to perform complex operations to produce the product ids, it is not recommended setting up filter in service provider. Instead, inject those components for example in action classes or dedicated factories in order to also take external input into account when creating filters.</p> <pre><code>$filter        = $filterFactory-&gt;createSearchFilter($searchQuery);\n$searchListing = $listingService-&gt;getListing($filter, ...);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/#other-service-input","title":"Other service input","text":"<p>For pagination, the service needs the current page and the items per page as input. Additionally, the language id and user id is required in order to fetch translated items with the correct customer related data.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/#extending-a-listing-item","title":"Extending a listing item","text":"<p>Listing items provides a method to extend the internal data. A namespace must be provided to distinguish between different extenders. The provided payload can be of any type.</p> <pre><code>public function extend(string $namespace, $payload): void;\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/#extending-a-listing","title":"Extending a listing","text":"<p>The aggregate root provides methods to extend listing items:</p> <ol> <li>Extend whole list</li> <li>Extend listing item with specific id</li> <li>Extend listing items with specific ids</li> <li>Extend listing items without specific id</li> <li>Extend listing items without specific ids</li> </ol> <p>The aggregate root will be exposed to Extenders and Events, so they can use the methods to add their own data.</p> <pre><code>public function extend(string $namespace, $payload): void;\npublic function extendById(ListingItemId $id, string $namespace, $payload): void;\npublic function extendByIds(ListingItemIds $ids, string $namespace, $payload): void;\npublic function extendWithoutId(ListingItemId $id, string $namespace, $payload): void;\npublic function extendWithoutIds(ListingItemIds $ids, string $namespace, $payload): void;\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/#extending-with-extenders","title":"Extending with extenders","text":"<p>Extenders must implement the <code>Gambio\\Shop\\Modules\\ProductListing\\Service\\ListingExtender</code> interface and can be registered by inflecting the <code>::registerExtender</code> method of the service in a bootable service provider.</p> <pre><code>use Gambio\\Shop\\Modules\\ProductListing\\Model\\Listing;\nuse Gambio\\Shop\\Modules\\ProductListing\\Service\\ListingFilter;\n\npublic function extend(Listing $listing, ListingFilter $filter);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/#extending-with-events","title":"Extending with events","text":"<p>Event listeners can be attached to specific events in order to extend the listing. There is an abstract product listing event class <code>Gambio\\Shop\\Modules\\ProductListing\\Events\\AbstractListingEvent</code> and it is recommended to extend from that class. It provides all necessary extending functionality, so implementing events are only used to determine the kind of listing.</p> <p>The event <code>Gambio\\Shop\\Modules\\ProductListing\\Events\\ListingCollected</code> is dispatched for all listings. Additionally, filters can optionally define events to be dispatched.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/","title":"Components","text":""},{"location":"framework/business-components/work-in-progress/product-listing/components/#product-listing-item","title":"Product Listing Item","text":"<p>The product listing item contains all product related data and can be extended.</p> <p>At first, we can use a \"fake\" item implementation containing only a small subset of the actual data to build the other system around.</p> <p>Also, in the first iteration, the model contains only methods to serialize into a php array and necessary methods to check for specific items (in order to implement the extending functionality).</p> <p>Further iterations might extend the item by composing traits into the model implementation providing methods for accessing and mutating the internal state.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#extendability","title":"Extendability","text":"<p>Product listing items can be extended. They provide a method for that that takes a namespace and payload as parameter. The signature might look like this: <code>(string $namespace, mixed $payload)</code>. At least at the first iteration, we only provide a mechanism to add data to the listing item, but there is no mechanism to change existing data. Also, it is not possible in the first iteration to reference any existing data of the item (due to the lack of accessors), but this feature should be added ASAP after the first iteration.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#listing","title":"Listing","text":"<p>The listing represents the aggregate-root of the product listing subdomain. It is identified by the listing item ids produces from a Filter.</p> <p>It is a collection of Product Listing Items and contains additional metadata for pagination.</p> <p>The listing is the only class that will be exposed by the service. It MUST NOT expose the internal collection, but rather provide methods for extendability and serialization.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#pagination","title":"Pagination","text":"<p>The pagination contains metadata that is only important when serializing the listing into an array, so it can be used e.g. by the UI.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#extendability_1","title":"Extendability","text":"<p>The listing provides a couple of methods to extend the listing items:</p> <ol> <li> <p>Extend whole list</p> </li> <li> <p>Extend listing item with specific id</p> </li> <li> <p>Extend listing items with specific ids</p> </li> <li> <p>Extend listing items without specific id</p> </li> <li> <p>Extend listing items without specific ids</p> </li> </ol>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#service","title":"Service","text":"<p>The service provides a single method to obtain product listings. It takes a couple of parameters, but the most important one is the filter. The filter is responsible to produce a list of product ids for all items that could appear in the listing. The other parameters are the pagination setup and some global identifier, like the currents user and language id in order to fetch the correct prices of that customer with a correct translation.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#pagination_1","title":"Pagination","text":"<p>The pagination is just responsible to take the current page and items per page as input and use this information to enhance the final listing with metadata used to navigate between pages.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#filter","title":"Filter","text":""},{"location":"framework/business-components/work-in-progress/product-listing/components/#producing-product-listing-item-ids","title":"Producing product listing item ids","text":"<p>The product listing filter defines the kind of product listing. For example, when you want to have a product listing for all specials, the filter ensures to provide product ids of specials.</p> <p>Filters can take arbitrary input in order to perform their task (producing product ids). Service providers can be used to perform complex operations to calculate the filter listing items ids.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#optional-event-definition","title":"(Optional) Event definition","text":"<p>Filters optionally can define events that are dispatched when the filter is used. It is recommended to inject the Product Listing in the events' constructor, so listeners can extend the listing.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#idea","title":"Idea","text":"<p>We could provide an abstract event implementation containing all necessary methods and force implementors to extend from that class in order to ensure the Listing is injected and has all necessary methods. Then, implementors just have to create an empty event class extending the abstract implementation. It would make things easy and the reason to provide events in filters is that listeners can distinguish between different listings.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/components/#extender","title":"Extender","text":"<p>Extender provide another way to extend the listing. It takes the Listing and Filter as parameter and can therefore perform different operations than the events' mechanism. The core itself will not provide any extenders, but this is a good place for third party developers to hook in the system.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/","title":"Deliverables","text":""},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#first-iteration","title":"First iteration","text":""},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#very-simple-product-listing-item","title":"Very simple product listing item","text":"<p>The product listing item should only contain for example the translated name, raw base price from database table and an additional member holding data for the extending mechanism.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#methods","title":"Methods","text":"<ol> <li>Simple initialization: (Constructor | with translated name and raw base price)</li> <li>Mechanism to add additional data: <code>string $namespace, mixed $payload</code></li> <li>Identification mechanisms: <code>::equalsId | ::equals</code></li> </ol>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#product-listing","title":"Product Listing","text":"<p>The product listings is a collection of the product listing items and contains additional metadata for pagination. Here, it makes sense to implement a couple of features immediately in the first iteration. For usability, the listing should be iterable. Also, it makes sense to implement a couple methods for extendability:</p> <ol> <li>Extend whole list</li> <li>Extend listing item with specific id</li> <li>Extend listing items with specific ids</li> <li>Extend listing items without specific id</li> <li>Extend listing items without specific ids</li> </ol> <p>Finally, the pagination metadata should be computed correctly.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#service","title":"Service","text":"<p>The service class will be registered in the DI-Container to be used in different modules. This is the point where the product listing subdomain introduce coupling to other domains.</p> <p>It provides a single method, taking a filter, pagination and some identifier (for language and current user) as input and produces the final listing. It is also responsible to dispatch any events and providing another extendability mechanism beside events (Extender) so the listing can be extended before it is returned by the service.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#pseudo-example","title":"Pseudo example:","text":"<pre><code>public function getListing($filter, $pagination, $userId, $languageId)\n{\n    // use repo to get listing based on inputs\n    // dispatch filter based event (if available)\n    // dispatch general listing event\n    // executing extending mechanism using extenders\n    // return listing\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#details","title":"Details","text":"<p>The repository implementation must be exchangeable, so we can first implement a lightweight version of the listing items and later on replaced it with the full-featured version.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#filter","title":"Filter","text":"<p>We implement at least one simple filter that also provides an event, so we can use it for testing and gathering feedback. Later on, we define different kind of filters and divide their implementations across the team.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/deliverables/#extender","title":"Extender","text":"<p>Extenders are another way to extend listing beside events. The signature looks like this: <code>$listing, $filter</code>. Having access to Listing makes it possible to use any of the extend* methods. The advantage to events is having direct access the Listing and having the filter as reference opens different possibilities, like only use extender for specific filter or event exclude specific filters from extenders.</p> <p>The first iteration should implement a first GXModules sample showcasing extenders.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/","title":"TODO'S","text":"<ul> <li>define events name and FQN to extend on listing item level</li> </ul>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#to-discuss","title":"To Discuss","text":""},{"location":"framework/business-components/work-in-progress/product-listing/planning/#decide-afterproductlistingfetchevent-or-postproductlistingfetchevent","title":"Decide: <code>AfterProductListingFetchEvent</code> or <code>PostProductListingFetchEvent</code>","text":"<p>Name of the event that is dispatched after product listing collection data is fetched, for example used to extend listings on item level</p> <p><code>[After]ProductListingFetchEvent</code> (in case a \"before\" event is required: <code>[After]ProductListingFetchEvent</code>) <code>[Post]ProductListingFetchEvent</code> (in case a \"before\" event is required: <code>[Pre]ProductListingFetchEvent</code>)</p> <p>We have to chose one of the event names for that.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#product_listingshippingrange-object-similarity-to-old-implementation","title":"product_listing.shipping.range object similarity to old implementation","text":"<p>In the product listing model, the <code>item.shipping.range</code> object is implemented like previously in <code>products_ORIGIN</code>. We should discuss how and where it is used and if this structure makes sense at all.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#product-options-variants","title":"Product Options, Variants","text":"<p>Discuss with other team members which are the most needed &amp; useful to include and not provided in the current product listing.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#preparation","title":"Preparation","text":"<ul> <li> <p>collect data schema for Options (product variants, options, downloads)</p> </li> <li> <p>For what those columns is used?</p> <ul> <li><code>products.products_ordered</code></li> <li><code>products.group_ids</code></li> </ul> </li> </ul> <p>Is <code>products.products_weight</code> always in Kilo Gram?</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#notes","title":"Notes","text":"<p>We may remove the following data from the product listing item model:</p> <ul> <li><code>PRODUCTS_IMAGE_W</code></li> <li><code>PRODUCTS_IMAGE_H</code></li> <li><code>PRODUCTS_IMAGE_WIDTH</code></li> <li><code>PRODUCTS_IMAGE_PADDING</code></li> <li><code>PRODUCTS_BUTTON_BUY_NOW</code></li> </ul> <p>We are aware that there are some inconsistencies between e.g. type names and documentation. Those inconsistencies will be cleaned up after the documents core concepts have been discussed</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#service-api","title":"Service API","text":"<p>The listing service API has only one method:</p> <pre><code>use Gambio\\Shop\\Sample\\ProductListing\\Services\\ListingFilter;\nuse Gambio\\Shop\\Sample\\ProductListing\\Services\\ListingItemCollection;\nuse Gambio\\Shop\\Sample\\ProductListing\\Services\\ListingPagination;\n\npublic function getListing(\n    ListingFilter $filter, \n    ListingPagination $pagination\n): ListingItemCollection;\n</code></pre> <p>The two arguments control the behaviour of the listing. The first one, <code>ListingFilter $filter</code>, controls which products appear in the final listing. For example, there could be a filter called \"<code>UpcomingProductsFilter</code>\", and when using it, only products that will be published in the future will be displayed.</p> <p>The second one, <code>ListingPagination $pagination</code>, is used to divide the result into pages and to add further metadata, such as the total number of results found with the filter and the maximum page, based on the value of the items to be displayed per page.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#filter","title":"Filter","text":"<p>The listings filter responsibility is to produce a list of product ids. It is up to the implementor how to produce that list. It is also recommendable to implement some kind caching mechanism to provide fast access the listing ids.</p> <pre><code>use Gambio\\Shop\\Sample\\ProductListing\\Services\\ListingItemIdCollection;\n\npublic function getFilterIds(): ListingItemIdCollection;\n</code></pre> <p>The list of item ids can be of any size. Another mechanism is responsible to create pagination data for the listing.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#pagination","title":"Pagination","text":"<p>The pagination takes two inputs:</p> <ul> <li><code>int $page</code>: Current page of listing items. If <code>$page</code> &lt;= 0, it is automatically set to the value <code>1</code>.</li> <li><code>int $perPage</code>: Count of listing items per page. If <code>$page</code> &lt;= 0, it is automatically set to the value <code>1</code>.</li> </ul> <p>The pagination has the responsibility to limit the result set and provide an offset in order to divide the items into pages. Also, additional metadata for the whole result set is produces, namely <code>int $total</code> and <code>int $maxPage</code>.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#todo-registerextender","title":"Todo: ::registerExtender","text":""},{"location":"framework/business-components/work-in-progress/product-listing/planning/#example","title":"Example","text":"<pre><code>/** @var Gambio\\Shop\\Sample\\ProductListing\\Services\\ListingService $service **/\n\n$productListing = $service-&gt;getListing($filter, $pagination);\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#extendability","title":"Extendability","text":""},{"location":"framework/business-components/work-in-progress/product-listing/planning/#listing","title":"Listing","text":"<p>There are three methods to write additional data into the listing items structure:</p> <ul> <li><code>extendItem</code>: Adds additional data to listing item by identifier</li> <li><code>extendItems</code>: Adds additional data to listing items by identifiers</li> <li><code>extendList</code> Adds additional data to all listing items</li> </ul> <p>All of them take <code>$namespace</code> and <code>$payload</code> as argument to add additional product information. The other argument might be used to only modify specific listing items.</p> <p>This approach only adds data to the listing, but is not able to modify/change any of the existing data</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#extending-listing-item-collection","title":"Extending listing item collection","text":"<p>There are two ways to extend the listing items, depending on your use case.</p> <p>Both solutions are capable to extend all listings or dedicated ones.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#events","title":"Events","text":"<p>One possible approach is using events everywhere. So we could fire an event which is dispatched for all listings and therefore can be used to extend any product listing type. Also, the filter can define an optional event which will be dispatched only for that specific listing type.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#sample","title":"Sample","text":"<p>When using events, the event class must somehow expose whether the items itself or must provide some kind of access to the ListingItems \"modification\" methods (<code>::extendItem</code>, <code>::extendItems</code>, <code>::extendList</code>).</p> <pre><code>class ListingEvent\n{\n    private ListingItems $items;\n\n    public function __construct(ListingItems $items)\n    {\n        $this-&gt;items = $items;\n    }\n}\n\nclass ListingEventListener\n{\n    public function __invoke(ListingEvent $event): ListingEvent\n    {\n        // Do something with event\n        return $event;\n    }\n}\n</code></pre> <p>The drawback of events is that the event class have to define an additional api to access te internal listing. On the other hand, combining events with filters provides a very simple solution to extend per listing.</p>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#extender","title":"Extender","text":"<p>Another approach are listing extenders. They are executed for all listings. Extenders get the listing items and filter as an argument and are self-responsible to decide if they should extend the current list.</p> <p>The extender way, for example, has direct access to the listing items and can therefore call directly the modification methods. Also, any other methods of the listing items are accessible.</p> <pre><code>public function extend(ListingItems $listingItems, ListingFilter $filter): void;\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/planning/#product-item-level","title":"Product Item Level","text":"<p>There is an event that will be dispatched after the core collects all product listing items. The event provides an API to extend the internal listing items.</p> <p><code>public function extendItem(ProductListingId $productListingId, string $namespace, $additionalData): void</code></p> <ul> <li><code>ProductListingId $productListingId</code>: Identifies which listing item will be extended</li> <li><code>string $namespace</code>: Unique namespace which will be applied in the \"additionalData\" block</li> <li><code>mixed $additionalData</code>: Data which is added in the used namespace of \"additionalData\"</li> </ul> <p>NOTE: The argument <code>$namespace</code> MUST be unique! Using the same namespace twice overrides any existing data.</p> <p>Attaching additional data to product listing items can be done by using the events API method:</p> <pre><code>$productListingItemId = ProductListingItemId::fromInt(1);\n\n$event-&gt;extendItem($productListingItemId, 'additional_data_null', null);\n$event-&gt;extendItem($productListingItemId, 'additional_data_bool', random_int(1, 2) === 1);\n$event-&gt;extendItem($productListingItemId, 'additional_data_int', 123);\n$event-&gt;extendItem($productListingItemId, 'additional_data_float', 1.23);\n$event-&gt;extendItem($productListingItemId, 'additional_data_string', 'string data');\n$event-&gt;extendItem($productListingItemId, 'additional_data_array', ['foo' =&gt; 42, 'bar' =&gt; ['key' =&gt; 'value']]);\n</code></pre> <p>The example above would result in an <code>additionalData</code> structure for the listing item with id 1 like here:</p> <p>```json lines {     \"id\": 1,     // ...     \"additionalData\": {         \"additional_data_null\": null,         \"additional_data_bool\": false,         \"additional_data_int\": 123,         \"additional_data_float\": 1.23,         \"additional_data_string\": \"string data\",         \"additional_data_array\": {             \"foo\": 42,             \"bar\": {                 \"key\": \"value\"             }         }     }, }</p> <pre><code>\n&gt; NOTE: Only listing items with matching id are affected\n\n### Example event listener for product listings\n\nThis event listener simulates a module which functionality is to provide cross product graduated prices. Cross products\ngraduated prices are e.g. if you can choose between 10 different T-Shirts and the price of one unit is 10 \u20ac, five unit 8\n\u20ac (per unit) and at ten units for 5 \u20ac (per unit) for example.\n\nThe module somehow checks if listing items are affected by cross product graduated prices and if yes, the graduated\nprice for that item has to be determined somehow, and finally must be attached to the product listing data structure.\n\nA \"real world\" module would usually inject other components in the event listener (via service provider) to provide the\nfunctionality for cross product graduated prices. In this example, we choose to simply \"fake\" the implementation.\n\n```php\n// ...\nclass CrossProductGraduatedPricesEventListener\n{\n    private const ADDITIONAL_DATA_NAMESPACE = 'gx_cross_product_graduated_prices';\n\n    private const SAMPLE_PRODUCT_IDS = [\n        1,\n        // ..\n    ];\n\n    private const SAMPLE_GRADUATED_PRICES = [\n        [\n            'quantity' =&gt; 1,\n            'price'    =&gt; 99.99,\n        ],\n        // ...\n    ];\n\n\n    public function __invoke(ProductListingItemsCollectedEvent $event): ProductListingItemsCollectedEvent\n    {\n        $productListingIds = $event-&gt;getListingItemIds();\n\n        foreach ($productListingIds as $productListingId) {\n            if ($this-&gt;hasCrossProductGraduatedPrices($productListingId)) {\n                $event-&gt;extendItem(\n                    ProductListingItemId::fromInt($productListingId),\n                    static::ADDITIONAL_DATA_NAMESPACE,\n                    static::SAMPLE_GRADUATED_PRICES\n                );\n            }\n        }\n\n        return $event;\n    }\n\n\n    private function hasCrossProductGraduatedPrices(int $productListingId): bool\n    {\n        return in_array($productListingId, static::SAMPLE_PRODUCT_IDS, true);\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/","title":"Listing item price struct and formatting","text":""},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#flow","title":"Flow","text":"<p>if special is available, only the special attribute will be available (on all cases)</p> <p>if product has personal offer and discount, the discount formatting is used (based on personal offer price)</p> <p>if product has personal offer and no discount, an extra attribute for personal will be added</p> <p>if it is just a simple price, the normal price struct without any extra fields is used</p>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#examples","title":"Examples","text":""},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#listing-price-price-struct-fields","title":"listing price price struct fields","text":""},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#without-additional-attributes","title":"without additional attributes","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 19.99,\n        \"formatted\": \"19.99 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#with-special-offer","title":"with special offer","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 19.99,\n        \"formatted\": \"19.99 EUR\",\n        \"special\": {\n            \"normalPrice\": 25.99,\n            \"formatted\": \"UVP 25.99 EUR\"\n        }\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#personal-offer-and-discount","title":"personal offer and discount","text":"<p>Note: <code>price.discount.previousPrice</code> is based on the personal offer</p> <p>Consideration: use <code>price.personalOffer</code> instead of <code>price.discount.previousPrice</code>. Pro: struct exposes availability of personal offer | Contra: Less descriptive and the information that personal offer is available might not be useful</p> <p>IMO, we should use <code>price.discount.previousPrice</code>, because listings with personal offer never show normal price (at least in <code>xtcPrice::xtcGetPrice</code>). See  <code>example.personalOffer</code></p> <pre><code>{\n    \"price\": {\n        \"finalPrice\": 30.49,\n        \"formatted\": \"Ihr Preis ab 30,49 EUR\",\n        \"discount\": {\n            \"previousPrice\": {\n                \"value\": 31.99,\n                \"formatted\": \"Unser Normalpreis 31,99 EUR\"\n            },\n            \"saving\": {\n                \"percentage\": 4.69,\n                \"formatted\": \"Sie sparen 4,69%\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#discount","title":"discount","text":"<p>Note: <code>price.discount.previousPrice</code> is based on the price</p> <pre><code>{\n    \"price\": {\n        \"finalPrice\": 30.49,\n        \"formatted\": \"Ihr Preis ab 30,49 EUR\",\n        \"discount\": {\n            \"previousPrice\": {\n                \"value\": 31.99,\n                \"formatted\": \"Unser Normalpreis 31,99 EUR\"\n            },\n            \"saving\": {\n                \"percentage\": 4.69,\n                \"formatted\": \"Sie sparen 4,69%\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#personal-offer","title":"personal offer","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"Ihr Preis 9.95 EUR\",\n        \"personalOffer\": {\n            \"normalPrice\": 19.99,\n            \"formatted\": \"Unser Normalpreis 19,99 EUR\"\n        }\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#listing-item-pricevalueformatted-variations","title":"listing item <code>price.value.formatted</code> variations","text":""},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#standard","title":"standard","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"9.95 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#special","title":"special","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"Nur 9.95 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#special-with-variant","title":"special with variant","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"Ab nur 9.95 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#personal-offer-discount-and-both","title":"personal offer, discount and both","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"Ihr Preis 9.95 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/business-components/work-in-progress/product-listing/price_notices/#personal-offer-discount-and-both-with-variant","title":"personal offer, discount and both with variant","text":"<pre><code>{\n    \"price\": {\n        \"finalPrice\": 9.95,\n        \"formatted\": \"Ihr Preis ab 9.95 EUR\"\n    }\n}\n</code></pre>"},{"location":"framework/details/application-layers/","title":"Application Layers","text":"<p>In software development an application is divided into separate layers, which represent different parts of functionality. The new Application Core can also be separated into layers like it's shown in the picture below:</p> <p></p>"},{"location":"framework/details/application-layers/#framework-infrastructure","title":"Framework / Infrastructure","text":"<p>The framework or infrastructure layer includes general tools and components to execute the shop software. It contains no specific business logic and can't tell you anything about the exact functionality of its software. This layer will include elements handling incoming HTTP requests, logging, sessions, or the database connection.</p>"},{"location":"framework/details/application-layers/#application-core","title":"Application Core","text":"<p>Deeper in the Application Core layer, the components execute certain main functionalities of the application. The tasks performed here are still very technical and far away from specific business rules. Parts of this layer are controllers or actions for the incoming HTTP requests, application services, or database readers and writers.</p>"},{"location":"framework/details/application-layers/#use-cases-domain-services","title":"Use Cases / Domain Services","text":"<p>The (Domain-driven design) domain starts with the layer for use cases. The entirety of domains shows what this application is about; therefore, this layer provides information about the use cases and possibilities of interacting with these domains. Domain services, interfaces of repositories and factories are typical components of this layer.</p>"},{"location":"framework/details/application-layers/#domain-model","title":"Domain Model","text":"<p>When using Domain-driven design, the model is a fundamental part of the software because it contains the business logic of the whole software. This is also less volatile than the outer parts of the software. The components of this layer are entities, value objects, events and the aggregate root.</p>"},{"location":"framework/details/autoloading/","title":"Autoloading and Namespaces","text":"<p>The PHP Standard Recommendation #4 (PSR-4 for short) describes a methodology that allows the application to find classes without having to include them manually. We use Composer to provide this kind of feature.</p> <p>Using the PSR-4, the namespace of a PHP class determines the location of the file. Namespaces can be assigned to a folder and requested classes within these namespaces are included using this folder.</p> <p>The shops autoloader automatically assigns the <code>GXModules</code> directory to the GXModules root namespace. If we now give the namespace path the name as the directory structure, the shop system will automatically find the containing classes.</p> <p>Examples:</p> Namespace Path to the class/file GXModules\\... src/GXModules/... GXModules\\Vendor\\Library\\SomeClass src/GXModules/Vendor/Library/SomeClass.php GXModules\\Vendor\\Library\\Services\\MyService src/GXModules/Vendor/Library/Services/MyService.php"},{"location":"framework/details/di-container/","title":"Dependency Injection Container","text":"<p>The Application Core (complete namespace <code>Gambio\\Core\\Application\\Application</code>) acts as a dependency injection container (DI container, or sometimes Dependency Container) and therefore one of its tasks is to provide all components and services. From a technical point of view this corresponds to the implementation of an Inversion of Control Container (IoC Container for short) and follows the PHP standard PSR-11.</p> <p>The following sections explain the terms Dependency Injection, Inversion and Inversion of control containers and their use in development.</p> <p>What is an Inversion of Control Container?</p> <p>The SOLID Principles are rules that should lead to a good object-oriented design. The fifth principle (Dependency Inversion Principle) deals with the topic Dependency Injection and the reduction of couplings between classes and objects.</p>"},{"location":"framework/details/di-container/#dependency-injection","title":"Dependency Injection","text":"<p>Dependency Injection means that constructors and methods of classes never directly instantiate new classes but the dependencies of the respective classes will be defined and passed to them as function parameters.</p> <p>Wrong:</p> <pre><code>class MyClass\n{\n    private $dependency;\n\n    public function __construct() \n    {\n        // Here is the mistake! \"Dependency\" should be provided as a parameter and new be created with \"new\".\n        $this-&gt;dependency = new Dependency();\n    }\n\n    public function method(): void\n    {\n        // Same mistake as above.\n        $otherDependency = new OtherDependency();\n\n        $this-&gt;dependency-&gt;doSomething($otherDependency);\n    }\n\n    ...\n}\n</code></pre> <p>Correct:</p> <pre><code>class MyClass\n{\n    private $dependency;\n\n    // The dependency is provided as a parameter and initialed as a class attribute.\n    public function __construct(Dependency $dependency) \n    {\n        $this-&gt;dependency = $dependency;\n    }\n\n    // The dependency is also provided as a parameter but because it will only be used in this method it's not\n    // initialed as a class attribute.\n    public function method(OtherDependency $otherDependency): void\n    {\n        $this-&gt;dependency-&gt;doSomething($otherDependency);\n    }\n\n    ...\n}\n</code></pre> <p>This makes it much easier to create Unit Tests for these classes, which significantly reduces the error-proneness of the system. But why does following the Dependency Injection pattern make it easier to write unit tests?</p> <p>In unit tests, dependencies can easily be faked. This means that instead of passing an object to the concrete class, you pass a so-called dummy object that fulfills the requirements of the method signatures (so that PHP does not trigger an error). The test then only checks the interaction between the class under test and the dependency.</p> <p>Another advantage of the design pattern is that it significantly reduces the codes complexity. Classes generally depend on other classes. In the example above neither <code>Dependency</code> nor <code>OtherDependency</code> had a constructor parameter. But this is rarely the case because a lot of classes usually have additional dependencies, which `MyClass' would have to know.</p> <p>With the Dependency Injection Principle, the dependency is defined in the constructor or a method and can then interact with it in the code. The dependencies of this class can be recognized directly from methods (unlike the example with <code>MyClass</code>)  or the method signature of the constructor. The objects are usually created and passed externally in factory classes.</p> <p>The Dependency Injection design pattern makes it much easier to comply with the first SOLID principle (Single Responsibility). The advantages mentioned above are a nice side effect.</p>"},{"location":"framework/details/di-container/#dependency-inversion","title":"Dependency Inversion","text":"<p>Dependency Injection and Inversion can easily be confused by the wording. Dependency Inversion means that abstract classes or even better interfaces are used to define dependencies rather than concrete classes. This reduces the coupling between classes even further and makes it easier to exchange implementations.</p>"},{"location":"framework/details/di-container/#inversion-of-control-container","title":"Inversion of control container","text":"<p>Now we know what the terms Dependency Injection and Inversion mean. But what is the Inversion of Control container?</p> <p>The task of the IoC container is to provide all service classes, whereas the task of the shop system is to answer incoming HTTP requests using these service classes.</p> <p>Answering incoming HTTP requests works, roughly speaking, by assigning a function to a URL. A controller class for example, can provide several of these functions in the form of methods. Another mechanism recognizes the URL of the incoming HTTP request and then executes the desired function.</p> <p>In the best case, one or more service classes have now been injected into the controller via the constructor. Therefor all of the Clean Code principles are adhered and we can now use the service to execute complex functionalities.</p> <p>This is where the Inversion of control container or our <code>Application</code> class comes in. Its task is to provide all services for the shop system.</p> <p>When the shop application initializes, all Service Providers are loaded. Within the Service Provider several dependencies of the service will be defined. Only when a particular service has been requested by the container, it starts the initialization for this service and returns it.</p>"},{"location":"framework/details/di-container/#legacy-di-container","title":"Legacy DI Container","text":"<p>To ensure that the new core components and services can not only be used via the new Application Core, we have provided an interface in the form of an additional DI Container (similar to the <code>Application</code> class).</p> <p>The class <code>LegacyDependencyContainer</code> can be called globally in the old application kernel and serves as Service Locator.</p> <p>If you now want to request e.g. the new <code>ConfigurationService</code> by using the <code>LegacyDependencyContainer</code>, this could be done like this:</p> <pre><code>// Imaging this code belongs to the file\n// GXModules/Vendor/Library/Shop/Overloads/BestsellerBoxContentView/MyBestsellerBoxOverload.php\n\nuse Gambio\\Admin\\Configuration\\ConfigurationService;\n\nclass MyBestsellerBoxOverload extends MyBestsellerBoxOverload_parent\n{\n    public function prepare_data()\n    {\n        parent::prepare_data();\n        $service = LegacyDependencyContainer::getInstance()-&gt;get(ConfigurationService::class);\n\n        // now you can use the configuration service\n    }\n}\n</code></pre>"},{"location":"framework/details/service-provider/","title":"Service Providers","text":"<p>Service Providers are an essential part of the Application Core and their task is to manage and provide the components and services of the application.</p> <p>A Service Provider usually defines two things. First, it contains information about which service can be requested from the DI Container and second, it defines the interfaces and dependencies of the service classes.</p> <p>When implementing a Service Provider, ensure that they either inherit from <code>Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleServiceProvider</code> or <code>Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider</code>.</p>"},{"location":"framework/details/service-provider/#available-services-and-classes","title":"Available services and classes","text":"<p>The method <code>provides</code> defines which services or classes can later be requested via the DI Container. Internal components used by the services don't have to be mentioned in the <code>provides</code> method, which also means they won't be available from outside of the Service Provider. </p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleServiceProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\MyService;\n\n/**\n * Class SampleServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleServiceProvider extends AbstractModuleServiceProvider\n{\n    /**\n     * @inheritDoc\n     */\n    public function provides(): array\n    {\n        return [\n            MyService::class,\n        ];\n    }\n\n    ...\n}\n</code></pre> <p>Notice</p> <p>Minding the PSR-4 namespace, this <code>SampleServiceProvider</code> would be located at <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/SampleServiceProvider.php</code> inside the file structure of the shop. It's also possible to change the location of this file, which would also change the namespace.</p>"},{"location":"framework/details/service-provider/#register-services-and-classes","title":"Register services and classes","text":"<p>In the `register' method, we add the service or classes and all required components to the DI Container.</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Doctrine\\DBAL\\Connection;\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleServiceProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\MyService;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\MyServiceImplementation;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\MyServiceDependency;\n\n/**\n * Class SampleServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleServiceProvider extends AbstractModuleServiceProvider\n{\n    /**\n     * @inheritDoc\n     */\n    public function provides(): array\n    {\n        return [\n            MyService::class,\n        ];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function register(): void\n    {\n        $this-&gt;application-&gt;registerShared(MyService::class, MyServiceImplementation::class)\n             -&gt;addArgument(MyServiceDependency::class);\n\n        $this-&gt;application-&gt;registerShared(MyServiceDependency::class)\n             -&gt;addArgument(Connection::class);\n    }\n}\n</code></pre> <p>Notice</p> <p>Minding the PSR-4 namespace, this <code>SampleServiceProvider</code> would be located at <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/SampleServiceProvider.php</code> inside the file structure of the shop. It's also possible to change the location of this file, which would also change the namespace.</p>"},{"location":"framework/details/service-provider/#bootable-service-provider","title":"Bootable Service Provider","text":"<p>You can also mark a Service Provider as bootable by inheriting from <code>AbstractModuleBootableServiceProvider</code>. Bootable means that you can implement another method called <code>boot</code>, which is executed when the Service Provider has been added to the DI Container.</p> <p>The boot method is important for the defined interfaces between your module and the shop software. For instance, registering specific components to their managing aggregates and services. For these cases you need to use the <code>inflect</code> method to tell certain system components, that your module specific components needs to be considered, in case these system components do something important. A good example for this might be the registration of event listeners by using inflections.</p> <pre><code>use Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider;\nuse Gambio\\Core\\Event\\EventListenerProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\...\\SampleEvent;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\...\\SampleEventLister;\n\n/**\n * Class BootableSampleServiceProvider\n */\nclass BootableSampleServiceProvider extends AbstractModuleBootableServiceProvider\n{\n    ...\n\n    /**\n     * @inheritDoc\n     */\n    public function boot(): void\n    {\n        // this code will be executed as soon as the Service Provider will be registered to the DI Container\n\n        // the following lines are an example of how to register an event lister using inflections\n        $this-&gt;application-&gt;inflect(EventListenerProvider::class)\n             -&gt;invokeMethod('attachListener', [SampleEvent::class, SampleEventLister::class])\n    }\n}\n</code></pre> <p>Notice</p> <p>Minding the PSR-4 namespace, this <code>SampleServiceProvider</code> would be located at <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/BootableSampleServiceProvider.php</code> inside the file structure of the shop. It's also possible to change the location of this file, which would also change the namespace.</p>"},{"location":"framework/technical-components/","title":"All available technical-related components","text":"<p>Using the DI Container, it's possible to request and use several services and components. The following list shows all the available technical ones and their interfaces, which can be requested through the DI Container or Legacy DI Container.</p> <p>Notice</p> <p>Please have in mind, that you can find the public API (public methods etc.) of a service following the namespace of this service and opening the corresponding PHP file.</p> <p>Available components:</p> <ul> <li> <p><code>Doctrine\\DBAL\\Connection</code>: Doctrine DBAL class for database interactions.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\Environment</code>:   Provides information about the environment mode of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\Path</code>:   Provides information about the file server paths of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\Server</code>:   Provides information about the server of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\ServerInformation</code>:   Provides information about the server of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\Url</code>:   Provides information about the URLs of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Application\\ValueObjects\\UserPreferences</code>:   Provides information about the user of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Auth\\JsonWebTokenAuthenticator</code>:   Authenticates an admin based on a given JSON web token.</p> </li> <li> <p><code>Gambio\\Core\\Auth\\UserAuthenticator</code>:   Authenticates an admin based on a given user email address and password.</p> </li> <li> <p><code>Gambio\\Core\\Cache\\CacheFactory</code>:   Factory to create a file based data cache.</p> </li> <li> <p><code>Gambio\\Core\\Command\\Interfaces\\CommandDispatcher</code>:   Dispatches any given command to the handlers, that had been registered for this command.</p> </li> <li> <p><code>Gambio\\Core\\Configuration\\ConfigurationFinder</code>:   Simple service class to fetch configuration values based on a configuration key.</p> </li> <li> <p><code>Gambio\\Core\\Configuration\\ConfigurationService</code>:   A more complex and powerful service class to for shop configurations.</p> </li> <li> <p><code>Gambio\\Core\\Language\\LanguageService</code>:   Provides available or specific languages of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Language\\TextManager</code>:   Provides available or specific text phrases of the shop.</p> </li> <li> <p><code>Gambio\\Core\\Logging\\LoggerBuilder</code>:   Factory to create a logger.</p> </li> <li> <p><code>Psr\\EventDispatcher\\EventDispatcherInterface</code>:   Dispatches any given event to the handlers, that had been registered for this event.</p> </li> </ul>"},{"location":"framework/technical-components/authentication/","title":"Authentication","text":"<p>Authentication is an important part of the shop software. There are two ways of authenticate a user (normal customer or admin):</p> <ol> <li>Authentication by email address and password using the <code>UserAuthenticator</code> service</li> <li>Authentication by a JSON web token using the <code>JsonWebTokenAuthenticator</code> service</li> </ol>"},{"location":"framework/technical-components/authentication/#userauthenticator-service","title":"<code>UserAuthenticator</code> service","text":"<p>The <code>Gambio\\Core\\Auth\\UserAuthenticator</code> service is used in most cases, e.g. the login page or REST API. Besides the authentication of a user, this services provides the functionality to change the password of a user, or to generate a request key if the user has forgotten his password.</p>"},{"location":"framework/technical-components/authentication/#authenticate-a-user","title":"Authenticate a user","text":"<p>The <code>UserAuthenticator</code> provides a simple <code>authentication</code> method, which expects a user's email address and password. The method returns a <code>Gambio\\Core\\Auth\\UserId</code> object, which provides a <code>userId</code> method that returns the ID of the authenticated user.</p> <p>If the user can't be authenticated, a <code>Gambio\\Core\\Auth\\Exceptions\\AuthenticationException</code> exception will be thrown.</p> <p>The following example shows how you could use this service:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Auth\\UserAuthenticator;\nuse Gambio\\Core\\Auth\\Exceptions\\AuthenticationException;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var UserAuthenticator \n     */\n    private $authenticator;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param UserAuthenticator $authenticator\n     */\n    public function __construct(UserAuthenticator $authenticator)\n    {\n        $this-&gt;authenticator = $authenticator;\n    }\n\n\n    /**\n     * @param string $email\n     * @param string $password\n     *\n     * @return int\n     */\n    public function checkUserCredentials(string $email, string $password): int\n    {\n        try {\n            $userId = $this-&gt;authenticator-&gt;authenticate($email, $password);\n\n            return $userId-&gt;userId();\n        } catch (AuthenticationException $exception) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/authentication/#work-in-progress-update-user-password","title":"Work in progress - Update user password","text":"<p>As said, the service also provides the possibility to update a users' password.</p> <p>The following example shows how you could use this service:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Auth\\UserAuthenticator;\nuse Gambio\\Core\\Auth\\UserId;\nuse Gambio\\Core\\Auth\\Exceptions\\UserNotFound;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var UserAuthenticator \n     */\n    private $authenticator;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param UserAuthenticator $authenticator\n     */\n    public function __construct(UserAuthenticator $authenticator)\n    {\n        $this-&gt;authenticator = $authenticator;\n    }\n\n\n    /**\n     * @param int    $userId\n     * @param string $newPassword\n     *\n     * @return bool\n     */\n    public function updateUserCredentials(int $userId, string $newPassword): bool\n    {\n        try {\n            $this-&gt;authenticator-&gt;updateUserPassword($userId, $newPassword);\n\n            return true;\n        } catch (UserNotFound $exception) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/authentication/#work-in-progress-generate-request-key","title":"Work in progress - Generate request key","text":"<p>If a user forgot his password, it's possible to create a request key to change the password.</p> <p>The following example shows how you could use this service:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Auth\\UserAuthenticator;\nuse Gambio\\Core\\Auth\\UserId;\nuse Gambio\\Core\\Auth\\Exceptions\\UserNotFound;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var UserAuthenticator \n     */\n    private $authenticator;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param UserAuthenticator $authenticator\n     */\n    public function __construct(UserAuthenticator $authenticator)\n    {\n        $this-&gt;authenticator = $authenticator;\n    }\n\n\n    /**\n     * @param int $userId\n     *\n     * @return string|null\n     */\n    public function updateUserCredentials(int $userId): ?string\n    {\n        try {\n            return $this-&gt;authenticator-&gt;generateRequestKey($userId, $newPassword);\n        } catch (UserNotFound $exception) {\n            return null;\n        }\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/authentication/#password-hashes","title":"Password hashes","text":"<p>Since the user's passwords are only available in the database as hashes, the validation of the passwords is based on implementations of the <code>Gambio\\Core\\Auth\\HashStrategy</code> interface, for which there are currently two implementations:</p> <ol> <li><code>Gambio\\Core\\Auth\\HashStrategies\\Md5HashStrategy</code> creates and validates password hashes using MD5</li> <li><code>Gambio\\Core\\Auth\\HashStrategies\\PhpNativeHashStrategy</code> creates and validates password hashes using the    PHP native functions <code>password_hash</code> and <code>password_verify</code>. This strategy is used primarly.</li> </ol>"},{"location":"framework/technical-components/authentication/#jsonwebtokenauthenticator-service","title":"<code>JsonWebTokenAuthenticator</code> service","text":"<p>The <code>JsonWebTokenAuthenticator</code> provides a simple <code>authenticate</code> method, which expects a JSON web token. The method returns a <code>Gambio\\Core\\Auth\\UserId</code> object, which provides a <code>userId</code> method, that returns the ID of the authenticated user.</p> <p>If the user can't be authenticated, a <code>Gambio\\Core\\Auth\\Exceptions\\AuthenticationException</code> exception will be thrown.</p> <p>The following example shows how you could use this service:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Auth\\JsonWebTokenAuthenticator;\nuse Gambio\\Core\\Auth\\Exceptions\\AuthenticationException;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var JsonWebTokenAuthenticator\n     */\n    private $authenticator;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param JsonWebTokenAuthenticator $authenticator\n     */\n    public function __construct(JsonWebTokenAuthenticator $authenticator)\n    {\n        $this-&gt;authenticator = $authenticator;\n    }\n\n\n    /**\n     * @param string $token\n     *\n     * @return int\n     */\n    public function checkUserCredentials(string $token): int\n    {\n        try {\n            $userId = $this-&gt;authenticator-&gt;authenticate($token);\n\n            return $userId-&gt;userId();\n        } catch (AuthenticationException $exception) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/cache/","title":"Cache","text":"<p>Caching is an important thing in software development. Therefore, we provide several services that provide all needed functionalities around this topic.</p>"},{"location":"framework/technical-components/cache/#creating-and-using-a-cache","title":"Creating and using a cache","text":"<p>To cache data for a certain time, we provide the <code>Gambio\\Core\\Cache\\CacheFactory</code>. This factory can be used to create a file-based data cache that is based on PSR-16 (<code>Psr\\SimpleCache\\CacheInterface</code>) or a simpler one that catches and handles the <code>InvalidArgumentException</code> exceptions of the PSR.</p> <p>The file-based data cache provides the querying, adding and deleting of single and multiple caches. In addition, a so-called time-to-life can be defined for a cache, after which the cache automatically expires. The cached data is stored in the <code>cache</code> folder of the main directory, where the chosen namespace serves as prefix for the cache files.</p> <p>The following example shows how you could use the factory to create these both caches:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Cache\\Services\\CacheFactory;\nuse Psr\\SimpleCache\\CacheInterface;\nuse Psr\\SimpleCache\\InvalidArgumentException;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var CacheInterface\n     */\n    private $safeCache;\n\n    /**\n     * @var CacheInterface\n     */\n    private $psrCache;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param CacheFactory $cacheFactory\n     */\n    public function __construct(CacheFactory $cacheFactory)\n    {\n        $this-&gt;safeCache = $cacheFactory-&gt;createCacheFor('sample-cache-namespace');\n        $this-&gt;psrCache  = $cacheFactory-&gt;createPsrCacheFor('another-sample-cache-namespace');\n    }\n\n\n    /**\n     * @return mixed\n     */\n    public function getMyCache()\n    {\n        return $this-&gt;safeCache-&gt;get('my-cache', 'some-default-value');\n    }\n\n\n    /**\n     * @return mixed\n     */\n    public function getMyCacheWithPsr()\n    {\n        try {\n            return $this-&gt;psrCache-&gt;get('my-cache', 'some-default-value');\n        } catch (InvalidArgumentException $e) {\n            return 'some-default-value';\n        }\n    }\n\n\n    /**\n     * @return array\n     */\n    public function getMultipleCaches(): array\n    {\n        return $this-&gt;safeCache-&gt;getMultiple(['my-cache', 'my-second-cache'], 'some-default-value');\n    }\n\n\n    /**\n     * @return array\n     */\n    public function getMultipleCachesWithPsr(): array\n    {\n        try {\n            return $this-&gt;psrCache-&gt;getMultiple(['my-cache', 'my-second-cache'], 'some-default-value');\n        } catch (InvalidArgumentException $e) {\n            return [];\n        }\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function setMyCache(): bool\n    {\n        return $this-&gt;safeCache-&gt;set('my-cache', 'some-value', 60 * 60 * 24);\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function setMyCacheWithPsr(): bool\n    {\n        try {\n            return $this-&gt;psrCache-&gt;set('my-cache', 'some-value', 60 * 60 * 24);\n        } catch (InvalidArgumentException $e) {\n            return false;\n        }\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function setMultipleCaches(): bool\n    {\n        return $this-&gt;safeCache-&gt;setMultiple([\n                                      'my-cache'        =&gt; 'some-value',\n                                      'my-second-cache' =&gt; 'some-other-value'\n                                  ],\n                                  60 * 60 * 24);\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function setMultipleCachesWithPsr(): bool\n    {\n        try {\n            return $this-&gt;psrCache-&gt;setMultiple([\n                                          'my-cache'        =&gt; 'some-value',\n                                          'my-second-cache' =&gt; 'some-other-value'\n                                      ],\n                                      60 * 60 * 24);\n        } catch (InvalidArgumentException $e) {\n            return false;\n        }\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function deleteMyCache(): bool\n    {\n        return $this-&gt;safeCache-&gt;delete('my-cache');\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function deleteMyCachePsr(): bool\n    {\n        try {\n            return $this-&gt;psrCache-&gt;delete('my-cache');\n        } catch (InvalidArgumentException $e) {\n            return false;\n        }\n    }\n\n\n    /**\n     * @return array\n     */\n    public function deleteMultipleCaches(): bool\n    {\n        return $this-&gt;safeCache-&gt;deleteMultiple(['my-cache', 'my-second-cache']);\n    }\n\n\n    /**\n     * @return array\n     */\n    public function deleteMultipleCachesPsr(): bool\n    {\n        try {\n            return $this-&gt;psrCache-&gt;deleteMultiple(['my-cache', 'my-second-cache']);\n        } catch (InvalidArgumentException $e) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p> <p>Recommendation</p> <p>We recommend you to use the <code>createCacheFor</code> method and <code>SafeCache</code> class for a more straightforward use.</p>"},{"location":"framework/technical-components/cache/#clearing-caches","title":"Clearing caches","text":"<p>To always have an overview of all existing caches and grouping them can be pretty hard. So we implemented the <code>Gambio\\Core\\Cache\\Services\\ClearCacheService</code> service, which allows clearing caches for specific usages. Furthermore, it's possible to add your cache namespaces, so that they will also be cleared, if the group the namespace was added to, will be removed.</p> <p>We currently separate our caches into 5 groups:</p> <ol> <li>Module: Contains caches that are relevant for the general usage of modules.</li> <li>Product: Contains caches that handle product specific data.</li> <li>System: Contains caches that are relevant for the general usage of the shop software.</li> <li>Template: Contains caches that handle template and theme specific data.</li> <li>Text: Contains caches that handle text phrases and language specific data.</li> </ol> <p>The following example shows you how to add your cache namespace to one of the pre-defined groups:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider;\nuse Gambio\\Core\\Cache\\Services\\ClearCacheService;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\\SomeEventListener;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class MyBootableServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass MyBootableServiceProvider extends AbstractModuleBootableServiceProvider\n{\n    //...\n\n    /**\n     * @inheritDoc\n     */\n    public function boot(): void\n    {\n        $this-&gt;application-&gt;inflect(ClearCacheService::class)\n                          -&gt;invokeMethod('addNamespaceToModuleCaches', ['your_module_cache']);\n        $this-&gt;application-&gt;inflect(ClearCacheService::class)\n                          -&gt;invokeMethod('addNamespaceToProductCaches', ['your_product_cache']);\n        $this-&gt;application-&gt;inflect(ClearCacheService::class)\n                          -&gt;invokeMethod('addNamespaceToSystemCaches', ['your_system_cache']);\n        $this-&gt;application-&gt;inflect(ClearCacheService::class)\n                          -&gt;invokeMethod('addNamespaceToTemplateCaches', ['your_template_cache']);\n        $this-&gt;application-&gt;inflect(ClearCacheService::class)\n                          -&gt;invokeMethod('addNamespaceToTextCaches', ['your_text_cache']);\n    }\n}\n</code></pre> <p>The following example shows hwo to clear a specific group of caches using the service:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Cache\\Services\\ClearCacheService;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ClearCacheService\n     */\n    private $clearCacheService;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ClearCacheService $clearCacheService\n     */\n    public function __construct(ClearCacheService $clearCacheService)\n    {\n        $this-&gt;clearCacheService = $clearCacheService;\n    }\n\n\n    public function clearModuleCaches(): void\n    {\n        $this-&gt;clearCacheService-&gt;clearModuleCaches();\n    }\n\n\n    public function clearProductCaches(): void\n    {\n        $this-&gt;clearCacheService-&gt;clearProductCaches();\n    }\n\n\n    public function clearSystemCaches(): void\n    {\n        $this-&gt;clearCacheService-&gt;clearSystemCaches();\n    }\n\n\n    public function clearTemplateCaches(): void\n    {\n        $this-&gt;clearCacheService-&gt;clearTemplateCaches();\n    }\n\n\n    public function clearTextCaches(): void\n    {\n        $this-&gt;clearCacheService-&gt;clearTextCaches();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/configurations/","title":"Configurations","text":"<p>In the past it was difficult to understand how the Gambio shop system worked with configuration values. There were different database tables and functions to read and edit the settings.</p> <p>With GX v4 the configuration tables have been migrated to new database tables and a new <code>ConfigurationService</code> has been implemented. This service can be used to retrieve, create, update and delete configurations.</p> <p>If modules require shop settings and/or want to provide their configuration values, the <code>ConfigurationService</code> should be used. This abstraction layer allows us to make further changes to the underlying data structure in the future without jeopardizing the compatibility of external modules.</p> <p>All the Gambio core configurations are namespaced, depending on their location before the Shop-Version GX v4.1.x. E.g. all configurations which were previously located in the <code>gm_configuration</code> table has a prefix with <code>gm_configuration/</code></p>"},{"location":"framework/technical-components/configurations/#read-configurations","title":"Read configurations","text":"<p>The configuration service provides the <code>find</code> and <code>findLanguageDependent</code> methods to read shop configurations. Both methods may return null if no configuration was found with the given key. You can use <code>has</code> or <code>hasLanguageDependent</code> first to ensure that these find methods returns a configuration object.</p> <ul> <li><code>Gambio\\Core\\Configuration\\Services\\ConfigurationService</code><ul> <li><code>find(string $key): ?Gambio\\Core\\Configuration\\Model\\Interfaces\\Configuration</code></li> <li><code>findLanguageDependent(string $key, string $languageCode): ?Gambio\\Core\\Configuration\\Model\\Interfaces\\LanguageDependentConfiguration</code></li> <li><code>has(string $key): bool</code></li> <li><code>hasLanguageDependent(string $key, string $languageCode): bool</code></li> </ul> </li> </ul> <p>The method <code>find</code> returns a configuration object instance:</p> <ul> <li><code>Gambio\\Core\\Configuration\\Model\\Interfaces\\Configuration</code><ul> <li><code>key(): string</code></li> <li><code>value(): ?string</code></li> <li><code>sortOrder(): ?int</code></li> </ul> </li> </ul> <p>Using the method <code>findLanguageDependent</code> returns a slightly more sophisticated configuration object instance:</p> <ul> <li><code>Gambio\\Core\\Configuration\\Model\\Interfaces\\LanguageDependentConfiguration</code><ul> <li><code>key(): string</code></li> <li><code>value(): ?string</code></li> <li><code>sortOrder(): ?int</code></li> <li><code>languageCode(): string</code></li> </ul> </li> </ul> <p>Once you have a configuration object, you can use the <code>value(): ?string</code> method to retrieve the value.</p> <p>The database schema allows configuration values to be <code>null</code>, so the method can also return <code>null</code>. Otherwise, the current value of the configuration is returned as a string type.</p> <p>Example:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Configuration\\Services\\ConfigurationService;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ConfigurationService\n     */\n    private $service;\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ConfigurationService $service\n     */\n    public function __construct(ConfigurationService $service)\n    { \n        $this-&gt;service = $service;\n    }\n\n\n    public function example(): void\n    {\n        $configOrNull = $this-&gt;service-&gt;find('namespace/config-key');\n        if ($this-&gt;service-&gt;has('namespace/config-key')) {\n            $config = $this-&gt;service-&gt;find('namespace/config-key');\n        }\n\n        $langConfigOrNull = $this-&gt;service-&gt;findLanguageDependent('namespace/config-key', 'en');\n        if ($this-&gt;service-&gt;hasLanguageDependent('namespace/config-key', 'en')) {\n            $langConfig = $this-&gt;service-&gt;hasLanguageDependent('namespace/config-key', 'en');\n        }\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/configurations/#simpler-abstraction-for-reading-configuration-values","title":"Simpler abstraction for reading configuration values","text":"<p>Besides the configuration service, we also implemented a simpler <code>Gambio\\Core\\Configuration\\Services\\ConfigurationFinder</code> service, which can be used to fetch configuration values.</p> <p>The following example shows you how to use it:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Configuration\\Services\\ConfigurationFinder;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ConfigurationFinder\n     */\n    private $configurationFinder;\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ConfigurationFinder $configurationFinder\n     */\n    public function __construct(ConfigurationFinder $configurationFinder)\n    { \n        $this-&gt;configurationFinder = $configurationFinder;\n    }\n\n\n    /**\n     * @return string Returns a specific configuration value.\n     */\n    public function getSomeConfiguration(): string\n    {\n        $defaultValue = null;\n\n        return $this-&gt;configurationFinder-&gt;get('namespace/my-configuration-key', $defaultValue);\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/configurations/#saving-configurations","title":"Saving configurations","text":"<p>Configuration values can be saved using the <code>save</code>, <code>saveBulk</code>, <code>saveLanguageDependent</code> and <code>saveLanguageDependentBulk</code> methods, depending on whether you want to store multiple values at the same time and whether you work with language-dependent configurations.</p> <ul> <li><code>Gambio\\Core\\Configuration\\Services\\ConfigurationService</code><ul> <li><code>save(string $key, ?string $value): void</code></li> <li><code>saveBulk(array $configurations): void</code></li> <li><code>saveLanguageDependent(string $key, string $languageCode, ?string $value): void</code></li> <li><code>saveLanguageDependentBulk(array $configurations): void</code></li> </ul> </li> </ul> <p>New configurations are created using a unique key and existing will be updated by assigning an existing key.</p> <p>Example:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Configuration\\Services\\ConfigurationService;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ConfigurationService\n     */\n    private $service;\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ConfigurationService $service\n     */\n    public function __construct(ConfigurationService $service)\n    { \n        $this-&gt;service = $service;\n    }\n\n\n    public function example(): void\n    {\n        $this-&gt;service-&gt;save('namespace/config-key', 'config-value');\n        $this-&gt;service-&gt;saveBulk([\n            'namespace/key'       =&gt; 'value',\n            'namespace/other-key' =&gt; 'other-value'\n        ]);\n\n        $this-&gt;service-&gt;saveLanguageDependent('namespace/config-key', 'en', 'config-value');\n        $this-&gt;service-&gt;saveLanguageDependentBulk([\n            [\n                'key'          =&gt; 'namespace/key',\n                'value'        =&gt; 'value',\n                'languageCode' =&gt; 'en',\n            ],\n            [\n                'key'          =&gt; 'namespace/other-key',\n                'value'        =&gt; 'other-value',\n                'languageCode' =&gt; 'en',\n            ]\n        ]);\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/configurations/#delete-configurations","title":"Delete configurations","text":"<p>For deleting configurations, the service provides the <code>delete(string ...$keys)</code> method. An unlimited number of configuration keys can be passed to it and all associated values will be deleted. If one of the given values does not exist, the entry will be skipped.</p> <p>Example:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Admin\\Configuration\\ConfigurationService;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ConfigurationService\n     */\n    private $service;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ConfigurationService $service\n     */\n    public function __construct(ConfigurationService $service)\n    {\n        $this-&gt;service = $service;\n    }\n\n\n    public function example(): void\n    {\n        $this-&gt;service-&gt;delete('namespace/foo', 'namespace/bar', 'namespace/baz');\n\n        // or\n\n        $keys = ['namespace/foo', 'namespace/bar', 'namespace/baz'];\n        $this-&gt;service-&gt;delete(...$keys);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If you are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/database/","title":"Database","text":"<p>To communicate with the database, we use Doctrine DBAL. We provide an active database connection via the DI Container.</p> <p>Note</p> <p>Please have in mind that the version of this dependency we ship with our shop software might vary. From time to time we will update this dependency (not only for compatibility reasons, but also for security ones), which could lead to breaking changes when you as a third-party developer are using this dependency. Please be aware of this circumstances.</p> <p>For simple queries you can use auxiliary methods provided by the <code>Doctrine\\DBAL\\Connection</code> class:</p> <ul> <li><code>insert(string $table, array $data)</code>   Creates a new table entry.</li> <li><code>update(string $table, array $data, array $identifier)</code>   Updates an existing table entry.</li> <li><code>delete(string $table, array $identifier)</code>   Deletes all entries from the table that are found using the <code>$identifier</code>.</li> </ul> <p>If you want to use a value as a column name that also matches a MySQL internal keyword, the column name must be masked. For example, if you want the column of a table to have the name <code>key</code>, the query must contain <code>`key`</code>. For this purpose the method <code>quoteIdentifier(string $identifier)</code> is available in the <code>Doctrine\\DBAL\\Connection</code> class.</p> <p>Complex queries can be mapped using the Query Builder. To create a query builder, you need to call the <code>createQueryBuilder</code> method, which is available in the <code>Doctrine\\DBAL\\Connection</code> class. Note that the query builder does not reset its internal state after it has been executed. This means that in most cases it makes sense to create a new instance of the query builder for each query.</p> <p>The following example shows how to add the Doctrine DBAL connection to your class using a Service Provider:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Doctrine\\DBAL\\Connection;\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleServiceProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\SampleClass;\n\n/**\n * Class MyServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass MyServiceProvider extends AbstractModuleServiceProvider\n{\n    /**\n     * @inheritDoc\n     */\n    public function provides(): array\n    {\n        return [\n            SampleClass::class,\n        ];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function register(): void\n    {\n        $this-&gt;application-&gt;registerShared(SampleClass::class)\n             -&gt;addArgument(Connection::class);\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/emails/","title":"Emails","text":"<p>The new framework of the shop doesn't provide a new service to manage or send emails.</p>"},{"location":"framework/technical-components/emails/#adding-new-email-templates","title":"Adding new email templates","text":"<p>The integration of new email templates or replacing them is straightforward. All you need to do is use the folder <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/MailTemplates</code>. The <code>MailTemplates</code> folder must contain subfolders for the individual languages.</p> <p>If you want to create an email template for the German language, you have to put your HTML and TXT file in the folder <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/MailTemplates/german/</code>.</p> <p>Example: Assuming you want to overwrite the existing email template <code>lang/english/original_mail_templates/admin_create_account_mail.html</code>, you have to place your HTML file in the directory <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/MailTemplates/german/admin_create_account_mail.html</code>.</p>"},{"location":"framework/technical-components/environment/","title":"Environment Variables","text":"<p>Working with the shop software sometimes requires the usage of some environment variables like paths on the webserver, the base URL of the shop or the language the client is using. To give you all this information we added some services (more or less value objects) that provide it for you.</p> <p>The following examples show you which services are available and what information is provided.</p>"},{"location":"framework/technical-components/environment/#environment","title":"Environment","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\Environment;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var Environment\n     */\n    private $environment;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param Environment $environment\n     */\n    public function __construct(Environment $environment)\n    {\n        $this-&gt;environment = $environment;\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isShopInDevEnvironment(): bool\n    {\n        return $this-&gt;environment-&gt;isDev();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/environment/#path","title":"Path","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\Path;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var Path\n     */\n    private $path;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param Path $path\n     */\n    public function __construct(Path $path)\n    {\n        $this-&gt;path = $path;\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getAbsoluteBasePathOfShop(): string\n    {\n        return $this-&gt;path-&gt;base();\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getAbsoluteBasePathOfAdmin(): string\n    {\n        return $this-&gt;path-&gt;admin();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/environment/#server","title":"Server","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\Server;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var Server\n     */\n    private $server;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param Server $server\n     */\n    public function __construct(Server $server)\n    {\n        $this-&gt;server = $server;\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isSslEnabled(): bool\n    {\n        return $this-&gt;server-&gt;sslEnabled();\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getRequestUri(): string\n    {\n        return $this-&gt;server-&gt;requestUri();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/environment/#serverinformation","title":"ServerInformation","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\ServerInformation;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ServerInformation\n     */\n    private $serverInformation;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ServerInformation $serverInformation\n     */\n    public function __construct(ServerInformation $serverInformation)\n    {\n        $this-&gt;serverInformation = $serverInformation;\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isModRewriteAvailable(): bool\n    {\n        return $this-&gt;serverInformation-&gt;modRewriteAvailable();\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isModRewriteWorking(): bool\n    {\n        return $this-&gt;serverInformation-&gt;modRewriteWorking();\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isHtaccessVersionAvailable(): bool\n    {\n        return $this-&gt;serverInformation-&gt;htaccessVersionAvailable();\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isAvailableHtaccessVersionGreaterThan(string $version): bool\n    {\n        return $this-&gt;serverInformation-&gt;htaccessVersionGreaterEquals($version);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/environment/#url","title":"Url","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\Url;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var Url\n     */\n    private $url;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param Url $url\n     */\n    public function __construct(Url $url)\n    {\n        $this-&gt;url = $url;\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getHost(): string\n    {\n        return $this-&gt;url-&gt;host();\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getPath(): string\n    {\n        return $this-&gt;url-&gt;path();\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getBaseUrlToShop(): string\n    {\n        return $this-&gt;url-&gt;base();\n    }\n\n\n    /**\n     * @return string\n     */\n    public function getBaseUrlToAdmin(): string\n    {\n        return $this-&gt;url-&gt;admin();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/environment/#userpreferences","title":"UserPreferences","text":"<pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\ValueObjects\\UserPreferences;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var UserPreferences\n     */\n    private $userPreferences;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param UserPreferences $userPreferences\n     */\n    public function __construct(UserPreferences $userPreferences)\n    {\n        $this-&gt;userPreferences = $userPreferences;\n    }\n\n\n    /**\n     * @return int|null\n     */\n    public function getUserId(): ?int\n    {\n        return $this-&gt;userPreferences-&gt;userId();\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function isUserAuthenticated(): bool\n    {\n        return $this-&gt;userPreferences-&gt;isAuthenticated();\n    }\n\n\n    /**\n     * @return int\n     */\n    public function getLanguageId(): int\n    {\n        return $this-&gt;userPreferences-&gt;languageId();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. It's not possible to fetch these value objects using the Legacy DI Container!</p>"},{"location":"framework/technical-components/events/","title":"Events","text":"<p>We implemented an event system for dispatching events and the registration of event handlers based on PSR 14. Events differ from command by pointing out something happened, while commands trigger a specific process inside the application.</p> <p>The following example shows how to implement an event and event handler:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events;\n\n/**\n * Class SampleEvent\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\n */\nclass SampleEvent\n{\n}\n</code></pre> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners;\n\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class SampleEventListener\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\n */\nclass SampleEventListener\n{\n    /**\n     * @param SampleEvent $event\n     */\n    public function __invoke(SampleEvent $event): void\n    {\n        // do something\n    }\n}\n</code></pre> <p>It is common to inject some services in the handler to provide functionality. This should be done with the help of a Service Provider.</p>"},{"location":"framework/technical-components/events/#dispatching-events","title":"Dispatching events","text":"<p>If you want to dispatch your own or existing events, you need to use <code>Gambio\\Core\\Event\\Interfaces\\EventDispatcher</code>.</p> <p>The following example shows how to dispatch the <code>SampleEvent</code>:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class AbstractModule\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var EventDispatcher\n     */\n    private $eventDispatcher;\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param EventDispatcher $eventDispatcher\n     */\n    public function __construct(EventDispatcher $eventDispatcher)\n    {\n        $this-&gt;eventDispatcher = $eventDispatcher;\n    }\n\n    public function doSomething(): void\n    {\n        $event = new SomeEvent();\n        $this-&gt;eventDispatcher-&gt;dispatch($event);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/events/#handling-an-event","title":"Handling an event","text":"<p>To handle an event you need to register your event handler, which will then be executed after the specific event has been dispatched. Therefore, you have two ways of doing so.</p>"},{"location":"framework/technical-components/events/#register-event-handler-by-defining-a-specific-module-class","title":"Register event handler by defining a specific module class","text":"<p>The shop software can identify modules by specific module classes (more information can be found in the tutorial about configuring a module). This module class needs to implement an <code>EventListeners</code> method, which provides an array that maps the event handlers to their events.</p> <p>The system that reads all module classes will then automatically register your event handlers.</p> <p>The following example shows the implementation of such a module class:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\Modules\\AbstractModule;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\\SomeEventListener;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class SampleModule\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleModule extends AbstractModule\n{\n    /**\n     * @inheritDoc\n     */\n    public function eventListeners(): array\n    {\n        return [\n            SomeEvent::class =&gt; [\n                SomeEventListener::class,\n            ]\n        ];\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/events/#service-provider-registration","title":"Service Provider registration","text":"<p>Alternatively, it's also possible to use a bootable Service Provider to register your event handler.</p> <p>The following example shows how to do this:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\\SomeEventListener;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class MyBootableServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass MyBootableServiceProvider extends AbstractModuleBootableServiceProvider\n{\n    /**\n     * @inheritDoc\n     */\n    public function provides(): array\n    {\n        return [\n            SomeEventListener::class,\n        ];\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function register(): void\n    {\n        $this-&gt;application-&gt;registerShared(SomeEventListener::class);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function boot(): void\n    {\n        $this-&gt;application-&gt;attachEventListener(SomeEvent::class, SomeEventListener::class);\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/events/#prioritised-event-handlers","title":"Prioritised event handlers","text":"<p>Additional to normal event handlers, it's possible to register prioritised event handlers. This means, that the order in which the event handlers are executed is defined by the priority defined by each event handler.</p> <p>To create a prioritised event handler your class can extend from the <code>Gambio\\Core\\Event\\Abstracts\\AbstractPrioritizedEventListener</code> or implement the <code>Gambio\\Core\\Event\\PrioritizedEventListener</code> interface by itself.</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners;\n\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\nuse Gambio\\Core\\Event\\PrioritizedEventListener;\n\n/**\n * Class PrioritisedSampleEventListener\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\n */\nclass PrioritisedSampleEventListener implements PrioritizedEventListener\n{\n    /**\n     * @inheritDoc\n     */\n    public function priority(): int\n    {\n        return PrioritizedEventListener::PRIORITY_VERY_HIGH; // or: return self::PRIORITY_VERY_HIGH;\n    }\n\n    /**\n     * @param SampleEvent $event\n     */\n    public function __invoke(SampleEvent $event): void\n    {\n        // do something\n    }\n}\n</code></pre> <p>The registration is similar to the registration of a non-prioritised event handler:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListeners\\PrioritisedSampleEventListener;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\n\n/**\n * Class MyBootableServiceProvider\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass MyBootableServiceProvider extends AbstractModuleBootableServiceProvider\n{\n    ...\n\n    /**\n     * @inheritDoc\n     */\n    public function boot(): void\n    {\n        $this-&gt;application-&gt;attachPrioritisedEventListener(SomeEvent::class, PrioritisedSampleEventListener::class);\n    }\n}\n</code></pre> <p>Notice</p> <p>Please have in mind, that this is only possible by using a Service Provider.</p>"},{"location":"framework/technical-components/languages/","title":"Languages","text":"<p>To determine the available languages in the shop software, we provide the <code>Gambio\\Core\\Language\\Services\\LanguageService</code> service. It can be used to fetch all available languages for the store and admin area, as well as languages based on a specific ID or the two-digit ISO code.</p> <p>The following example shows how to use this service:</p> <pre><code>use Gambio\\Admin\\Modules\\Language\\Model\\Exceptions\\LanguageNotFoundException;\nuse Gambio\\Core\\Language\\Services\\LanguageService;\n\n/**\n * Class SampleClass\n */\nclass SampleClass\n{\n    /**\n     * @var LanguageService\n     */\n    private $languageService;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param LanguageService $languageService\n     */\n    public function __construct(LanguageService $languageService)\n    {\n        $this-&gt;languageService = $languageService;\n    }\n\n\n    /**\n     * @param int $id\n     *\n     * @return array|null Return null if language does not exist or available\n     *                    information of the requested language as array.\n     */\n    public function getLanguageInformationById(int $id): ?array\n    {\n        try {\n            $language = $this-&gt;languageService-&gt;getLanguageById($id);\n\n            return [\n                'id'        =&gt; $language-&gt;id(),        # as int\n                'code'      =&gt; $language-&gt;code(),      # as string\n                'name'      =&gt; $language-&gt;name(),      # as string\n                'charset'   =&gt; $language-&gt;charset(),   # as string\n                'directory' =&gt; $language-&gt;directory(), # as string\n            ];\n        } catch (LanguageNotFoundException $e) {\n            return null;\n        }\n    }\n\n\n    /**\n     * @param string $code\n     *\n     * @return array|null Return null if language does not exist or available\n     *                    information of the requested language as array.\n     */\n    public function getLanguageInformationByCode(string $code): ?array\n    {\n        try {\n            $language = $this-&gt;languageService-&gt;getLanguageByCode($code);\n\n            return [\n                'id'        =&gt; $language-&gt;id(),        # as int\n                'code'      =&gt; $language-&gt;code(),      # as string\n                'name'      =&gt; $language-&gt;name(),      # as string\n                'charset'   =&gt; $language-&gt;charset(),   # as string\n                'directory' =&gt; $language-&gt;directory(), # as string\n            ];\n        } catch (LanguageNotFoundException $e) {\n            return null;\n        }\n    }\n\n\n    /**\n     * @return array Return the information of all language as array.\n     */\n    public function getLanguageInformationOfAllLanguages(): ?array\n    {\n        $return    = [];\n        $languages = $this-&gt;languageService-&gt;getAvailableLanguages();\n        foreach($languages as $language){\n            $return[] = [\n                'id'        =&gt; $language-&gt;id(),        # as int\n                'code'      =&gt; $language-&gt;code(),      # as string\n                'name'      =&gt; $language-&gt;name(),      # as string\n                'charset'   =&gt; $language-&gt;charset(),   # as string\n                'directory' =&gt; $language-&gt;directory(), # as string\n            ];\n        }\n\n        return $return;\n    }\n\n\n    /**\n     * @return array Return the information of all admin language as array.\n     */\n    public function getLanguageInformationOfAllAdminLanguages(): ?array\n    {\n        $return    = [];\n        $languages = $this-&gt;languageService-&gt;getAvailableAdminLanguages();\n        foreach($languages as $language){\n            $return[] = [\n                'id'        =&gt; $language-&gt;id(),        # as int\n                'code'      =&gt; $language-&gt;code(),      # as string\n                'name'      =&gt; $language-&gt;name(),      # as string\n                'charset'   =&gt; $language-&gt;charset(),   # as string\n                'directory' =&gt; $language-&gt;directory(), # as string\n            ];\n        }\n\n        return $return;\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/logging/","title":"Logging","text":"<p>Since logging is of course also an important core component of an application, an implementation of the PSR-3 <code>Psr\\Log\\LoggerInterface</code> can be created using the <code>Gambio\\Core\\Logging\\LoggerBuilder</code>. This builder provides methods to set a specific namespace for your logs as well as methods to add or omit request data to your logs.</p> <p>According to the PSR different log levels can be used and additional context data can be logged. All logs can be viewed in the Gambio Admin under Toolbox &gt; Show Logs and are stored in both text and JSON form in the <code>logfiles</code> folder (in the main directory of the shop).</p>"},{"location":"framework/technical-components/logging/#logging-with-utility-function","title":"Logging with utility function","text":"<p>The easiest way to get an instance of the logger is by using the <code>Gambio\\Core\\Logging\\logger(string $namespace = 'general', bool $addRequestData = false): LoggerInterface</code> utility function. The following example demonstrate how to log information in case of an exception.</p> <pre><code>use function Gambio\\Core\\Logging\\logger;\n\n// ...\n\n/**\n * Class MyClass\n */\nclass MyClass\n{\n    /**\n     * Performing an operation that might fail\n     * and logs in case of an exception. \n     */\n    public function doSomethingThatMightFail(): void\n    {\n        try {\n            $this-&gt;performSomething();\n        } catch (\\UnexpectedValueException $e) {\n            $logger = logger(\n                // default args, can be omitted \n                $namespace = 'general',\n                $addRequestData = false\n            );\n\n            $logger-&gt;error('error message describing the problem', [\n                // any additional data can be logged in the context array\n                'foo' =&gt; 'bar'\n            ]);\n        }\n    }\n\n\n    /**\n     * This method throws an exception randomly on usage.\n     * \n     * @throws Exception\n     */\n    private function performSomething(): void\n    {\n        if (\\random_int(1, 2) === 1) {\n            throw new \\UnexpectedValueException('operation failed');\n        }\n    }\n}\n</code></pre>"},{"location":"framework/technical-components/logging/#logging-with-service-provider-injection","title":"Logging with Service Provider injection","text":"<p>The following example shows you how to create a logger with help of a service provider and how to use it:</p> <pre><code>use Gambio\\Core\\Application\\DependencyInjection\\AbstractServiceProvider;\nuse Gambio\\Core\\Logging\\LoggerBuilder;\n\n/**\n * Class MyServiceProvider\n */\nclass MyServiceProvider extends AbstractServiceProvider\n{\n    /**\n     * @inheritDoc\n     */\n    public function provides(): array\n    {\n        return [MyClass::class];\n    }\n\n\n    /**\n     * @inheritDoc\n     */\n    public function register(): void\n    {\n        // Add LoggerBuilder as a dependency, so you can create your logger inside the\n        // constructor method of your class.\n        $this-&gt;application-&gt;registerShared(MyClass::class)-&gt;addArgument(LoggerBuilder::class);\n\n        // Alternatively you could create the logger before adding it as a dependency\n        // for your class.\n        $this-&gt;application-&gt;registerShared(MyClass::class, function(){\n            /** @var LoggerBuilder $builder */\n            $builder = $this-&gt;application-&gt;get(LoggerBuilder::class);\n            $logger  = $builder-&gt;changeNamespace('some-namespace')\n                               -&gt;omitRequestData()\n                               -&gt;build();\n\n            return MyClass($logger);\n        });\n    }\n}\n</code></pre> <pre><code>use Gambio\\Core\\Logging\\LoggerBuilder;\nuse Psr\\Log\\LoggerInterface;\n\n/**\n * Class MyClass\n */\nclass MyClass\n{\n    /**\n     * @var LoggerInterface\n     */\n    private $logger;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param LoggerBuilder $loggerBuilder\n     */\n    public function __construct(LoggerBuilder $loggerBuilder)\n    {\n        $this-&gt;logger = $loggerBuilder-&gt;changeNamespace('sample-class')\n                                      -&gt;addRequestData()\n                                      -&gt;build();\n    }\n\n\n    /**\n     * @param string $message\n     * @param array  $extraData\n     */\n    public function logSomething(string $message, array $extraData = []): void\n    {\n        $this-&gt;logger-&gt;notice($message, $extraData);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/permissions/","title":"Permissions","text":"<p>We provide the <code>Gambio\\Core\\Permission\\Services\\PermissionService</code> to quickly check the admin permissions. This service is based on the Admin Access domains and uses their services.</p> <p>The following gives an example of how to use it:</p> <pre><code>use Gambio\\Admin\\Modules\\AccessGroup\\Model\\ValueObjects\\AccessGroupItem;\nuse Gambio\\Core\\Application\\ValueObjects\\UserPreferences;\nuse Gambio\\Core\\Permission\\Services\\PermissionService;\n\n/**\n * Class SampleClass\n */\nclass SampleClass\n{\n    /**\n     * @var PermissionService\n     */\n    private $permissionService;\n\n    /**\n     * @var UserPreferences\n     */\n    private $userPreferences;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param PermissionService $permissionService\n     * @param UserPreferences $userPreferences\n     */\n    public function __construct(PermissionService $permissionService, UserPreferences $userPreferences)\n    {\n        $this-&gt;permissionService = $permissionService;\n        $this-&gt;userPreferences   = $userPreferences;\n    }\n\n\n    /**\n     * @param string   $action\n     * @param string   $groupItemType\n     * @param string   $groupItemDescriptor\n     *\n     * @return bool\n     */\n    public function checkPermissionOfCurrentAdmin(\n        string $action,\n        string $groupItemType,\n        string $groupItemDescriptor\n    ): bool\n    {\n        $currentAdminId = $this-&gt;userPreferences-&gt;userId();\n\n        return $this-&gt;permissionService-&gt;checkAdminPermission($currentAdminId,\n                                                              $action,\n                                                              $groupItemType,\n                                                              $groupItemDescriptor);\n    }\n\n\n    /**\n     * @param int    $accessRoleId\n     * @param bool   $readPermission\n     * @param bool   $writingPermission\n     * @param bool   $deletingPermission\n     */\n    public function setAccessRolePermissionsForMySampleModule(\n        int $accessRoleId,\n        bool $readPermission,\n        bool $writingPermission,\n        bool $deletingPermission\n    ): void\n    {\n        $accessGroupItemType       = AccessGroupItem::CONTROLLER_TYPE;\n        $accessGroupItemDescriptor = 'SampleController';\n\n        $this-&gt;permissionService-&gt;setAccessRolePermissionsForAccessGroup($accessRoleId,\n                                                                         $accessGroupItemType,\n                                                                         $accessGroupItemDescriptor,\n                                                                         $readPermission,\n                                                                         $writingPermission,\n                                                                         $deletingPermission);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/pricing/","title":"Pricing","text":"<p>For managing or determining prices we currently don't have a specific application server by hand, but currently we can provide you the <code>Gambio\\Admin\\Modules\\Price\\Services\\ProductPriceConversionService</code> service that allows you to convert net prices into gross prices (and vice versa). The service minds the gross-admin configuration and automatically fetches the specific tax rates based on the tax zone of the shop.</p> <p>Notice</p> <p>There will be further services to manage and determining prices in general in the future.</p> <p>The following example gives you an idea of how to use it:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Admin\\Modules\\Price\\Services\\ProductPriceConversionService;\n\n/**\n * Class SampleClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleClass\n{\n    /**\n     * @var ProductPriceConversionService\n     */\n    private $priceConversion;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param ProductPriceConversionService $priceConversionService\n     */\n    public function __construct(ProductPriceConversionService $priceConversionService)\n    {\n        $this-&gt;priceConversion = $priceConversionService;\n    }\n\n\n    /**\n     * @param int   $productId\n     * @param float $grossPrice\n     *\n     * @return float\n     */\n    public function getProductsNetPrice(int $productId, float $grossPrice): float\n    {\n        return $this-&gt;priceConversion-&gt;getNetPrice($grossPrice, $productId);\n    }\n\n\n    /**\n     * @param int   $productId\n     * @param float $netPrice\n     *\n     * @return float\n     */\n    public function getProductsGrossPrice(int $productId, float $netPrice): float\n    {\n        return $this-&gt;priceConversion-&gt;getGrossPrice($netPrice, $productId);\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If you are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/routing/","title":"Routing","text":"<p>For managing routes the <code>Gambio\\Core\\Application\\Routing\\RouteCollector</code> will be used. This component is not directly available through the DI Container but will be given as function argument in callback methods that define routes. More about how to define routes can be found in the Adding and managing HTTP routes tutorial.</p> <p>Another component, which is available through the DI Container, is the <code>Gambio\\Core\\Application\\Routing\\RouteParser</code> which can be used to generate URLs for specific routes.</p>"},{"location":"framework/technical-components/routing/#route-collector","title":"Route Collector","text":"<p>The following examples shows the usage of the available method this component provides.</p>"},{"location":"framework/technical-components/routing/#adding-a-getpostetc-route","title":"Adding a GET/POST/etc. route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n    // ... similar for PUT, PATCH, DELETE and OPTION\n};\n</code></pre>"},{"location":"framework/technical-components/routing/#replace-callback-for-an-already-defined-route","title":"Replace callback for an already defined route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HTTPActions\\AnotherSampleGetAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'get')-&gt;setCallback(AnotherSampleGetAction::class);\n};\n</code></pre>"},{"location":"framework/technical-components/routing/#add-a-middleware-to-a-specific-route","title":"Add a middleware to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpMiddlewares\\SampleGetMiddleware;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpMiddlewares\\SamplePostMiddleware;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;addMiddleware(SampleGetMiddleware::class);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;addMiddleware(SampleGetMiddleware::class);\n};\n</code></pre>"},{"location":"framework/technical-components/routing/#add-an-argument-to-a-specific-route","title":"Add an argument to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $sampleArgumentName = 'argumentName';\n    $sampleArgumentValue = 'argumentValue';\n\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;addArgument($sampleArgumentName, $sampleArgumentValue);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;addArgument($sampleArgumentName, $sampleArgumentValue);\n};\n</code></pre>"},{"location":"framework/technical-components/routing/#add-a-name-to-a-specific-route","title":"Add a name to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;setName('my-sample-get-route');\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;setName('my-sample-post-route');\n};\n</code></pre>"},{"location":"framework/technical-components/routing/#route-parser","title":"Route Parser","text":"<p>The following example shows the usage of the <code>Gambio\\Core\\Application\\Routing\\RouteParser</code>.</p> <pre><code>use Gambio\\Core\\Application\\Routing\\RouteParser;\n\n/**\n * Class SampleClass\n */\nclass SampleClass\n{\n    /**\n     * @var RouteParser\n     */\n    private $routeParser;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param RouteParser $routeParser\n     */\n    public function __construct(RouteParser $routeParser)\n    {\n        $this-&gt;routeParser = $routeParser;\n    }\n\n    /**\n     * @return array\n     */\n    public function getMySampleRouteUrls(): array\n    {\n        $myRouteName = 'my-sample-get-route';\n\n        return [\n            'withBasePath' =&gt; $this-&gt;routeParser-&gt;urlFor($myRouteName),\n            'relativeUrl'  =&gt; $this-&gt;routeParser-&gt;relativeUrlFor($myRouteName),\n            'fullUrl'      =&gt; $this-&gt;routeParser-&gt;fullUrlFor($myRouteName),\n        ];\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/text-phrases/","title":"Text Phrases","text":"<p>Text phrases can easily be queried via the <code>Gambio\\Core\\Language\\TextManager</code>. Either a single text phrase or all text phrases of a section can be queried via the <code>TextManager</code>. The current language of the HTTP client will be assumed by default or replaced with German if the language of the client does not exist or could not be determined. However, it is also possible to query text phrases in a specific language.</p> <p>The following gives an example of how to use it:</p> <pre><code>use Gambio\\Core\\Language\\TextManager;\n\n/**\n * Class SampleClass\n */\nclass SampleClass\n{\n    /**\n     * @var TextManager\n     */\n    private $textManager;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param TextManager $textManager\n     */\n    public function __construct(TextManager $textManager)\n    {\n        $this-&gt;textManager = $textManager;\n    }\n\n\n    /**\n     * @param int|null $languageId\n     *\n     * @return string\n     */\n    public function getWelcomeText(int $languageId = null): string\n    {\n        if ($languageId !== null) {\n            return $this-&gt;textManager-&gt;getPhraseText('welcome', 'my-section', $languageId);\n        }\n\n        return $this-&gt;textManager-&gt;getPhraseText('welcome', 'my-section');\n    }\n\n\n    /**\n     * @param int|null $languageId\n     *\n     * @return string[]\n     */\n    public function getAllOfMyPhrases(int $languageId = null): array\n    {\n        if ($languageId !== null) {\n            return $this-&gt;textManager-&gt;getSectionPhrases('my-section', $languageId);\n        }\n\n        return $this-&gt;textManager-&gt;getSectionPhrases('my-section');\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If your are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"framework/technical-components/verification/","title":"VerificationService","text":""},{"location":"framework/technical-components/verification/#verificationservice","title":"VerificationService","text":"<p>The <code>VerificationService</code> is responsible for verifying whether two arrays contain the same data. If the second array differs in any way from the first array, all the differences will be recorded as <code>VerificationExceptions</code> and collected in a <code>VerificationExceptionStack</code>. This service is provided through the [DI Container].</p> <p>The <code>VerificationExceptionStack</code> can contain the following types of <code>VerificationExceptions</code>:</p> <ul> <li><code>ArrayLengthNotMatchingException</code></li> <li><code>TypeNotMatchingException</code></li> <li><code>ValueMissingException</code></li> <li><code>ValueNotMatchingException</code></li> </ul> <p>The <code>VerificationService</code> provides three reporting modes:</p> <p>1) Log Reporting Mode: Writes the stack to a log file. 2) Print Reporting Mode: Prints a formatted version of the stack. 3) Transmission Reporting Mode: Sends data to Gambio's Sentry, if the administrator has consented to sending error reports.</p> <p>By default, the log reporting mode is enabled.</p>"},{"location":"framework/technical-components/verification/#verification","title":"Verification","text":""},{"location":"framework/technical-components/verification/#verify-method","title":"<code>verify()</code> Method","text":"<p>The <code>verify()</code> method in the <code>VerificationService</code> is used to compare and validate arrays of expected and actual values.  It accepts the following parameters:</p> <p>1) expected (<code>array</code>): The array of expected values. 2) actual (<code>array</code>): The array of actual values to be compared against the expected values.</p> <p>It compares the expected and actual arrays and gathers all the differences, if any, in a <code>VerificationExceptionStack</code>. If any difference is spotted,  a <code>VerificationExceptionStack</code> is thrown, which contains all the detected differences.</p> <p>The <code>verify()</code> method in the <code>VerificationService</code> performs the following checks:</p> <ul> <li>It compares the length of the expected and actual arrays and adds an <code>ArrayLengthNotMatchingException</code> if they are not equal.</li> <li>It iterates through the keys of the expected array and checks if each key exists in the actual array. If a key is missing, it adds a <code>ValueMissingException</code>.</li> <li>It validates the contents of the values at the corresponding keys in the expected and actual arrays. If the contents do not match, a <code>ValueNotMatchingException</code> is added.</li> <li>If the contents of an object are being compared, it validates if the content of the objects is identical  using a loose comparison (==). If the objects are not identical, a <code>ValueNotMatchingException</code> is added.</li> </ul>"},{"location":"framework/technical-components/verification/#reporting","title":"Reporting","text":""},{"location":"framework/technical-components/verification/#report-method","title":"<code>report()</code> Method","text":"<p>The <code>VerificationService</code> provides a <code>report()</code> method to handle the reporting  of a <code>VerificationExceptionStack</code>. This method allows you to report the collected <code>VerificationExceptions</code> along with additional context and specify a module name for the report.</p> <p>The <code>report()</code> method is used to report a <code>VerificationExceptionStack</code>. It accepts  the following parameters:</p> <p>1) stack (<code>VerificationExceptionStack</code>): The <code>VerificationExceptionStack</code> object  containing the collected verification exceptions. 2) context (<code>array|stdClass</code>, optional): Additional context for the report,  such as custom information related to the verification process.  This parameter can be an array or an stdClass object. 3) module (<code>string</code>, optional):  The name of the module being reported on.  If provided, it will be used to differentiate the reports and will also be used as the logfile name.  If not provided, the default value is set to \"VerificationService\".</p> <p>Internally, the <code>VerificationService</code> maintains a cache system to ensure that each report is logged or transmitted at most once within a 24-hour period, preventing excessive duplication of reports.</p> <p>It's important to note that the <code>report()</code> method handles the reporting based  on the enabled reporting modes.</p> <p>Now that you have a clear understanding of the <code>verify()</code> and <code>report()</code> method and its parameters,  let's explore some code samples to see how it can be used in practice.</p>"},{"location":"framework/technical-components/verification/#code-samples","title":"Code Samples","text":""},{"location":"framework/technical-components/verification/#checking-if-a-reporting-mode-is-currently-enabled","title":"Checking if a reporting mode is currently enabled","text":"<pre><code>/** @var \\Gambio\\Core\\Verification\\Service\\VerificationService $service */\nif ($service-&gt;isModeLogEnabled()) {\n    // do something ... \n}\n\nif ($service-&gt;isModePrintEnabled()) {\n    // do something ... \n}\n\nif ($service-&gt;isModeTransmissionEnabled()) {\n    // do something ... \n}\n</code></pre>"},{"location":"framework/technical-components/verification/#enabling-reporting-modes","title":"Enabling reporting mode's","text":"<pre><code>/** @var \\Gambio\\Core\\Verification\\Service\\VerificationService $service */\n$service-&gt;enableModeLog();\n$service-&gt;enableModePrint();\n$service-&gt;enableModeTransmission(); //  Should only be enabled by Gambio for exception transmission\n</code></pre>"},{"location":"framework/technical-components/verification/#disabling-reporting-modes","title":"Disabling reporting mode's","text":"<pre><code>/** @var \\Gambio\\Core\\Verification\\Service\\VerificationService $service */\n$service-&gt;disableModeLog();\n$service-&gt;disableModePrint();\n$service-&gt;disableModeTransmission();\n</code></pre>"},{"location":"framework/technical-components/verification/#verifying-and-reporting","title":"Verifying and reporting","text":"<pre><code>$expected = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; true];\n$actual   = ['a' =&gt; 1, 'b' =&gt; 2, 'c' =&gt; false];\n\n/** @var \\Gambio\\Core\\Verification\\Service\\VerificationService $service */\ntry {\n    $service-&gt;verify($expected, $actual);\n} catch (\\Gambio\\Core\\Verification\\Service\\Exceptions\\VerificationExceptionStack $stack) {\n    $customContext = ['timestamp' =&gt; time()];\n    $moduleName    = 'MyVerificationModule';\n    $service-&gt;report($stack, $customContext, $moduleName);\n}\n</code></pre>"},{"location":"gambio-admin/internal/frontend/entrypoint/","title":"Gambio Admin - Entrypoint","text":""},{"location":"gambio-admin/internal/frontend/entrypoint/#introduction","title":"Introduction","text":"<p>When developing frontend code for the gambio admin, we use TypeScript as programming language and webpack for the build process.</p>"},{"location":"gambio-admin/internal/frontend/entrypoint/#create-an-entrypoint","title":"Create an entrypoint","text":"<p>To create a new frontend entrypoint for the gambio admin, it is required to create a TypeScript file following this convention: <code>src/GambioAdmin/Modules/&lt;ModuleName&gt;/ui/assets/index.ts</code>. The build process produces a javascript file in the build directory: <code>src/GambioAdmin/build/&lt;module_name&gt;.js</code>.</p>"},{"location":"gambio-admin/internal/frontend/entrypoint/#tldr","title":"TLDR:","text":"<p><code>src/GambioAdmin/Modules/&lt;ModuleName&gt;/ui/assets/index.ts</code> =&gt; <code>src/GambioAdmin/build/&lt;module_name&gt;.js</code></p>"},{"location":"gambio-admin/internal/frontend/entrypoint/#integrate-entrypoint-in-html","title":"Integrate entrypoint in HTML","text":""},{"location":"gambio-admin/internal/frontend/entrypoint/#abstract-vuepageaction","title":"Abstract VuePageAction","text":"<p>The easiest way to integrate the new entrypoint is by extending from the abstract <code>Gambio\\Admin\\Application\\Http\\VuePageAction</code> and implementing the <code>::jsEntrypoint</code> method. The method should return <code>&lt;module_name&gt;</code> from the <code>src/GambioAdmin/build/</code> directory. As a result, the render method takes care to integrate the script tag with the defined entrypoint.</p> <p>When using the <code>VuePageAction</code> and being in development mode, the frontend development mode can be enabled using the most left icon on the gambio admin header bar (). This results in loading the frontend assets from a local webpack-dev-server. To start the webpack-dev-server, run <code>yarn next:dev</code>.</p>"},{"location":"gambio-admin/internal/frontend/entrypoint/#example","title":"Example","text":"<pre><code>use Gambio\\Admin\\Application\\Http\\VuePageAction;\nuse Gambio\\Core\\Application\\Http\\Request;\nuse Gambio\\Core\\Application\\Http\\Response;\n\nclass MyAction extends VuePageAction\n{\n    public function handle(Request $request,Response $response) : Response\n    {\n        $template = $this-&gt;render('My Page', 'path/to/template');\n\n        return $response-&gt;write($template);\n    }\n\n\n    public function jsEntrypoint() : string\n    {\n        return '&lt;module_name&gt;';\n    }\n}\n</code></pre>"},{"location":"gambio-admin/internal/frontend/entrypoint/#html-template-script-tag","title":"HTML Template Script-Tag","text":"<p>Another way to integrate the entrypoint is by using a script tag in the page template. When overwriting the right template block, it is very easy and flexible way to integrate the entrypoint.</p> <p>Note: This will load the frontend assets exactly as defined. If you want to utilize the webpack-dev-server,  please refer to <code>src/GambioAdmin/Layout/ui/template/scripts.html</code> for a proper template setup.</p>"},{"location":"gambio-admin/internal/frontend/entrypoint/#example_1","title":"Example","text":"<pre><code>{extends file=\"layout.html\"}\n\n{* Other smarty block definitions *}\n\n{block name=\"custom_scripts\"}\n    {$smarty.block.parent}\n    &lt;script type=\"text/javascript\" src=\"{$baseUrl}/GambioAdmin/build/&lt;my_module&gt;.js\"&gt;&lt;/script&gt;\n{/block}\n\n</code></pre>"},{"location":"gambio-admin/internal/frontend/info-box/","title":"Gambio Admin - Info Box","text":"<p>The InfoBox library provides an API to push messages to the GambioAdmin info box. The range of functions is currently small, but it will be further expanded in the future and adapted to requirements.</p>"},{"location":"gambio-admin/internal/frontend/info-box/#importing-infobox-module","title":"Importing InfoBox module","text":"<p>Due to the build process setup, we can import the InfoBox module from the <code>core/InfoBox</code> namespace.</p> <pre><code>import InfoBox from 'core/InfoBox';\n</code></pre>"},{"location":"gambio-admin/internal/frontend/info-box/#using-infobox-module","title":"Using InfoBox module","text":"<p>To use the InfoBox module, we have to initialize the <code>InfoBox</code> class. There is a named constructor function <code>::create</code> that will initialize the InfoBox module with all dependencies. Afterwards, we can use the <code>::notifySuccess</code>, <code>::notifyInfo</code> and <code>::notifyWarning</code> methods to push messages to the GambioAdmin info box.</p> <pre><code>const infoBox = InfoBox.create();\n\ninfoBox.notifySuccess('Success message');\ninfoBox.notifySuccess('Success message', 'Optional headline');\n\ninfoBox.notifyInfo('Info message', 'Info headline');\n\ninfoBox.notifyWarning('Warning message', 'Warning headline');\n</code></pre>"},{"location":"gambio-admin/internal/frontend/user-configuration/","title":"User Configuration","text":"<p>The UserConfiguration service provides an api to fetch and save user configurations. Beside the service itself, which is a class, there are utility methods providing the same functionality, but are easier to use. On the other hand, the class is easy to test and therefore defined as default export.</p>"},{"location":"gambio-admin/internal/frontend/user-configuration/#importing-the-userconfiguration-service","title":"Importing the UserConfiguration service","text":"<p>You can choose between importing the modules <code>UserConfigurationService</code> class or the utility methods.</p> <pre><code>import UserConfigurationService from 'core/UserConfigurationService';\n// or\nimport {get, set} from 'core/UserConfigurationService';\n</code></pre>"},{"location":"gambio-admin/internal/frontend/user-configuration/#using-the-userconfiguration-service","title":"Using the UserConfiguration service","text":"<p>If you have chosen to import the modules class, you have to create an instance. The <code>UserConfiguration</code> instance provides the same API as the <code>get</code> and <code>set</code> utility functions.</p>"},{"location":"gambio-admin/internal/frontend/user-configuration/#example-imported-module-class","title":"Example: Imported module class","text":"<pre><code>const service = new UserConfigurationService();\n\nconst someConfig = await service.get('some-config');\nawait service.set('some-config', 'some-value');\n</code></pre>"},{"location":"gambio-admin/internal/frontend/user-configuration/#example-imported-utility-functions","title":"Example: Imported utility functions","text":"<pre><code>const someConfig = await get('some-config');\nawait set('some-config', 'some-value');\n</code></pre>"},{"location":"module-development/","title":"Module Development","text":"<p>This part of our documentation explains bit by bit how to start the development of your module. Beside some development guidelines, we want to split the tutorials into categories. The general tutorials give you information about the module system itself, how to extend it and tutorials that aren't just for the store or admin area. Tutorials that are especially for the store or admin area can be found in the store or admin category.</p> <p>If you start from scratch, it helps if you start reading the tutorial about GXModules, which explains where to place your module files. If you're creating a module for the admin area or using the event or command system, it's recommended you also read the tutorial on defining a module.</p> <p>After setting up your development environment and start creating your basic module structure, the tutorials about extending HTML and CSS and JavaScript might also be interesting. It's also possible to add or change text phrases as well as to add a new language.</p> <p>The tutorials about the public store area of the shop system focus more on adding and managing HTTP routes, creating HTTP controllers, creating a new theme, adding content from the Content Manager into your template files or adding new menu boxes. The tutorials about the admin area show you how to create HTTP actions, extend the admin menu, create a generic module center module using the <code>GXModule.json</code> or a custom module center module, as well as a custom configuration page.</p>"},{"location":"module-development/guidelines/","title":"Development Guidelines","text":"<p>We don't want to define any strict rules you need to follow if you're going to develop for the shop software, but we want to give you some pieces of advice for producing clean and good code.</p> <p>At first, there are some general programming principles we want to mention. The first principles are part of the SOLID acronym and advise you on how to write robust and solid software. We mention this one first because in our opinion these principles are the most important ones! Besides the SOLID principles, there are some shorter or less powerful (but still not pointless) principles:</p> <ul> <li> <p>KISS (Keep It Simple/Stupid):   Sometimes in the process of implementing a specific logic, it happens that these implementations get huge or even   complex. This principle says that you should split these huge or complex implementations into smaller and much   simpler methods, components, etc. This helps you understand the source code better and also makes it easier to   maintain. Additionally it helps to mind the Single-responsibility principle.</p> </li> <li> <p>DRY (Don't Repeat Yourself):   In general, it's painful to implement the same logic multiple times because it takes longer and makes it harder   to maintain the code. So you should try not to repeat yourself and therefore use specific patterns or techniques.</p> </li> <li> <p>Favor Composition over Inheritance:   This one is important regarding the principle above, because it says that you should favor composition over   inheritance if it comes to reuse code you have already written. Components that can be used at different parts of   your application or module are easier to maintain than new abstractions of specific classes.</p> </li> <li> <p>YAGNI (You Aren't Gonna Need It):   This principle is pretty easy to understand. Don't implement something unless you are sure you really need it.</p> </li> <li> <p>Code Against Interfaces, Not Implementations:   If, for instance, our class relies on a specific helper class, you should mind coding against the interface of   this helper class, not the concrete implementation. This way you make sure that you can change the implementation   later on and don't break the classes that rely on these helper classes.</p> </li> </ul> <p>On top of all these principles, we have some further advice for you:</p> <ul> <li>Always use strict comparisons</li> <li>Add <code>declare(strict_types=1)</code> at the beginning of a file</li> <li>Keep the nesting of control structures per method as small as possible</li> <li>Instead of using magic numbers, create constants or variables to specify these numbers</li> <li>Learn about Unit Testing and use Test-driven development</li> <li>Learn about Domain-driven design and use it to model your business logic</li> </ul> <p>In the end, we want to recommend the following books:</p> <ul> <li>Clean Code by Robert C. Martin</li> <li>Clean Architecture by Robert C. Martin</li> <li>Domain-Driven Design by Eric Evans</li> <li>Implementing Domain-Driven Design by Vaughn Vernon</li> </ul>"},{"location":"module-development/sample-modules/","title":"Sample Modules","text":"<p>We know that most of the developers like to get their hands on some real samples, that's why we want to give you some. The Gambio Samples zip file contains multiple examples for GX Modules. The only thing you need to do is to just download the zip file and extract the content into the <code>GXModules</code> directory of the shop software. Afterwards you only need to clear the module caches and will find some new menu items in the Gambio Admin.</p> <p>The following sample modules are included:</p> <ol> <li>HelloWord:    This simple examples just shows a \"Hello World\" admin page.</li> <li>CacheCleaner:    This one is a bit more complex and shows an admin page that contains a JS script which triggers some cache clearing    actions via background HTTP requests.</li> <li>TwigAdminEngine:    In this module you can see how you could add some further dependencies to the shop software that could be used by    other GX Modules. For this example we replaced the Smarty template engine with Twig.</li> <li>TwigModule:    This examples shows the usage of the new available Twig engine and shows an admin page based on a Twig template.</li> <li>ShopStatusManager:    This module is the most complex example and shows a configuration page for managing the shop status, top bar and    popup in the Gambio Shop.</li> <li>Glossary:    The last module just contains a menu JSON file for the Gambio Admin so that it's easier to find the sample pages in     the Gambio Admin.</li> </ol>"},{"location":"module-development/admin/admin-menu-json/","title":"Extending the Admin Menu","text":"<p>To extend the Admin Menu, you need to create a specific JSON file within your GXModules module directory (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;</code>), which defines the menu items you want to add or replace. The JSON file must end with <code>.menu.json</code> (e.g. <code>SampleModuleMenuFile.menu.json</code>), so that shop system can find and register it.</p> <p>The menu splits into groups and items. While the groups are always visible and contain the items, the items will be hidden if the user collapses the admin menu. The schema of the menu JSON file must match the existing schema of the menu dataset. You will find the schema definitions at the bottom of this tutorial.</p> <p>The default admin menu is defined by the <code>GambioAdmin/Layout/Menu/data/GambioAdminMenu.json</code> file.</p>"},{"location":"module-development/admin/admin-menu-json/#adding-a-new-item-to-an-existing-group","title":"Adding a new item to an existing group","text":"<p>To add a new item to an existing group, you have to use the same <code>id</code> attribute as in the group. Using the <code>sort</code> attribute, you can change the sorting order of the group items.</p> <p>The following example adds a new group item to the existing orders (<code>BOX_HEADING_ORDERS</code>) group:</p> <pre><code>[\n    {\n        \"id\": \"BOX_HEADING_ORDERS\",\n        \"items\": [\n            {\n                \"sort\": 15,\n                \"link\": \"&lt;Link&gt;\",\n                \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\"\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"module-development/admin/admin-menu-json/#adding-a-new-group-to-the-menu","title":"Adding a new group to the menu","text":"<p>If you want to add a new menu group, use a unique unoccupied <code>id</code>. The <code>sort</code> attribute will determine the sorting order.</p> <p>The <code>title</code> attribute is similar to some other systems and provides a text phrase reference. The shop will map this reference into an existing text phrase and use it as the title of your group. The <code>title</code> attribute follows the convention: <code>&lt;Section&gt;.&lt;TextPhrase&gt;</code> (e.g. <code>sample_language_file.sample_text_phrase</code>).</p> <pre><code>[\n    {\n        \"id\": \"&lt;GroupId&gt;\",\n        \"sort\": 250,\n        \"class\": \"fa &lt;FontAwesomeClass&gt;\",\n        \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\",\n        \"items\": [\n            {\n                \"sort\": 10,\n                \"link\": \"&lt;Link&gt;\",\n                \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\"\n            },\n            {\n                \"sort\": 20,\n                \"link\": \"&lt;Link&gt;\",\n                \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\"\n            }\n        ]\n    }\n]\n</code></pre> <p>Note: You can find an overview of all FontAwesome classes on their website.</p>"},{"location":"module-development/admin/admin-menu-json/#filter","title":"Filter","text":"<p>Some menu items should only be displayed if a condition applies. Menu filters can be used for this purpose.</p> <p>The shop system provides a few menu filters by default. To use them, you need to add an <code>if</code> attribute in the JSON. They can be applied to menu groups and menu items. It is possible to provide an array with filter objects to the <code>if</code> attribute to apply multiple filters.</p> <p>The <code>filter</code> attribute must match the registered filter name. The <code>args</code> attribute must an array containing mixed type elements. The args count is based on the filter implementation.</p> <p>Example:</p> <pre><code>[\n    {\n        \"sort\": 1,\n        \"link\": \"&lt;Link&gt;\",\n        \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\",\n        \"if\": {\n            \"filter\": \"configActive\",\n            \"args\": [\n                \"&lt;ConfigKey&gt;\"\n            ]\n        }\n    },\n    {\n        \"sort\": 2,\n        \"link\": \"&lt;Link&gt;\",\n        \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\",\n        \"if\": [\n            {\n                \"filter\": \"configActive\",\n                \"args\": [\n                    \"&lt;ConfigKey&gt;\"\n                ]\n            },\n            {\n                \"filter\": \"configActive\",\n                \"args\": [\n                    \"&lt;OtherConfigKey&gt;\"\n                ]\n            }\n        ]\n    }\n]\n</code></pre>"},{"location":"module-development/admin/admin-menu-json/#core-filter","title":"Core filter","text":"<ul> <li> <p><code>Gambio\\Admin\\Layout\\Menu\\Filter\\Types\\ConfigActive</code></p> <ul> <li>filter: <code>configActive</code></li> <li>args: [(string $configKey)]</li> </ul> </li> <li> <p><code>Gambio\\Admin\\Layout\\Menu\\Filter\\Types\\ConfigExists</code></p> <ul> <li>filter: <code>configExists</code></li> <li>args: [(string ...$configKeys)]</li> </ul> </li> <li> <p><code>Gambio\\Admin\\Layout\\Menu\\Filter\\Types\\DisplayOldModuleCenter</code></p> <ul> <li>filter: <code>displayOldModuleCenter</code></li> <li>args: [()]</li> </ul> </li> <li> <p><code>Gambio\\Admin\\Layout\\Menu\\Filter\\Types\\TemplateVersion</code></p> <ul> <li>filter: <code>templateVersion</code></li> <li>args: [(string $operator)]</li> <li><code>$operator</code> must be <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, or <code>=</code></li> </ul> </li> </ul>"},{"location":"module-development/admin/admin-menu-json/#custom-filter","title":"Custom filter","text":"<p>Custom filters can be implemented with the <code>Gambio\\Admin\\Layout\\Menu\\Filter\\FilterInterface</code> Interface. It is possible to inject any class which is registered in the DI-Container into the filter implementation.</p> <p>The <code>check</code> method gets an instance of <code>Gambio\\Admin\\Layout\\Menu\\Filter\\FilterConditionArguments</code> as argument which can be used to access values passed in the <code>args</code> array of the menu JSON filter object.</p> <p>Filters can be added to the application with a bootable Service Provider. The application should inflect the <code>Gambio\\Admin\\Layout\\Menu\\Filter\\FilterFactory::addLoader</code> method, passing the loader name as first argument and the full qualified filter classname string as second argument to the inflection registration.</p> <p>Example Filter:</p> <pre><code>&lt;?php\n\nnamespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Admin\\Layout\\Menu\\Filter\\FilterConditionArguments;\nuse Gambio\\Admin\\Layout\\Menu\\Filter\\FilterInterface;\n\nclass ExampleFilter implements FilterInterface\n{\n    public function check(FilterConditionArguments $condition): bool\n    {\n        $args = $condition-&gt;args();\n\n        return array_key_exists(0, $args) &amp;&amp; $args[0] === true;\n    }\n}\n</code></pre> <p>Example ServiceProvider integration:</p> <pre><code>&lt;?php\n\nnamespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\ExampleFilter;\nuse Gambio\\Admin\\Layout\\Menu\\Filter\\FilterFactory;\nuse Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider;\n\nclass ExampleServiceProvider extends AbstractModuleBootableServiceProvider\n{\n    public function boot(): void\n    {\n        $this-&gt;application-&gt;inflect(FilterFactory::class)\n            -&gt;invokeMethod('addFilter', ['exampleFilter', ExampleFilter::class]);\n    }\n\n\n    public function provides(): array\n    {\n        // define public available DI-container definitions\n        return [];\n    }\n\n\n    public function register(): void\n    {\n        // component registration code\n    }\n}\n</code></pre> <p>Menu JSON:</p> <pre><code>{\n    \"sort\": 1,\n    \"link\": \"&lt;Link&gt;\",\n    \"title\": \"&lt;SectionName&gt;.&lt;TextPhrase&gt;\",\n    \"if\": {\n        \"filter\": \"exampleFilter\",\n        \"args\": [\n            false\n        ]\n    }\n}\n</code></pre>"},{"location":"module-development/admin/admin-menu-json/#caching","title":"Caching","text":"<p>We cache the menu dataset to improve the performance. If you change the dataset of the menu, you need to clear the module cache in the Gambio Admin (Toolbox &gt; Caches).</p>"},{"location":"module-development/admin/admin-menu-json/#clear-menu-cache","title":"Clear menu cache","text":"<p>In case you need to clear the menu cache by yourself, you can use the <code>Gambio\\Admin\\Layout\\Menu\\AdminMenuService</code> class like shown in the following example:</p> <pre><code>use Gambio\\Admin\\Layout\\Menu\\AdminMenuService;\n\n/**\n * Class SampleClass\n */\nclass SampleClass\n{\n    /**\n     * @var AdminMenuService\n     */\n    private $adminMenuService;\n\n\n    /**\n     * SampleClass constructor.\n     *\n     * @param AdminMenuService $adminMenuService\n     */\n    public function __construct(AdminMenuService $adminMenuService)\n    {\n        $this-&gt;adminMenuService = $adminMenuService;\n    }\n\n\n    public function clearAdminMenuCache(): void\n    {\n        $this-&gt;adminMenuService-&gt;deleteMenuCache();\n    }\n}\n</code></pre> <p>Notice</p> <p>This example expects you to use the Service Provider to register your classes to the Application Core. If you are using the legacy architecture, you need to fetch this service using the Legacy DI Container.</p>"},{"location":"module-development/admin/admin-menu-json/#admin-menu-json-schema","title":"Admin Menu JSON schema","text":"<p>the following schema defines the menu dataset schema. Further down, you will find further information about the specific attributes inside this schema.</p> <pre><code>{\n    \"$id\": \"http://gambio.shop.com/admin/menu\",\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"description\": \"JSON Schema for gambio admin menu\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/menuGroup\"\n    },\n    \"definitions\": {\n        \"menuGroup\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                },\n                \"title\": {\n                    \"type\": \"string\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\"\n                },\n                \"class\": {\n                    \"type\": \"string\"\n                },\n                \"type\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"standalone\"\n                    ]\n                },\n                \"brand\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"alt\"\n                    ]\n                },\n                \"items\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"$ref\": \"#/definitions/menuItem\"\n                    }\n                }\n            },\n            \"required\": [\n                \"id\"\n            ]\n        },\n        \"menuItem\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"title\": {\n                    \"type\": \"string\"\n                },\n                \"sort\": {\n                    \"type\": \"integer\"\n                },\n                \"link\": {\n                    \"type\": \"string\"\n                },\n                \"link_param\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"title\",\n                \"sort\",\n                \"link\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"module-development/admin/admin-menu-json/#menu-group-attributes","title":"Menu Group attributes","text":"Attribute Description Required <code>id</code> Menu Group Identifier true <code>title</code> Menu Group Title false <code>sort</code> Sort order false <code>class</code> FontAwesome-Icon class false <code>type</code> if set to <code>standalone</code>, items will be hidden false <code>brand</code> if set to <code>alt</code>, group will be colored in gambio yellow false <code>items</code> Menu items of group true"},{"location":"module-development/admin/admin-menu-json/#menu-item-attributes","title":"Menu Item attributes","text":"Attribute Description Required <code>title</code> Menu Item Title true <code>sort</code> Sort order true <code>link</code> Admin page link without (<code>my-shop.com/admin/</code>) true <code>link_param</code> Optional link param false"},{"location":"module-development/admin/custom-configuration-page/","title":"Creating a custom configuration page","text":"<p>Creating a custom configuration page is like creating any new module page in the Gambio Admin. You need to define a route and create a HTTP action, both explained in the Creating a new HTTP Action tutorial.</p> <p>After creating your configuration page you can link it in your custom Module Center module, which will be explained in the Creating a custom module for the Module Center tutorial.</p>"},{"location":"module-development/admin/custom-module-center-module/","title":"Creating a custom module for the Module Center","text":"<p>This tutorial describes what the Module Center is, what it is used for and how to create a new entry in it.</p> <p>Important: Module Center modules can be created in two ways. This tutorial deals with the general variant (for experts). Additionally, there is possibility to create a Module Center entry very easily via a GXModules JSON file. For beginners and not so experienced developers, we recommend using the JSON file.</p>"},{"location":"module-development/admin/custom-module-center-module/#what-is-the-module-center","title":"What is the Module Center?","text":"<p>The Module Center is the central place to install, configure and uninstall shop functionality. All programs that add functionality to the shop system are called modules. This, for example, could be a complex interface for an external service or a small program that only outputs a small amount of information. The Module Center provides an overview of the status of all modules in the shop system. It replaces the old system where each module had its non-uniform page and interface for installation and configuration. This means that the user always knows where he can see which modules are currently being used in his shop. An important aspect is that the user can decide which modules he wants or does not want to use. A module should therefore always start by checking whether it is installed before starting to execute the actual functionality.</p>"},{"location":"module-development/admin/custom-module-center-module/#how-do-you-create-a-new-entry-in-the-module-center","title":"How do you create a new entry in the Module Center?","text":"<p>Each entry in the Module Center has its class, which must extend the abstract class <code>AbstractModuleCenterModule</code>. If you want to create such a class, you can create it using GXModules (<code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Classes/MySampleModuleCenterModule.inc.php</code>). Please mind the following naming convention: <code>[ModuleName]ModuleCenterModule.inc.php</code>. Every class implementing the abstract class <code>AbstractModuleCenterModule</code> needs to use the <code>ModuleCenterModule</code> for their class names.</p> <p>Such a class has three characteristics:</p> <ul> <li>Title</li> <li>Description</li> <li>Sort number</li> </ul> <p>These must be set using the protected method <code>_init()</code>. The class variables are called <code>title</code>, <code>description</code> and <code>sortOrder</code>. To set title and description language-dependent, the <code>\\LanguageTextManager</code> is available as a class variable <code>languageTextManager</code>. Please note that the description is limited to 500 characters and no HTML tags are allowed. Title and description should only consist of a short module description.</p> <pre><code>class MySampleModuleCenterModule extends AbstractModuleCenterModule\n{\n   protected function _init()\n   {\n      $this-&gt;title       = $this-&gt;languageTextManager-&gt;get_text('sample_title');\n      $this-&gt;description = $this-&gt;languageTextManager-&gt;get_text('sample_description');\n      $this-&gt;sortOrder   = 99999;\n   }\n}\n</code></pre> <p>The installation and uninstallation don't need to be implemented. During installation a data record with the key <code>MODULE_CENTER_[MOLDULE_NAME]_INSTALLED</code> is by default created in the table <code>gx_configuration</code>. As value, <code>1</code> is saved for installed and <code>0</code> for uninstalled. The value can be retrieved shop-wide with the function <code>gm_get_conf($key)</code> method. The status can also be queried via the public method <code>isInstalled()</code> of the class itself.</p> <p>Optionally, code can be executed during installation and uninstallation. The public methods <code>install</code> and <code>uninstall</code> are available for this purpose. The database can be accessed via the class variable <code>db</code>. Please note that <code>parent::install()</code> or <code>parent::uninstall()</code> have to be called if an entry is to be created in the <code>gm_configuration</code> table. This is strongly recommended! Otherwise, the method <code>_setIsInstalled</code> has to be implemented, which sets the status of the class variable <code>isInstalled</code> according to Boolean.</p> <pre><code>class MySampleModuleCenterModule extends AbstractModuleCenterModule\n{\n   protected function _init()\n   {\n      ...\n   }\n\n\n   /**\n    * Install module and set own install flag in module table\n    */ \n   public function install()\n   {\n      parent::install();\n\n      $this-&gt;db-&gt;set('installed', '1')-&gt;where('key', 'MY_SAMPLE_INSTALLED')-&gt;update('my_sample_module_table');\n   }\n\n\n   /**\n    * Uninstall module and set own install flag in module table\n    */ \n   public function uninstall()\n   {\n      parent::uninstall();\n\n      $this-&gt;db-&gt;set('installed', '0')-&gt;where('key', 'MY_SAMPLE_INSTALLED')-&gt;update('my_sample_module_table');\n   }\n}\n</code></pre> <p>In the Module Center an Edit button can be found for each entry after installation. The behaviour of this button is controlled by a controller class, which must extend the abstract class <code>AbstractModuleCenterModuleController</code>. You can create this using GXModules (<code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Classes/MySampleModuleCenterModuleController.inc.php</code>). The following naming convention applies <code>[ModuleName]ModuleCenterModuleController.inc.php</code>.</p> <p>If the Edit button is to redirect to another page, it is sufficient to write the URL in the protected method <code>init</code> in the class variable <code>redirectUrl</code>.</p> <pre><code>class MySampleModuleCenterModuleController extends AbstractModuleCenterModuleController\n{\n   protected function _init()\n   {\n      $this-&gt;redirectUrl = xtc_href_link('sample.php');\n   }\n}\n</code></pre> <p>If several pages are to be called up via the Module Center entry, the Edit button can lead to a subpage where further linked buttons for the desired pages are displayed. For this purpose, the protected method <code>_init</code> no longer sets the class variable <code>redirectUrl</code>, but defines a title for the subpage and fills an array of buttons. In the controller class the <code>\\LanguageTextManager</code> for language-dependent texts is again available as class variable <code>languageTextManager</code>. The page title and the buttons are set in the class variables <code>pageTitle</code> and <code>buttons</code>. <code>buttons</code> has the following structure:</p> <pre><code>array(\n   array(\n      'text' =&gt; 'Button-Label 1',\n      'url'  =&gt; 'Button-URL 1'\n   ),\n   array(\n      'text' =&gt; 'Button-Label 2',\n      'url'  =&gt; 'Button-URL 2'\n   )\n)\n</code></pre> <p>The complete example looks like this:</p> <pre><code>class MySampleModuleCenterModuleController extends AbstractModuleCenterModuleController\n{\n   protected function _init()\n   {\n      $this-&gt;pageTitle = $this-&gt;languageTextManager-&gt;get_text('sample_title');\n      $this-&gt;buttons   = array(\n         array(\n            'text' =&gt; $this-&gt;languageTextManager-&gt;get_text('sample_config_page'),\n            'url'  =&gt; xtc_href_link('sample.php')\n         ),\n         array(\n            'text' =&gt; $this-&gt;languageTextManager-&gt;get_text('sample_api_page'),\n            'url'  =&gt; xtc_href_link('sample.php', 'page=api')\n         ),\n         array(\n            'text' =&gt; $this-&gt;languageTextManager-&gt;get_text('sample_external_login_page'),\n            'url'  =&gt; 'http://www.example.org/merchants/login/'\n         )\n      );\n   }\n}\n</code></pre> <p>It is also possible to control the entire module configuration in the controller itself and not use any other classes and pages at all. A <code>ModuleCenterModuleController</code> is a normal <code>AdminHttpViewController</code>, which can be used to create an entire admin page.</p>"},{"location":"module-development/admin/custom-module-center-module/#what-should-i-pay-special-attention-to-when-working-with-the-module-center-or-which-common-mistakes-should-i-avoid","title":"What should I pay special attention to when working with the Module Center or which common mistakes should I avoid?","text":"<ul> <li>After creating the classes for the Module Center entry, the cache for module information must be cleared in the   admin under the menu item Toolbox &gt; Cache.</li> <li>Do not forget to register the controller in the EnvironmentHttpViewControllerRegistryFactory.</li> </ul>"},{"location":"module-development/admin/custom-module-center-module/#examples-that-can-be-tested-in-the-shop","title":"Examples that can be tested in the shop","text":"<p>Here you can find an example containing all showed components, like;</p> <ul> <li>Example Module Center Module inside the <code>GXMainComponents/Modules</code> directory.</li> <li>Example Module Center Controller inside the <code>GXMainComponents/Controllers/HttpView/ModuleCenter</code> directory.</li> <li>Example module page inside the <code>admin/html/content/module_center</code> directory.</li> <li>English language file menu item inside the <code>lang/english/user_sections</code> directory.</li> <li>English language file module center entry inside the <code>lang/english/user_sections</code> directory.</li> <li>German language file menu entry inside the <code>lang/german/user_sections</code> directory.</li> <li>German language file module center entry inside the <code>lang/german/user_sections</code> directory.</li> <li>Example menu item inside the <code>GXUserComponents/conf/admin_menu</code> directory.</li> </ul> <p>To test the example, after copying the files, the cache for texts, module information and page output must be cleared in the admin under the menu item Toolbox &gt; Cache.</p>"},{"location":"module-development/admin/define-http-routes/","title":"Adding and managing HTTP routes","text":"<p>Routes can easily be created and managed by creating a <code>routes.php</code> file anywhere inside your modules directory (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/routes.php</code>). The shop software will automatically determine these files and use them to define the available HTTP routes of the application.</p> <p>These <code>routes.php</code> will be included and therefore need to return a callback method. The first parameter of this callback method must be the <code>Gambio\\Core\\Application\\Routing\\RouteCollector</code>, which is used to manage the HTTP routes.</p> <p>The following example shows the content of such a <code>routes.php</code> file and how routes can be added and modified:</p>"},{"location":"module-development/admin/define-http-routes/#adding-a-getpostetc-route","title":"Adding a GET/POST/etc. route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n    // ... similar for PUT, PATCH, DELETE and OPTION\n};\n</code></pre>"},{"location":"module-development/admin/define-http-routes/#replace-callback-for-an-already-defined-route","title":"Replace callback for an already defined route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HTTPActions\\AnotherSampleGetAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'get')-&gt;setCallback(AnotherSampleGetAction::class);\n};\n</code></pre>"},{"location":"module-development/admin/define-http-routes/#add-a-middleware-to-a-specific-route","title":"Add a middleware to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpMiddlewares\\SampleGetMiddleware;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpMiddlewares\\SamplePostMiddleware;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;addMiddleware(SampleGetMiddleware::class);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;addMiddleware(SampleGetMiddleware::class);\n};\n</code></pre>"},{"location":"module-development/admin/define-http-routes/#add-an-argument-to-a-specific-route","title":"Add an argument to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $sampleArgumentName = 'argumentName';\n    $sampleArgumentValue = 'argumentValue';\n\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;addArgument($sampleArgumentName, $sampleArgumentValue);\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;addArgument($sampleArgumentName, $sampleArgumentValue);\n};\n</code></pre>"},{"location":"module-development/admin/define-http-routes/#add-a-name-to-a-specific-route","title":"Add a name to a specific route","text":"<pre><code>use Gambio\\Core\\Application\\Routing\\RouteCollector;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SampleGetAction;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\HttpActions\\SamplePostAction;\n\nreturn static function (RouteCollector $routeCollector) {\n    $routeCollector-&gt;get('/admin/my-module', SampleGetAction::class)-&gt;setName('my-sample-get-route');\n    $routeCollector-&gt;post('/admin/my-module', SamplePostAction::class);\n\n    // If route has been already defined \n    $routeCollector-&gt;getDefinedRoute('/admin/my-module', 'post')-&gt;setName('my-sample-post-route');\n};\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/","title":"Creating a generic Module Center module","text":"<p>At some point your module might need some kind of configuration page for your module. Using the <code>GXModule.json</code> file in the root directory of your module, you can define an automatically created configurations page that can be accessed by our Module Center.</p> <p></p> <p>If you take a closer look at the following example configuration page, you can see that there are multiple sections that include several configurations, which have specific types and parameters.</p> <p></p>"},{"location":"module-development/admin/gx-modules-json/#defining-sections","title":"Defining sections","text":"<p>To start with everything is based on the JSON structure of the <code>GXModule.json</code> file, with the <code>configuration</code> attribute.</p> <pre><code>{\n    \"title\": \"sample_module.module_title\",\n    \"description\": \"sample_module.module_description\",\n    \"forceIncludingFiles\": false,\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_title\",\n            \"fields\": {}\n        }\n    ]\n}\n</code></pre> <p>Each JSON object inside the <code>configuration</code> array defines a section of the configuration page. Similar to the <code>title</code> attribute, each of these JSON object inside the <code>configuration</code> array reference their <code>title</code> the same way. Using the <code>fields</code> object you can define the specific configurations that belong to this section. More information about defining configurations will be given in the next part.</p> <p>Besides these two attributes, there is also another optional attribute called <code>tab</code> that references a text phrase (like the <code>title</code> and <code>description</code> attributes). If you add this attribute, a tab will be added to the configuration page and this tab will only contain the sections with the same reference.</p> <pre><code>{\n    \"title\": \"sample_module.module_title\",\n    \"description\": \"sample_module.module_description\",\n    \"forceIncludingFiles\": false,\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_title_1\",\n            \"tab\": \"sample_module.tab_title_1\",\n            \"fields\": {}\n        },\n        {\n            \"title\": \"sample_module.section_title_2\",\n            \"tab\": \"sample_module.tab_title_1\",\n            \"fields\": {}\n        },\n        {\n            \"title\": \"sample_module.section_title_3\",\n            \"tab\": \"sample_module.tab_title_2\",\n            \"fields\": {}\n        },\n        {\n            \"title\": \"sample_module.section_title_4\",\n            \"fields\": {}\n        }\n    ]\n}\n</code></pre> <p>If some sections do have a <code>tab</code> attribute and some don't, then all sections without this attribute will be grouped by a <code>General</code> (or in German <code>Allgemein</code>) tab.</p>"},{"location":"module-development/admin/gx-modules-json/#defining-configurations","title":"Defining configurations","text":"<p>Configurations itself can be defined by using the <code>fields</code> attribute inside the JSON object for describing the sections. Therefore, you have two possibilities to select one of many configuration types and use parameters to change this configuration regarding your needs. Defining a configuration named <code>sampleConfig</code>, a simple input value, looks like this:</p> <pre><code>{\n    \"title\": \"sample_module.module_title\",\n    \"description\": \"sample_module.module_description\",\n    \"forceIncludingFiles\": false,\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_title\",\n            \"fields\": {\n                \"sampleConfig\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.input_field\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>The <code>type</code> attribute defines the type of the configuration and <code>label</code> references a text phrase. The key <code>sampleConfig</code> is used for identifying, storing and reading the configuration and its given value. How to get a specific configuration value will be explained in the chapter [Reading configuration values].</p> <p>The following part lists the available types, provides examples how to define them and lists all (optional) parameters that can be used to modify the configuration.</p>"},{"location":"module-development/admin/gx-modules-json/#configuration-types","title":"Configuration types","text":""},{"location":"module-development/admin/gx-modules-json/#switcher","title":"Switcher","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_switcher\",\n            \"fields\": {\n                \"sampleSwitcher\": {\n                    \"type\": \"checkbox\",\n                    \"label\": \"sample_module.label_switcher\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#simple-input-field","title":"Simple input field","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleInput\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.label_input\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>regex</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#password-input-field","title":"Password input field","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"samplePassword\": {\n                    \"type\": \"password\",\n                    \"label\": \"sample_module.label_password\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>regex</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#email-input-field","title":"Email input field","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleEmail\": {\n                    \"type\": \"email\",\n                    \"label\": \"sample_module.label_email\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>regex</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#numeric-input-field","title":"Numeric input field","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleNumber\": {\n                    \"type\": \"number\",\n                    \"label\": \"sample_module.label_number\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>max</code></li> <li><code>min</code></li> <li><code>readonly</code></li> <li><code>regex</code></li> <li><code>required</code></li> <li><code>step</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#color-picker","title":"Color picker","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleColor\": {\n                    \"type\": \"color\",\n                    \"label\": \"sample_module.label_color\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#date-picker","title":"Date picker","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleDate\": {\n                    \"type\": \"date\",\n                    \"label\": \"sample_module.label_date\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#date-and-time-picker","title":"Date and time picker","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleDateTime\": {\n                    \"type\": \"datetime\",\n                    \"label\": \"sample_module.label_datetime\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#file-update","title":"File update","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleFile\": {\n                    \"type\": \"file\",\n                    \"label\": \"sample_module.label_file\",\n                    \"folder\": \"images\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>folder</code>: Destination directory for the updated file, based on the root directory of the shop.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>accept</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#textarea","title":"Textarea","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleTextarea\": {\n                    \"type\": \"textarea\",\n                    \"label\": \"sample_module.label_textarea\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#html-editor","title":"HTML Editor","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_inputs\",\n            \"fields\": {\n                \"sampleEditor\": {\n                    \"type\": \"editor\",\n                    \"label\": \"sample_module.label_editor\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>readonly</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#dropdown","title":"Dropdown","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleSelect\": {\n                    \"type\": \"select\",\n                    \"label\": \"sample_module.label_select\",\n                    \"values\": [\n                        {\n                            \"value\": \"value1\",\n                            \"text\": \"sample_module.option_value1\"\n                        },\n                        {\n                            \"value\": \"value2\",\n                            \"text\": \"sample_module.option_value2\"\n                        },\n                        {\n                            \"value\": \"value2\",\n                            \"text\": \"sample_module.option_value3\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>values</code>: Contains a list of all available items. The <code>value</code> attribute defines the value of the item and the             <code>text</code> attribute references a text phrase.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#dropdown-with-multi-select","title":"Dropdown with multi select","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleMultiSelect\": {\n                    \"type\": \"multiselect\",\n                    \"label\": \"sample_module.label_multiselect\",\n                    \"values\": [\n                        {\n                            \"value\": \"value1\",\n                            \"text\": \"sample_module.option_value1\"\n                        },\n                        {\n                            \"value\": \"value2\",\n                            \"text\": \"sample_module.option_value2\"\n                        },\n                        {\n                            \"value\": \"value2\",\n                            \"text\": \"sample_module.option_value3\"\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>values</code>: Contains a list of all available items. The <code>value</code> attribute defines the value of the item and the             <code>text</code> attribute references a text phrase.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>selected</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#customer-groups","title":"Customer groups","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleCustomerGroup\": {\n                    \"type\": \"customer_group\",\n                    \"label\": \"sample_module.label_customer_group\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#order-status","title":"Order status","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleOrderStatus\": {\n                    \"type\": \"order_status\",\n                    \"label\": \"sample_module.label_order_status\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#countries","title":"Countries","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleCountryList\": {\n                    \"type\": \"countries\",\n                    \"label\": \"sample_module.label_countries\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#languages","title":"Languages","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_selects\",\n            \"fields\": {\n                \"sampleLanguage\": {\n                    \"type\": \"languages\",\n                    \"label\": \"sample_module.label_languages\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Optional parameters:</p> <ul> <li><code>default_value</code></li> <li><code>required</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#ajax-button","title":"AJAX button","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_buttons\",\n            \"fields\": {\n                \"sampleAjaxButton\": {\n                    \"type\": \"button\",\n                    \"label\": \"sample_module.label_button_ajax\",\n                    \"text\": \"sample_module.text_button_ajax\",\n                    \"action\": {\n                        \"controller\": \"SampleButtonController\",\n                        \"method\": \"sampleAction\",\n                        \"message\": \"sample_module.text_success_button_ajax\"\n                    }\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>action</code>: Defines the AJAX action that's triggered after clicking the button.</li> <li><code>controller</code>: Defines the controller class that is to be called.</li> <li><code>method</code>:     Defines the method of the controller class that is to be called.</li> <li><code>message</code>:    References the text phrase for the success message that is to be be shown.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>color</code></li> <li><code>tooltip</code></li> </ul> <p>Notice: The first provided argument to the called controller method contains all form data of the configuration page. For an easier handling, you can extend from the <code>\\GXModuleController</code> class.</p>"},{"location":"module-development/admin/gx-modules-json/#modal-button","title":"Modal button","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_buttons\",\n            \"fields\": {\n                \"sampleModalButton\": {\n                    \"type\": \"button\",\n                    \"label\": \"sample_module.label_button_modal\",\n                    \"text\": \"sample_module.text_button_modal\",\n                    \"modal\": \"sampleModal\"\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>text</code>: References the text phrase that is to be used as the modal text.</li> <li><code>modal</code>: Defines which modal is to be shown.</li> </ul> <p>Optional parameters:</p> <ul> <li><code>color</code></li> <li><code>tooltip</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#modal-with-simple-text","title":"Modal with simple text","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_buttons\",\n            \"fields\": {\n                \"sampleModal\": {\n                    \"type\": \"modal\",\n                    \"title\": \"sample_module.modal_title_sample_modal\",\n                    \"description\": \"sample_module.modal_description_sample_modal\",\n                    \"buttons\": {\n                        \"close\": {\n                            \"text\": \"buttons.cancel\"\n                        },\n                        \"delete\": {\n                            \"text\": \"buttons.delete\",\n                            \"action\": {\n                                \"controller\": \"SampleButtonController\",\n                                \"method\": \"someAction\",\n                                \"message\": \"sample_module.text_success_button_modal\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>title</code>:             References the text phrase that is to be used as the modal title.</li> <li><code>description</code>:       References the text phrase that is to be used as the modal text.</li> <li><code>buttons</code>:           Defines the available buttons.</li> <li><code>close</code>, <code>delete</code>: Name of the available buttons.</li> <li><code>action</code>:          (Optional) Defines the AJAX action that's triggered after clicking the button.                        If this attribute is missing, the modal will be closed after clicking the button.<ul> <li><code>controller</code>:    (Optional) Defines the controller class that is to be called.</li> <li><code>method</code>:        (Optional) Defines the method of the controller class that is to be called.</li> <li><code>message</code>:       (Optional) References the text phrase for the success message that is to be shown.</li> </ul> </li> </ul> <p>Optional parameters:</p> <ul> <li><code>color</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#modal-with-rendered-html","title":"Modal with rendered HTML","text":"<pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_buttons\",\n            \"fields\": {\n                \"sampleModal2\": {\n                    \"type\": \"modal\",\n                    \"title\": \"sample_module.modal_title_sample_modal\",\n                    \"content\": \"Vendor/Module/Admin/Html/modal_content.html\",\n                    \"buttons\": {\n                        \"close\": {\n                            \"text\": \"buttons.cancel\"\n                        },\n                        \"delete\": {\n                            \"text\": \"buttons.delete\",\n                            \"action\": {\n                                \"controller\": \"SampleButtonController\",\n                                \"method\": \"someAction\",\n                                \"message\": \"sample_module.text_success_button_modal\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n</code></pre> <p>Necessary parameters:</p> <ul> <li><code>content</code>:           References the HTML file that is to be rendered.</li> <li><code>buttons</code>:           Defines the available buttons.</li> <li><code>close</code>, <code>delete</code>: Name of the available buttons.</li> <li><code>action</code>:          (Optional) Defines the AJAX action that's triggered after clicking the button.                        If this attribute is missing, the modal will be closed after clicking the button.<ul> <li><code>controller</code>:    (Optional) Defines the controller class that is to be called.</li> <li><code>method</code>:        (Optional) Defines the method of the controller class that is to be called.</li> <li><code>message</code>:       (Optional) References the text phrase for the success message that is to be shown.</li> </ul> </li> </ul> <p>Optional parameters:</p> <ul> <li><code>color</code></li> </ul>"},{"location":"module-development/admin/gx-modules-json/#optionale-parameters","title":"Optionale parameters","text":""},{"location":"module-development/admin/gx-modules-json/#accept","title":"accept","text":"<p>Defines the accepted file extensions for an uploading file.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalAccept\": {\n                    \"type\": \"file\",\n                    \"label\": \"sample_module.label_optional_accept\",\n                    \"folder\": \"images\",\n                    \"accept\": \"image/*\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#color","title":"color","text":"<p>Defines the color of the button. Possible values are: <code>default</code>, <code>primary</code>, <code>success</code>, <code>info</code>, <code>warning</code>, <code>danger</code>, and <code>link</code>.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalColor\": {\n                    \"type\": \"button\",\n                    \"label\": \"sample_module.label_button_modal\",\n                    \"text\": \"sample_module.text_button_modal\",\n                    \"modal\": \"sampleModal\",\n                    \"color\": \"warning\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#default_value","title":"default_value","text":"<p>Defines the default value of the configuration.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalDefaultValue\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.label_input\",\n                    \"default_value\": \"Lorem ipsum \u2026\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#max","title":"max","text":"<p>Defines the maximal value of a numeric input field.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalMax\": {\n                    \"type\": \"number\",\n                    \"label\": \"sample_module.label_number\",\n                    \"max\": 50\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#min","title":"min","text":"<p>Defines the minimal value of a numeric input field.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalMix\": {\n                    \"type\": \"number\",\n                    \"label\": \"sample_module.label_number\",\n                    \"mix\": 50\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#regex","title":"regex","text":"<p>Defines a pattern for the input value that needs to be matched.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalRegex\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.label_input\",\n                    \"regex\": \"[0-9()-\\\\+\\\\s]+\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#required","title":"required","text":"<p>Defines if this input field is required.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalRequired\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.label_input\",\n                    \"required\": true\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#selected","title":"selected","text":"<p>Defines the default value for multi select dropdowns (similar to <code>default_value</code>).</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalSelected\": {\n                    \"type\": \"multiselect\",\n                    \"label\": \"sample_module.label_optional_selected\",\n                    \"values\": [\n                        {\n                            \"value\": \"value1\",\n                            \"text\": \"sample_module.option_value1\"\n                        },\n                        {\n                            \"value\": \"value2\",\n                            \"text\": \"sample_module.option_value2\"\n                        },\n                        {\n                            \"value\": \"value3\",\n                            \"text\": \"sample_module.option_value3\"\n                        }\n                    ],\n                    \"selected\": [\n                        \"value1\",\n                        \"value2\"\n                    ]\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#step","title":"step","text":"<p>Defines the steps for a numeric input value.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalStep\": {\n                    \"type\": \"number\",\n                    \"label\": \"sample_module.label_optional_step\",\n                    \"step\": 0.5\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"module-development/admin/gx-modules-json/#tooltip","title":"tooltip","text":"<p>Defines a tooltip.</p> <pre><code>{\n    \"configuration\": [\n        {\n            \"title\": \"sample_module.section_optionals\",\n            \"fields\": {\n                \"sampleOptionalTooltip\": {\n                    \"type\": \"text\",\n                    \"label\": \"sample_module.label_optional_tooltip\",\n                    \"tooltip\": {\n                        \"type\": \"info\",\n                        \"text\": \"sample_module.text_tooltip\"\n                    }\n                }\n            }\n        }\n    ]\n}\n</code></pre> <ul> <li><code>type</code>: Defines the type of the tooltip. Possible values are: <code>info</code> und <code>error</code>.</li> <li><code>text</code>: References the text phrase for the tooltip.</li> </ul>"},{"location":"module-development/admin/gx-modules-json/#reading-a-configuration-value","title":"Reading a configuration value","text":"<p>To get saved configuration values, you need to use the <code>GXModuleConfigurationStorage</code>. The following example shows, how to initialize and request a configuration value.</p> <pre><code>$configurationStorage = MainFactory::create('GXModuleConfigurationStorage', '&lt;Vendor&gt;/&lt;Module&gt;');\n$activeValue = $configurationStorage-&gt;get('active');\n</code></pre> <p>Please mind, that the second argument of the <code>create</code> method uses placeholders for the vendor and module name.</p> <p>Notice</p> <p>If no module configuration had been saved, the <code>GXModuleConfigurationStorage</code> will provide the default configuration value from the <code>GXModule.json</code>.</p>"},{"location":"module-development/admin/gx-modules-json/#type-of-the-return-value-for-each-type","title":"Type of the return value for each type","text":"Type Type of the return value <code>checkbox</code> string, <code>1</code> for true, <code>0</code> for false <code>text</code> string <code>password</code> string <code>email</code> string <code>number</code> string <code>color</code> string, color code with prefixed <code>#</code> <code>date</code> string <code>datetime</code> string <code>file</code> string, file path based on the root directory of the shop <code>textarea</code> string, <code>editor</code> string, <code>select</code> string <code>multiselect</code> array <code>customer_group</code> string <code>order_status</code> string <code>countries</code> string <code>languages</code> string"},{"location":"module-development/admin/gx-modules-json/#detailed-example","title":"Detailed example","text":"<p>We created a detailed example that contains every possible type:</p> <ul> <li>Example as ZIP files</li> </ul>"},{"location":"module-development/admin/http-actions/","title":"Creating a new HTTP action","text":"<p>Action classes are responsible for processing HTTP requests of specific routes. If a route has been called, the assigned action class will be executed. Every route can only have one action class assigned.</p> <p>There are abstract classes with additional functionality, from which your action class can be inherited. For example, the <code>Gambio\\Admin\\Application\\Http\\AdminModuleAction</code> provides a <code>render</code> method to create Gambio Admin pages.  </p> <p>The <code>handle</code> method provides the parameters (<code>\\Gambio\\Core\\Application\\Http\\Request $request</code> and <code>\\Gambio\\Core\\Application\\Http\\Response $response</code>) to access request information and building a response.</p> <p>The action class must implement the abstract method <code>handle</code>, which will be called when processing the action class and must return a response object.</p> <p>It is recommended to inject your services in actions to perform any business logic by registering the action class using a Service Provider.</p>"},{"location":"module-development/admin/http-actions/#examples","title":"Examples","text":""},{"location":"module-development/admin/http-actions/#simple-text-response","title":"Simple text response","text":"<pre><code>namespace GXModules/&lt;Vendor&gt;/&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\Http\\Request;\nuse Gambio\\Core\\Application\\Http\\Response;\nuse Gambio\\Admin\\Application\\Http\\AdminModuleAction;\n\n/**\n * Class SampleAction\n * @package GXModules/&lt;Vendor&gt;/&lt;Module&gt;\n */\nclass SampleAction extends AdminModuleAction\n{\n    /**\n     * Returns a text response.\n     * \n     * @return Response\n     */\n    public function handle(Request $request, Response $response): Response\n    {\n        return $response-&gt;write('Hello World');\n    }\n}\n</code></pre>"},{"location":"module-development/admin/http-actions/#json-response","title":"JSON response","text":"<pre><code>namespace GXModules/&lt;Vendor&gt;/&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\Http\\Request;\nuse Gambio\\Core\\Application\\Http\\Response;\nuse Gambio\\Admin\\Application\\Http\\AdminModuleAction;\n\n/**\n * Class SampleAction\n * @package GXModules/&lt;Vendor&gt;/&lt;Module&gt;\n */\nclass SampleAction extends AdminModuleAction\n{\n    /**\n     * Returns a JSON response.\n     * \n     * @return Response\n     */\n    public function handle(Request $request, Response $response): Response\n    {\n        $data = ['hello' =&gt; 'world'];\n\n        return $response-&gt;withJson($data);\n    }\n}\n</code></pre>"},{"location":"module-development/admin/http-actions/#redirect","title":"Redirect","text":"<pre><code>namespace GXModules/&lt;Vendor&gt;/&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\Http\\Request;\nuse Gambio\\Core\\Application\\Http\\Response;\nuse Gambio\\Admin\\Application\\Http\\AdminModuleAction;\n\n/**\n * Class SampleAction\n * @package GXModules/&lt;Vendor&gt;/&lt;Module&gt;\n */\nclass SampleAction extends AdminModuleAction\n{\n    /**\n     * Does a redirect.\n     * \n     * @return Response\n     */\n    public function handle(Request $request, Response $response): Response\n    {\n        $url = \"{$this-&gt;url-&gt;admin()}/sample-redirect-url\";\n\n        return $response-&gt;withRedirect($url);\n    }\n}\n</code></pre>"},{"location":"module-development/admin/http-actions/#gambio-admin-page-response","title":"Gambio Admin page response","text":"<pre><code>namespace GXModules/&lt;Vendor&gt;/&lt;Module&gt;;\n\nuse Gambio\\Core\\Application\\Http\\Request;\nuse Gambio\\Core\\Application\\Http\\Response;\nuse Gambio\\Admin\\Application\\Http\\AdminModuleAction;\n\n/**\n * Class SampleAction\n * @package GXModules/&lt;Vendor&gt;/&lt;Module&gt;\n */\nclass SampleAction extends AdminModuleAction\n{\n    /**\n     * Renders a admin template.\n     * \n     * @return Response\n     */\n    public function handle(Request $request, Response $response): Response\n    {\n        $pageTitle    = $this-&gt;translate('sample_module_title_text_phrase', 'sample_module_section');\n        $templatePath = '/path/to/template/file.html';\n        $templateData = [\n            // key value pairs that are accessible in the template\n            'greeting' =&gt; 'Hello World'\n        ];\n        $template     = $this-&gt;render($pageTitle, $templatePath, $templateData);\n\n        return $response-&gt;write($template);\n    }\n}\n</code></pre> <p>For this example, the template file could look like this:</p> <pre><code>&lt;!-- /path/to/template/file.html --&gt;\n{extends file=\"layout.html\"}\n\n{block name=\"content\"}\n    &lt;div&gt;{$greeting}&lt;/div&gt;\n{/block}\n</code></pre>"},{"location":"module-development/general/all-extenders/","title":"List of all available extenders (deprecated)","text":"<p>Notice</p> <p>The content of this page references the old overloading and extender system that we used in the legacy architecture. The new GX4 architecture does not support this. There are still some parts of the shop software that are using the old architecture and that's why we still provide this information.</p>"},{"location":"module-development/general/all-extenders/#adminapplicationbottomextendercomponent","title":"AdminApplicationBottomExtenderComponent","text":"<p>Class name: <code>AdminApplicationBottomExtenderComponent</code></p> <p>File: <code>system/extender/AdminApplicationBottomExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>application_bottom.php</code> in the Gambio Admin. Through an overload, it is possible to execute source code on every page in the Gambio Admin at the bottom of the page. Because the extender is loaded outside the body tag, no output should be generated.</p>"},{"location":"module-development/general/all-extenders/#adminapplicationtopextendercomponent","title":"AdminApplicationTopExtenderComponent","text":"<p>Class name: <code>AdminApplicationTopExtenderComponent</code></p> <p>File: <code>system/extender/AdminApplicationTopExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>application_top.php</code> in the Gambio Admin. Through an overload, it is possible to execute source code on every page in the Gambio Admin at the beginning of the page. Because the extender is loaded outside the body tag, no output should be generated.</p>"},{"location":"module-development/general/all-extenders/#adminapplicationtopprimalextendercomponent","title":"AdminApplicationTopPrimalExtenderComponent","text":"<p>Class name: <code>AdminApplicationTopPrimalExtenderComponent</code></p> <p>File: <code>system/extender/AdminApplicationTopPrimalExtenderComponent.inc.php</code></p> <p>Description: This extender works in the same way as the AdminApplicationTopExtender, except that this extender is executed at an earlier location of [application_top.php]. This Extender is the earliest way to inject your code into the Gambio Admin.</p>"},{"location":"module-development/general/all-extenders/#admincategoriesextendercomponent","title":"AdminCategoriesExtenderComponent","text":"<p>Class name: <code>AdminCategoriesExtenderComponent</code></p> <p>File: <code>system/extender/AdminCategoriesExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>classes/categories.php</code> in the Gambio Admin. Through an overload, it is possible to intervene when editing (saving or deleting) a product or category and to include your source code.</p>"},{"location":"module-development/general/all-extenders/#admineditcategoryextendercomponent","title":"AdminEditCategoryExtenderComponent","text":"<p>Class name: <code>AdminEditCategoryExtenderComponent</code></p> <p>File: <code>system/extender/AdminEditCategoryExtenderComponent.inc.php</code></p> <p>Description: This extender is used to extend the form in category editing. There are four different output positions, to each of which individual contents, such as input fields or information, can be added.</p> <p>The positions are: - <code>top</code>: above the category master data - <code>left</code>: under category filter - <code>right</code>: under the position <code>left</code> - <code>bottom</code>: under the category details</p> <p>The names of the positions <code>left</code> and <code>right</code> describe their location in the old admin area (version &lt; 2.5) and have been kept for backwards compatibility.</p> <p>The assignment of contents to a position follows the following structure:</p> <pre><code>$this-&gt;v_output_buffer['&lt;top|left|right|bottom&gt;']['&lt;custom_identifier&gt;'] = array('title' =&gt; '&lt;headline&gt;', 'content' =&gt; '&lt;content&gt;');\n</code></pre> <ul> <li><code>&lt;top|left|right|bottom&gt;</code>: Position specification for the resulting box (<code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code>)</li> <li><code>&lt;custom_identifier&gt;</code>: Unique identifier for the upload of internal identification</li> <li><code>&lt;headline&gt;</code>: Free text for the header of the resulting box</li> <li>`\": content of the resulting box <p>Example of an <code>AdminEditCategoryExtender</code> upload:</p> <pre><code>class SampleAdminEditCategoryExtender extends SampleAdminEditCategoryExtender_parent\n{\n    function proceed()\n    {\n        parent::proceed();\n\n        $this-&gt;v_output_buffer['top']['sampleOverload'] = array('title' =&gt; 'TOP Headline', 'content' =&gt; 'Top content');\n        $this-&gt;v_output_buffer['bottom']['sampleOverload'] = array('title' =&gt; 'BOTTOM Headline', 'content' =&gt; 'Bottom content');\n        $this-&gt;v_output_buffer['left']['sampleOverload'] = array('title' =&gt; 'LEFT Headline', 'content' =&gt; 'Left content');\n        $this-&gt;v_output_buffer['right']['sampleOverload'] = array('title' =&gt; 'RIGHT Headline', 'content' =&gt; 'Right content');\n    }\n}\n</code></pre> <p>This example creates boxes with dummy values at all available positions.</p> <p></p>"},{"location":"module-development/general/all-extenders/#admineditproductextendercomponent","title":"AdminEditProductExtenderComponent","text":"<p>Class name: <code>AdminEditProductExtenderComponent</code></p> <p>File: <code>system/extender/AdminEditProductExtenderComponent.inc.php</code></p> <p>Description: This extender is used to extend the form in article processing. There are two different output positions, to each of which individual contents such as input fields or information can be added. Within the extender the variable <code>product_data</code> can be accessed, containing all article data.</p> <p>The positions are:   - <code>top</code>: under the filter selection   - <code>bottom</code>: under the article pictures</p> <p>The old admin area contained two additional positions <code>left</code> and <code>right</code>. These are not supported in the current version.</p> <p>The assignment of contents to a position follows the subsequent structure:</p> <pre><code>$this-&gt;v_output_buffer['&lt;top|bottom&gt;']['&lt;custom_identifier&gt;'] = array('title' =&gt; '&lt;headline&gt;', 'content' =&gt; '&lt;content&gt;');\n</code></pre> <ul> <li><code>&lt;top|bottom&gt;</code>: Position specification for the resulting box (<code>top</code> or <code>bottom</code>)</li> <li><code>&lt;custom_identifier&gt;</code>: Unique identifier for the upload for internal identification</li> <li><code>&lt;headline&gt;</code>: Free text for the header of the resulting box</li> <li>`\": content of the resulting box <p>Example of an overload of the <code>AdminEditProductExtender</code>:</p> <pre><code>class SampleAdminEditProductExtender extends SampleAdminEditProductExtender_parent\n{\n    function proceed()\n    {\n        parent::proceed();\n\n        $this-&gt;v_output_buffer['top']['sample'] = array('title' =&gt; 'TOP Headline', 'content' =&gt; 'Top content');\n        $this-&gt;v_output_buffer['bottom']['sample'] = array('title' =&gt; 'BOTTOM Headline', 'content' =&gt; 'Bottom content');\n    }\n}\n</code></pre> <p>This example creates boxes with dummy values at all available positions.</p> <p></p>"},{"location":"module-development/general/all-extenders/#headerextendercomponent","title":"HeaderExtenderComponent","text":"<p>Class name: AdminHeaderExtenderComponent</p> <p>File: <code>system/extender/AdminHeaderExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated everywhere in the Gambio Admin. Through an overload any content, for instance JavaScript code, can be added to the <code>&lt;head&gt;</code>. It should be executed on every page in the shop. The integration of the overload happens last (second to last in Honeygrid) in the <code>&lt;head&gt;</code> area.</p>"},{"location":"module-development/general/all-extenders/#adminlanguageextendercomponent","title":"AdminLanguageExtenderComponent","text":"<p>Class name: <code>AdminLanguageExtenderComponent</code></p> <p>File: <code>system/extender/AdminLanguageExtenderComponent.inc.php</code></p> <p>Description: This extender is executed when editing a language on the <code>admin/languages.php</code>. The following actions are distinguished:</p> Action Description Accessing the language ID insert Inserting <code>$this-&gt;v_data_array['insert_id']</code> copy Copying <code>$this-&gt;v_data_array['insert_id']</code> save Changing <code>$this-&gt;v_data_array['GET']['lID']</code> deleteconfirm Deletion <code>$this-&gt;v_data_array['GET']['lID']</code> <p>In order to react differently to the various actions, a switch can be made to <code>$this-&gt;v_data_array['GET']['action']</code>. For the various actions, the language ID is accessed in different ways (see table above). For the <code>copy</code> action, the ID of the language from which the copy was made can be accessed via <code>$this-&gt;v_data_array['POST']['ref_language_id']</code>.</p> <p>Example of an overload of the <code>AdminLanguageExtender</code>:</p> <pre><code>class SampleAdminLanguageExtender extends SampleAdminLanguageExtender_parent\n{\n    public function proceed()\n    {\n        $logControl = MainFactory::create_object('LogControl', array(), true);\n\n        switch($this-&gt;v_data_array['GET']['action'])\n        {\n            case 'insert':\n                $logControl-&gt;notice('The language with ID ' .\n                    (int)$this-&gt;v_data_array['insert_id'] .\n                    ' was created.');\n                break;\n            case 'copy':\n                $logControl-&gt;notice('The language with ID ' .\n                    (int)$this-&gt;v_data_array['insert_id'] .\n                    ' wurde von einer Sprache mit der ID ' .\n                    (int)$this-&gt;v_data_array['POST']['ref_language_id'] .\n                    ' was copied.');\n                break;\n            case 'save':\n                $logControl-&gt;notice('The language with ID ' .\n                    (int)$this-&gt;v_data_array['GET']['lID'] .\n                    ' was changed.');\n                break;\n            case 'deleteconfirm':\n                $logControl-&gt;notice('The language with ID ' .\n                    (int)$this-&gt;v_data_array['GET']['lID'] .\n                    ' was deleted.');\n                break;\n        }\n\n        parent::proceed();\n    }\n}\n</code></pre> <p>This example creates different log entries depending on the executed action.</p>"},{"location":"module-development/general/all-extenders/#adminorderactionextendercomponent","title":"AdminOrderActionExtenderComponent","text":"<p>Class name: <code>AdminOrderActionExtenderComponent</code></p> <p>File: <code>system/extender/AdminOrderActionExtenderComponent.inc.php</code></p> <p>Description: This extender is executed when actions are performed via the order overview (<code>admin/orders.php</code>). As soon as the GET parameter <code>action</code> is filled, the extender is executed and can be used to define your actions. It is recommended to use this extender in combination with the AdminOrderOverviewExtender.</p> <p>The following actions are currently available:</p> Action Description Special Parameters update_order Change the order status <code>$this-&gt;v_data_array['order_updated']</code> - success indicator gm_multi_status Change multiple order statuses <code>$this-&gt;v_data_array['order_updated']</code> - success indicator resendordermail Regenerate order confirmation deleteconfirm Delete deleteccinfo Delete credit card information afterbuy_send Afterbuy <p>To be able to react differently to the different actions, a switch can be made to <code>$this-&gt;v_data_array['action']</code>.</p> <p>Example of an overload of the <code>AdminOrderActionExtender</code>:</p> <pre><code>class SyncCustomerEmail extends SyncCustomerEmail_parent\n{\n    public function proceed()\n    {\n        switch($this-&gt;v_data_array['action'])\n        {\n            case 'sync_email_address':\n                $this-&gt;_syncEmailAddress(new IdType((int)$this-&gt;v_data_array['GET']['oID']));\n                break;\n        }\n\n        parent::proceed();\n    }\n\n    private function _syncEmailAddress(IdType $orderId)\n    {\n        $orderReadService = StaticGXCoreLoader::getService('OrderRead');\n        $orderWriteService = StaticGXCoreLoader::getService('OrderWrite');\n        $customerReadService = StaticGXCoreLoader::getService('CustomerRead');\n\n        $order = $orderReadService-&gt;getOrderById($orderId);\n        $customerId = new IdType($order-&gt;getCustomerId());\n        $customer = $customerReadService-&gt;getCustomerById($customerId);\n        $actualEmail = $customer-&gt;getEmail();\n\n        $order-&gt;setCustomerEmail(new EmailStringType((string)$actualEmail));\n        $orderWriteService-&gt;updateOrder($order);\n    }\n}\n</code></pre> <p>This example reacts to the action parameter <code>sync_email_address</code> and replaces the email address stored in an order with the current email address specified in the customer record.</p>"},{"location":"module-development/general/all-extenders/#adminorderstatusmailextendercomponent","title":"AdminOrderStatusMailExtenderComponent","text":"<p>Class name: <code>AdminOrderStatusMailExtenderComponent</code></p> <p>File: <code>system/extender/AdminOrderStatusMailExtenderComponent.inc.php</code></p> <p>Description: With this extender, additional content can be added to the order status change email. The assignment of the contents follows the following grammar:</p> <p><code>$this-&gt;v_output_buffer[&lt;variable_name&gt;] = &lt;content&gt;</code></p> <p><code>&lt;variable_name&gt;</code>: Variable name for the e-mail template <code>&lt;content&gt;</code>: Content to be added to the mail</p> <p>The variable can be used in the e-mail template Admin: Change order status in source code mode with <code>{$&lt;variable_name&gt;}</code>, e.g. <code>{$lorem_ipsum}</code>.</p> <p></p> <p>Example of an overload of the <code>AdminOrderStatusMailExtender</code>:</p> <pre><code>class SampleAdminOrderStatusMailExtender extends SampleAdminOrderStatusMailExtender_parent\n{\n    public function proceed()\n    {\n        $this-&gt;v_output_buffer['lorem_ipsum'] = 'Lorem ipsum dolor sit amet.';\n\n        parent::proceed();\n    }\n}\n</code></pre> <p>The example adds the text \"Lorem ipsum dolor sit amet.\" in the order status change e-mail.</p> <p></p>"},{"location":"module-development/general/all-extenders/#applicationbottomextendercomponent","title":"ApplicationBottomExtenderComponent","text":"<p>Class name: <code>ApplicationBottomExtenderComponent</code></p> <p>File: <code>system/extender/ApplicationBottomExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>application_bottom.php</code> in the shop. Through an overload, it is possible to execute source code on every page in the shop at the end of the page. As the extender is loaded within the body tag, it is possible to generate HTML output in addition to PHP code and thus also execute JavaScript and CSS.</p> <p>In an overload of the <code>ApplicationBottomExtender</code> the following data are available:</p> Access Description <code>$this-&gt;v_data_array['cPath']</code> Category path: A sequence of <code>_</code>-separated category IDs <code>$this-&gt;v_data_array['products_id']</code> Product ID <code>$this-&gt;v_page</code> Page titles: Possible titles can be found in the table below <p>The following page titles are possible as values for <code>$this-&gt;v_page</code>:</p> Page title Description Account Customer/guest registration AccountHistory Order view under \"Your account\" AddressBookProcess Saving an address book entry CallbackService Callback service Cart Shopping cart Cat Category page Checkout All checkout pages GVSend Send a voucher Index Homepage Manufacturers Manufacturer page PriceOffer Price offer page ProductInfo Article detail page Wishlist Wishlist Withdrawal Withdrawal form <p>Example of an <code>ApplicationBottomExtender</code> overload:</p> <pre><code>class SampleApplicationBottomExtender extends SampleApplicationBottomExtender_parent\n{\n    function proceed()\n    {\n        $this-&gt;v_output_buffer[] = '&lt;span id=\"my_span\"&gt;This is my span.&lt;/span&gt;';\n        $this-&gt;v_output_buffer[] = '&lt;style type=\"text/css\"&gt;.green { color: green; }&lt;/style&gt;';\n        $this-&gt;v_output_buffer[] = '&lt;script type=\"text/javascript\"&gt;$(\"#my_span\").addClass(\"green\");&lt;/script&gt;';\n\n        parent::proceed();\n    }\n}\n</code></pre> <p>This example inserts the text \"This is my span.\" at the bottom of each page of the shop, defines a CSS class \"green\" that colours text green and executes JavaScript code that assigns this class to the text.</p> <p></p>"},{"location":"module-development/general/all-extenders/#applicationtopextendercomponent","title":"ApplicationTopExtenderComponent","text":"<p>Class name: <code>ApplicationTopExtenderComponent</code></p> <p>File: <code>system/extender/ApplicationTopExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>application_top.php</code> in the shop. Through an overload, it is possible to execute source code on every page in the shop at the beginning of the page. Since the extender is loaded outside the body tag, no output should be generated.</p>"},{"location":"module-development/general/all-extenders/#applicationtopprimalextendercomponent","title":"ApplicationTopPrimalExtenderComponent","text":"<p>Class name: <code>ApplicationTopPrimalExtenderComponent</code></p> <p>File: <code>system/extender/ApplicationTopPrimalExtenderComponent.inc.php</code></p> <p>Description: This extender works in the same way as the ApplicationTopExtender, except that this extender is executed at an earlier location of the <code>application_top.php</code>. This extender is the earliest way to inject your code into the shop.</p>"},{"location":"module-development/general/all-extenders/#checkoutsuccessextendercomponent","title":"CheckoutSuccessExtenderComponent","text":"<p>Class name: <code>CheckoutSuccessExtenderComponent</code></p> <p>File: <code>system/extender/CheckoutSuccessExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated in the <code>check_success.php</code>. Through an overload, it is possible to execute source code in the shop after a successful order and to add your HTML code. Adding HTML code is possible in different ways:</p> <ol> <li>Add content at any position    For HTML to be displayed, an appropriate Smarty variable (e.g. <code>{$lorem_ipsum}</code>) must be added to the    <code>checkout_success</code> template. This can be found under <code>templates/&lt;EyeCandy|Honeygrid&gt;/module/checkout_success.html</code>.    The assignment of the Smarty variable follows the following grammar:</li> </ol> <p><code>$this-&gt;v_output_buffer['&lt;variable_name&gt;'] = '&lt;html_code&gt;'</code></p> <ul> <li><code>&lt;variable_name&gt;</code>: variable name in the <code>checkout_success</code> template (e.g. <code>lorem_ipsum</code>)</li> <li><code>&lt;html_code&gt;</code>: Any HTML code</li> <li>Add content in a fixed position    A more comfortable way is the second option for adding content in a fixed position: The added HTML code is    displayed directly below the success message after the order has been completed. Adding HTML code follows the    following grammar:</li> </ul> <p><code>$this-&gt;html_output_array[] = '&lt;html_code&gt;'</code></p> <ul> <li><code>&lt;html_code&gt;</code>: Any HTML code</li> </ul> <p>The ID of the generated order can be accessed via <code>$this-&gt;v_data_array['orders_id']</code>.</p> <p>Example of an overload of the `CheckoutSuccessExtender``:</p> <pre><code>class SampleCheckoutSuccessExtender extends SampleCheckoutSuccessExtender_parent\n{\n    public function proceed()\n    {\n        parent::proceed();\n\n        $this-&gt;_someLogic(new IdType($this-&gt;v_data_array['orders_id']));\n\n        $this-&gt;html_output_array[] = '&lt;b&gt;My own success message.&lt;/b&gt;';\n    }\n\n    private function _someLogic(IdType $orderId)\n    {\n        // Some logic\n    }\n}\n</code></pre> <p>In this example, a text \"My own success message.\" is displayed in bold type.</p> <p></p>"},{"location":"module-development/general/all-extenders/#customerextendercomponent","title":"CustomerExtenderComponent","text":"<p>Class name: <code>CustomerExtenderComponent</code></p> <p>File: <code>system/extender/CustomerExtenderComponent.inc.php</code></p> <p>Description: This extender is called up in Gambio Admin on the create and edit page of a customer. This extender can be used to add additional fields or extra html at the end of the page. Fields can be added for the sections Personal, Company, Address, Contact and More Options. Extra html will be appended to the page.</p> Position Method for adding content Description <code>personal_fields</code> <code>addPersonalField(string $label, string $fieldHtml)</code> Adds a new row with label and field html to the Personal section <code>company_fields</code> <code>addCompanyField(string $label, string $fieldHtml)</code> Adds a new row with label and field html to the Company section <code>address_fields</code> <code>addAddressField(string $label, string $fieldHtml)</code> Adds a new row with label and field html to the Address section <code>contact_fields</code> <code>addContactField(string $label, string $fieldHtml)</code> Adds a new row with label and field html to the Contact section <code>additional_fields</code> <code>addAdditionalField(string $label, string $fieldHtml)</code> Adds a new row with label and field html to the More Options section <code>extra_html</code> <code>addExtraHtml(string $html)</code> Adds extra html at the end of the page <pre><code>/**\n * Class SampleCustomerExtender\n *\n * This is a sample overload for the CustomerExtenderComponent.\n *\n * @see CustomerExtenderComponent\n */\nclass SampleCustomerExtender extends SampleCustomerExtender_parent\n{\n    public function proceed()\n    {\n        parent::proceed();\n\n        // logic for handling POST data like storing it\n\n        // logic for getting data to prefill fields\n\n        $this-&gt;addPersonalField('Middle name:', '&lt;input type=\"text\" name=\"middle_name\" maxlength=\"32\" /&gt;');\n        $this-&gt;addCompanyField('Location:', '&lt;input type=\"text\" name=\"location\" maxlength=\"32\" /&gt;');\n        $this-&gt;addAddressField('Floor:', '&lt;input type=\"text\" name=\"floor\" maxlength=\"32\" /&gt;');\n        $this-&gt;addContactField('Mobile number:', '&lt;input type=\"tel\" name=\"mobile_number\" /&gt;');\n        $this-&gt;addAdditionalField('Reference Code:', '&lt;input type=\"text\" name=\"reference_code\" /&gt;');\n        $this-&gt;addExtraHtml('&lt;div&gt;&lt;p&gt;Some extra HTML&lt;/p&gt;&lt;/div&gt;');\n    }\n}\n</code></pre> <p>This example adds the new input fields for every form section and some sample html at the end of the page.</p> <p></p>"},{"location":"module-development/general/all-extenders/#headerextendercomponent_1","title":"HeaderExtenderComponent","text":"<p>Class name: <code>HeaderExtenderComponent</code></p> <p>File: <code>system/extender/HeaderExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated everywhere in the shop. Through an overload, any content can be added to the <code>&lt;head&gt;</code>, e.g. JavaScript code that is to be executed on every page in the shop. The integration of the Overload happens last (second to last in Honeygrid) in the <code>&lt;head&gt;</code> area.</p>"},{"location":"module-development/general/all-extenders/#jssectionextendercomponent","title":"JSSectionExtenderComponent","text":"<p>Class name: <code>JSSectionExtenderComponent</code></p> <p>File: <code>system/extender/JSSectionExtenderComponent.inc.php</code></p> <p>Description: This JavaScript extender is a bit special and can be used on all pages of the Gambio Admin. Using particular parameters, which are passed to the <code>gm_javascript.js.php</code>, area-specific JavaScript code can be loaded.</p> <p>Example call of the <code>gm_javascript.js.php</code>: <code>gm_javascript.js.php?page=Section&amp;globals=off&amp;section=my_section</code></p> Parameter name Possible values Description page <code>Section</code> To use the JSSectionExtender, this parameter must have the value <code>Section</code> section <code>&lt;section_name&gt;</code> The name of the section and the name of the executed method in the overload globals (optional) <code>on</code>|<code>off</code> Indicator whether global JavaScripts, such as jQuery and jQuery-UI, should be loaded <p>When called, the <code>gm_javascript.js.php</code> returns all the JavaScripts that are included in the <code>my_section</code> function. The section corresponds to a function which is defined in an overload of the <code>JSSectionExtender</code>.</p> <p>Example of an overload of the <code>JSSectionExtender</code>:</p> <pre><code>class SampleJSSectionExtender extends SampleJSSectionExtender_parent\n{\n    protected function my_section()\n    {\n        echo 'alert(\"This is my section\");';\n    }\n}\n</code></pre> <p>This example performs an <code>alert</code> on an overload of <code>gm_javascript.js.php?page=Section&amp;section=my_section</code> with the text \"This is my section\".</p>"},{"location":"module-development/general/all-extenders/#loginextendercomponent","title":"LoginExtenderComponent","text":"<p>Class name: <code>LoginExtenderComponent</code></p> <p>File: <code>system/extender/LoginExtenderComponent.inc.php</code></p> <p>Description: This extender is loaded at login. By means of an overload, your source code can be executed during login. This extender is not suitable for displaying content. When using this extender, a method <code>get_customer()</code> is available that returns the customer record of the logger in the form of a <code>GMDataObject</code>. Also, the ID of the customer <code>$this-&gt;v_data_array['customers_id']</code> is available.</p>"},{"location":"module-development/general/all-extenders/#orderextendercomponent","title":"OrderExtenderComponent","text":"<p>Class name: <code>OrderExtenderComponent</code></p> <p>File: <code>system/extender/OrderExtenderComponent.inc.php</code></p> <p>Description: This extender is called up in Gambio Admin on the detail page of an order. This extender can be used to add additional containers (e.g. for payment modules like SEPA or PayPal). Currently, there are five positions to which content can be added. Four of these positions have an additional header, which can be set with the suffix <code>_heading</code>.</p> Position Header Description <code>below_product_data</code> <code>below_product_data_heading</code> Below the article data, using the entire width of the page <code>below_order_info</code> <code>below_order_info_heading</code> Below the order information on the left side (invoice/delivery address) <code>below_withdrawal</code> <code>below_withdrawal_heading</code> Below the revocations on the right side <code>below_history</code> <code>below_history_heading</code> Below the order status history on the left side <code>order_status</code> - Below the comment field in the \"Change order status\" dialogue (within the form) <p>The position <code>below_order_info</code> can cause shifts in content, as existing modules sometimes use it and the order within a position cannot be influenced.</p> <pre><code>class SampleOrderExtender extends SampleOrderExtender_parent\n{\n    public function proceed()\n    {\n        $this-&gt;v_output_buffer['below_order_info_heading'] = 'below_order_info TITLE';\n        $this-&gt;v_output_buffer['below_order_info']         = '&lt;div style=\"color: #0000FF\"&gt;below_order_info CONTENT&lt;/div&gt;';\n\n        $this-&gt;v_output_buffer['below_withdrawal_heading'] = 'below_withdrawal TITLE';\n        $this-&gt;v_output_buffer['below_withdrawal']         = '&lt;div style=\"color: #0000FF\"&gt;below_withdrawal CONTENT&lt;/div&gt;';\n\n        $this-&gt;v_output_buffer['below_history_heading'] = 'below_history TITLE';\n        $this-&gt;v_output_buffer['below_history']         = '&lt;div style=\"color: #0000FF\"&gt;below_history CONTENT&lt;/div&gt;';\n\n        $this-&gt;v_output_buffer['below_product_data_heading'] = 'below_product_data TITLE';\n        $this-&gt;v_output_buffer['below_product_data']         = '&lt;div style=\"color: #0000FF\"&gt;below_product_data CONTENT&lt;/div&gt;';\n\n        $this-&gt;v_output_buffer['order_status'] = '&lt;div style=\"color: #0000FF\"&gt;order_status CONTENT&lt;/div&gt;';\n\n        //The following two rows need to be at the end of every overload of the OrderExtender\n        $this-&gt;addContent();\n        parent::proceed();\n    }\n}\n</code></pre> <p>This example outputs a short sample text at all available positions of the Extender.</p> <p></p> <p></p>"},{"location":"module-development/general/all-extenders/#pdforderextendercomponent","title":"PDFOrderExtenderComponent","text":"<p>Class name: <code>PDFOrderExtenderCompontent</code></p> <p>File: <code>system/extender/PDFOrderExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated into <code>admin/gm_pdf_order.php</code> immediately before the PDF documents are generated and allow almost complete manipulation of the data on which the creation of invoices/delivery notes is based. This allows the insertion of payment type dependent details. For this purpose, a method is provided for each manipulable content that can be overloaded.</p> <p>The following contents can be manipulated:</p> Method name Type of content <code>extendOrderRight()</code> Company address, customer number, order date, order number, invoice/delivery number, date <code>extendOrderData()</code> Article data: model, name, quantity, unit, taxes, unit price, price, attributes <code>extendOrderTotal()</code> Summary: subtotal, total net, total, etc. <code>extendOrderInfo()</code> Shipping address, payment method, shipping method, note text <code>extendPdfFooter()</code> Footer: company address, account information, etc. <code>extendPdfFonts()</code> Font details in relation to the different parts of the invoice/delivery note <code>extendGmPdfValues()</code> Various layout settings, such as spacing and display flags <code>extendGmOrderPdfValues()</code> Further layout settings <code>extendGmUseProductsModel()</code> Setting whether the model should be used (affects the layout) <p>Various information is also available:</p> Access Description <code>$this-&gt;v_data_array['type']</code> Type of document (possible values: <code>invoice</code>|<code>packingslip</code>) <code>$this-&gt;v_data_array['order_id']</code> Order number <code>$this-&gt;v_data_array['order']</code> Order information in an object of type <code>order</code> (<code>admin/includes/classes/order.php</code>) <code>$this-&gt;v_data_array['order_check']</code> Some additional ordering information"},{"location":"module-development/general/all-extenders/#postinstallationadminextendercomponent","title":"PostInstallationAdminExtendercomponent","text":"<p>Class name: <code>PostInstallationAdminExtendercomponent</code></p> <p>File: <code>system/extender/PostInstallationAdminExtendercomponent.inc.php</code></p> <p>Description: This extender is integrated immediately after completion of the shop installation at the first call of the admin area and allows the execution of your code.</p>"},{"location":"module-development/general/all-extenders/#postinstallationshopextendercomponent","title":"PostInstallationShopExtenderComponent","text":"<p>Class name: <code>PostInstallationShopExtenderComponent</code></p> <p>File: <code>system/extender/PostInstallationShopExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated immediately after completion of the shop installation at the first call of the shop and allows the execution of your code.</p>"},{"location":"module-development/general/all-extenders/#postupdateadminextendercomponent","title":"PostUpdateAdminExtendercomponent","text":"<p>Class name: <code>PostUpdateAdminExtendercomponent</code></p> <p>File: <code>system/extender/PostUpdateAdminExtendercomponent.inc.php</code></p> <p>Description: This extender is integrated immediately after the update is completed when the admin area is called up for the first time and allows you to run your code.</p>"},{"location":"module-development/general/all-extenders/#postupdateshopextendercomponent","title":"PostUpdateShopExtenderComponent","text":"<p>Class name: <code>PostUpdateShopExtenderComponent</code></p> <p>File: <code>system/extender/PostUpdateShopExtenderComponent.inc.php</code></p> <p>Description: This extender is integrated immediately after completion of the update at the first call of the shop and allows the execution of your code. </p>"},{"location":"module-development/general/defining-a-module/","title":"Defining a module","text":"<p>The definition, configuration or registration of a module to the system can be done in two ways and depends on what your module does. A module can have a so-called <code>GXModule.json</code> file and/or a module PHP class inside the root directory of it. Both files will be handled differently and define or configure different parts of the shop software.</p>"},{"location":"module-development/general/defining-a-module/#the-module-class","title":"The module class","text":"<p>If you're using the new Application Core, you need to create a specific module class inside your modules root directory. Our module system will detect this module class (at least after clearing the module caches) and register your event listener, command handler and/or HTTP routes.</p> <p>The mechanism for searching the GXModules directory for module classes is based on these two conventions:</p> <ol> <li>The class name must have a <code>Module</code> suffix, which means that the file name must end with <code>Module.php</code>    (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/SampleModule.php</code>).</li> <li>The module class must extend the <code>Gambio\\Core\\Application\\Modules\\AbstractModule</code> class.</li> </ol> <p>As new modules are added to the system, the modules cache must be renewed in the Gambio Admin (Toolbox &gt; Caches).</p> <p>Your module class may implement several methods that provide information about your module. The following examples give an overview of these methods. Mind that not every method needs to be implemented because of the abstract base class.</p> <pre><code>\nnamespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\nuse Gambio\\Admin\\Modules\\Withdrawal\\Model\\Events\\CreatedWithdrawal;\nuse Gambio\\Core\\Application\\Modules\\AbstractModule;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\Events\\SampleEvent;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListener\\SampleEventListener;\nuse GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\\EventListener\\SampleCreatedWithdrawalEventListener;\n\n/**\n * Class SampleModule\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass SampleModule extends AbstractModule\n{\n    /**\n     * Lists all event listeners.\n     *\n     * The list must be a multidimensional array in the following format:\n     * key   := full qualified class name of the event class\n     * value := numeric, one dimensional array with full qualified class name\n     *          of the event listener class\n     *\n     * @return array|null\n     */\n    public function eventListeners(): ?array\n    {\n        return [\n            SampleEvent::class =&gt; [\n                SampleEventListener::class\n            ],\n            CreatedWithdrawal::class =&gt; [\n                SampleCreatedWithdrawalEventListener::class\n            ],\n        ];\n    }\n}\n</code></pre>"},{"location":"module-development/general/defining-a-module/#register-your-service-provider","title":"Register your Service Provider","text":"<p>Adding your Service Provider to the Application Core is pretty straightforward. Similar to the mechanism that is looking for a module class inside your modules root directory, it's also looking for a Service Provider.</p> <p>The mechanism is based on these two conventions:</p> <ol> <li>The class name must have a <code>ServiceProvider</code> suffix, which means that the file name must end with    <code>ServiceProvider.php</code> (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/SampleServiceProvider.php</code>).</li> <li>The Service Provider class must extend the    <code>Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleServiceProvider</code> or    <code>Gambio\\Core\\Application\\DependencyInjection\\AbstractModuleBootableServiceProvider</code> class.</li> </ol> <p>More information about the implementation of a Service Provider can be found in the corresponding tutorial.</p>"},{"location":"module-development/general/defining-a-module/#the-gxmodulejson-file","title":"The <code>GXModule.json</code> file","text":"<p>Creating a <code>GXModules.json</code> file inside your modules directory (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/GXmodule.json</code>), you can provide some basic information about your module and create an entry inside our Module Center, where your module then can be installed or uninstalled.</p> <p>If you don't create such a file, there will be no entry inside our Module Center and your module can't be installed or uninstalled. This way, our automatic mechanics and processes will always process all files of your modules. Doing so is neither good nor bad, it depends on what your module does or needs.</p>"},{"location":"module-development/general/defining-a-module/#the-basic-information","title":"The basic information","text":"<p>As said, the <code>GXModule.json</code> need to be placed inside the root directory of your module. The essential content of this file looks like this:</p> <pre><code>{\n    \"title\": \"sample_module_text_section.module_title\",\n    \"description\": \"sample_module_text_section.module_description\",\n    \"forceIncludingFiles\": false\n}\n</code></pre> <p>The values of the attributes <code>title</code> and <code>descriptions</code> contain a reference to the module title or description. The left side (starting from the dot) indicates the language section, while the right side shows the text phrase.</p> <p>The value of the <code>forceIncludingFiles</code> attribute indicates if our system should process all of your module files even if the module isn't installed.</p> <p>Notice</p> <p>Our language and text system can only look up the title and description if you also provide the text phrases in form of a language text file.</p>"},{"location":"module-development/general/defining-a-module/#execute-custom-logic-on-install-or-uninstall","title":"Execute custom logic on install or uninstall","text":"<p>If you want to provide extra custom logic that will be executed on the installation or uninstallation of your module, you can create a specific class and reference it inside the <code>GXModule.json</code> using the following schema:</p> <pre><code>{\n   \"install\": {\n       \"controller\": \"MyModuleInstallerClass\",\n       \"method\": \"onInstallation\"\n    },\n    \"uninstall\": {\n        \"controller\": \"MyModuleInstallerClass\",\n        \"method\": \"onUninstallation\"\n    }\n}\n</code></pre> <p>The <code>controller</code> and <code>method</code> attributes define which class and method should be initialized and executed. You need to make sure, this class is registered by a service provider.</p> <p>The following example shows the implementation of the install and uninstall methods:</p> <pre><code>namespace GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;;\n\n/**\n * MyModuleInstallerClass\n * @package GXModules\\&lt;Vendor&gt;\\&lt;Module&gt;\n */\nclass MyModuleInstallerClass\n{\n    /**\n     * @param array $gxmodulesJsonData\n     */\n    public function onInstallation(array $gxModulesJsonData): void\n    {\n        // do some stuff before install\n    }\n\n    /**\n     * @param array $gxmodulesJsonData\n     */\n    public function onUninstallation(array $gxModulesJsonData): void\n    {\n        // do some stuff after uninstall\n    }\n}\n</code></pre> <p>Notice</p> <p>The <code>$gxModulesJsonData</code> parameter will be containing the parsed content of the modules <code>GXModule.json</code>.</p>"},{"location":"module-development/general/extending-html/","title":"Extending existing HTML","text":"<p>No matter whether you want to extend the HTML in the public store or admin area, you need to use the Smarty block system. Smarty blocks are spread around all the HTML templates and allow you to add content before or after a block as well as replacing a block entirely.</p>"},{"location":"module-development/general/extending-html/#smarty-blocks","title":"Smarty blocks","text":"<p>With Smarty 3 it has become possible to realize inheritance. This makes it possible to transfer content from a basic HTML file to one or more child HTML files.</p> <p>There are different procedures for this. On the one hand, it is possible to work with the Smarty function <code>{extends}</code>, which allows extending a specific HTML file by several areas. On the other hand, the <code>{block}</code> element can also be extended by the attributes <code>append</code> or <code>prepend</code>.</p> <p>This tutorial will explain how you can use these functions to extend HTML files. </p>"},{"location":"module-development/general/extending-html/#the-block-tag","title":"The <code>block</code> tag","text":"<p>A Smarty block is always identified by the <code>{block}</code> tag. It indicates an area that you can extend or replace. To specifically overwrite or extend a particular block it needs a name. You can assign this name as follows:</p> <pre><code>{block name=\"example-block\"}{/block}\n</code></pre>"},{"location":"module-development/general/extending-html/#general-working-with-blocks","title":"General working with blocks","text":"<p>First we define a basic HTML file <code>basic.html</code>, in which we can overwrite or extend content as we like. This could look like this:</p> <pre><code>{block name=\"example-block\"}\n    &lt;div class=\"example-content\"&gt;\n        {block name=\"example-block-text\"}\n            &lt;p&gt;Some random text.&lt;/p&gt;\n        {/block}\n    &lt;/div&gt;\n{/block}\n</code></pre> <p>If you want to extend or overwrite this content you need a child HTML file, which inherits from your base HTML file <code>basic.html</code>. The content of the child HTML file could look like this:</p> <pre><code>{extends file=\"basic.html\"}\n\n{block name=\"example-block\"}\n    &lt;h1&gt;Overridden Content&lt;/h1&gt;\n{/block}\n</code></pre> <p>The example above would result in replacing the <code>div</code> block of the base HTML file with an <code>h1</code> heading. However, if you only want to add content before or after the actual content, it is recommended to use the <code>append</code> or <code>prepend</code> attributes.</p> <p>Add content before the block:</p> <pre><code>{extends file=\"basic.html\"}\n\n{block name=\"example-block\" prepend}\n    &lt;h1&gt;New Headline&lt;/h1&gt;\n{/block}\n</code></pre> <p>Add content after the block:</p> <pre><code>{extends file=\"basic.html\"}\n\n{block name=\"example-block\" append}\n    &lt;div class=\"new-content\"&gt;\n        Some new Content\n    &lt;/div&gt;\n{/block}\n</code></pre>"},{"location":"module-development/general/extending-html/#usage-in-the-shop-software","title":"Usage in the shop software","text":"<p>How you extend a template file in the shop depends on which template you want to extend. In general, you need to create a new HTML file inside your module directory (e.g. <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;</code>), but the specific path of the template you want to extend determines the specific path of the HTML file you need to create inside your modules directory.</p> <p>The following overview lists all possible template paths as well as the corresponding path of the HTML file you need to create:</p>"},{"location":"module-development/general/extending-html/#extending-a-theme-template","title":"Extending a theme template","text":"<p>Template path: <code>themes/&lt;ThemeName&gt;/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>GXModule path: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Themes/&lt;ThemeName&gt;/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>Example: <code>themes/Honeygrid/html/system/index.html</code> \u27a1 <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Themes/html/system/index.html</code></p>"},{"location":"module-development/general/extending-html/#extending-a-new-admin-module-template","title":"Extending a new admin module template","text":"<p>Template path: <code>GambioAdmin/Modules/&lt;AdminModuleName&gt;/ui/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>GXModule path: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/&lt;AdminModuleName&gt;/ui/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>Example: <code>GambioAdmin/Modules/Dashboard/ui/dashboard.html</code> \u27a1 <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/Dashboard/ui/dashboard.html</code></p>"},{"location":"module-development/general/extending-html/#extending-a-new-admin-layout-template","title":"Extending a new admin layout template","text":"<p>Template path: <code>GambioAdmin/Layout/ui/template/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>GXModule path: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/Layout/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>Example: <code>GambioAdmin/Layout/ui/template/header/index.html</code> \u27a1 <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/Layout/header/index.html</code></p>"},{"location":"module-development/general/extending-html/#extending-an-old-admin-template-will-surely-be-deprecated-in-some-future-version","title":"Extending an old admin template (will surely be deprecated in some future version)","text":"<p>Template path: <code>admin/html/content/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>GXModule path: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>Example: <code>admin/html/content/quick_edit/overview.html</code> \u27a1 <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Admin/Html/quick_edit/overview.html</code></p> <p>Note</p> <p>This will surely be deprecated in some future version, because with the refactoring of the Gambio Admin we are going to use the <code>GambioAdmin/Modules</code> directory. Please use the new admin module template files if possible.</p>"},{"location":"module-development/general/extending-html/#extending-an-old-template-set-template","title":"Extending an old template set template","text":"<p>Template path: <code>templates/&lt;TemplateSet&gt;/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>GXModule path: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Templates/&lt;TemplateSet&gt;/&lt;PathToTemplate&gt;/&lt;TemplateName&gt;.html</code></p> <p>Example: <code>templates/Honeygrid/module/product_info/standard.html</code> \u27a1 <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Templates/Honeygrid/module/product_info/standard.html</code></p> <p>Note</p> <p>This will surely be deprecated in some future version, because the old template sets will be removed at some point. Please use themes instead.</p>"},{"location":"module-development/general/gx-modules/","title":"GXModules","text":"<p>We're referencing the system for integrating new modules into the shop software as GXModules. For adding new modules to the shop, you interact with this system mainly by using the <code>GXModules</code> directory in the root directory of the shop software. Automatic mechanics and processes are using this particular directory to look up certain classes/components, data or configurations.</p>"},{"location":"module-development/general/gx-modules/#file-structure-for-modules","title":"File structure for modules","text":"<p>We assume that your module has a vendor (you) and a name. Based on this information, you need to place your module files inside the following directory:</p> <pre><code>- GXModules/\n    - &lt;Vendor&gt;/\n        - &lt;Module&gt;/\n            - ...\n        - ...\n</code></pre> <p>This way, the files of a specific developer can be found bundled in one place, but the files of the individual modules are still separated from the other modules.</p> <p>Example 1: Assuming you are looking for the files for our (Gambio) modules, you will find them in the directory <code>GXModules/Gambio/</code>.</p> <p>Example 2: Assuming you are looking for the files for the Gambio Hub module, you will find them in the directory <code>GXModules/Gambio/Hub/</code>.</p> <p>A further advantage of using GXModules is the [Autoloading]. If you place the class <code>SomeClass</code> with the namespace <code>GXModules\\Vendor\\MyModule</code> using the path <code>GXModules/Vendor/MyModule/SomeClass.php</code>, PHP will automatically include this class when it's needed.</p>"},{"location":"module-development/general/gx-modules/#recommendation-separation-of-files-for-shop-admin-and-api","title":"Recommendation: Separation of files for shop, admin, and API","text":"<p>Generally, files for the shop and admin should be separated. Such a separation would look like this:</p> <pre><code>- GXModules/\n    - &lt;Vendor&gt;/\n        - &lt;Module&gt;/\n            - Admin/\n            - Api/\n            - Shop/\n</code></pre> <p>This kind of division has the advantage that for you and others, the content and logical separation of files is recognizable for the shop or admin.</p> <p>Note 1: Beside these subfolders you can also often find a <code>index.html</code>. This however, is only used for security purposes and not for the functionality of the module.</p> <p>Note 2: In addition to these subfolders there may also be a folder <code>Build</code>. This subfolder is created by an automated development process and contains converted SCSS and JS files. For your modules, you can create a similar directory of generated files but you don't necessarily have to.</p>"},{"location":"module-development/general/languages-text-phrases/","title":"Adding languages and managing text phrases","text":"<p>In this tutorial you will learn how to create new texts and modify existing ones as well as the general use of language phrases.</p>"},{"location":"module-development/general/languages-text-phrases/#language-file-in-general","title":"Language file in general","text":""},{"location":"module-development/general/languages-text-phrases/#what-is-a-language-file-and-where-can-you-find-it","title":"What is a language file and where can you find it?","text":"<p>By default, all texts are supplied from the database. With a language file it is possible to create and change the text phrases used in the shop.</p> <p>Language files for your module are stored in the <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/TextPhrases/{Language}/</code> directory. <code>{Language}</code> is a placeholder for a specific language, e.g. <code>German</code> or <code>English</code>.</p> <p>Important</p> <p>The original texts are located exclusively in the <code>lang/{Language}/original_sections</code> directory. The database text phrases are created based on the original language files and other language files (e.g. from modules, etc.) as well as text adjustments that can be made in the Gambio Admin.</p>"},{"location":"module-development/general/languages-text-phrases/#what-is-a-section","title":"What is a section?","text":"<p>Sections are used to categorize the text phrases. The following naming convention is used when creating a language file: <code>&lt;SectionName&gt;.lang.inc.php</code> or <code>&lt;SectionName&gt;.&lt;Additional&gt;.lang.inc.php</code>.</p> <p><code>&lt;Additional&gt;</code>, for example, can be used for a sort number or to accommodate a developer or module name. This makes sense especially if you want to extend an existing section and ensure that the file is not overwritten by a foreign module that happens to use the same section.</p>"},{"location":"module-development/general/languages-text-phrases/#what-are-text-phrases","title":"What are text phrases?","text":"<p>Text phrases are are divided into two parts - a phrase name and phrase text. The phrase name is the variable name that is used later in the code to output the phrase text.</p>"},{"location":"module-development/general/languages-text-phrases/#structure-of-the-language-files","title":"Structure of the language files","text":"<p>The typical structure of a language file is as follows:</p> <pre><code>$t_language_text_section_content_array = array(\n    'phrasen_name' =&gt; 'A text phrase.',\n    'button_ok'    =&gt; 'OK'\n);\n</code></pre> <p>You can see that the phrase name button_ok has been assigned the phrase text <code>OK</code>.</p>"},{"location":"module-development/general/languages-text-phrases/#extending-a-section-by-using-additional","title":"Extending a section by using <code>&lt;Additional&gt;</code>","text":"<p>If a new language file <code>buttons.module_name.lang.inc.php</code> is created, it extends the section <code>buttons</code> by a new phrase. The structure is the same as before:</p> <pre><code>$t_language_text_section_content_array = array(\n    'button_cancel' =&gt; 'Abbrechen'\n);\n</code></pre>"},{"location":"module-development/general/languages-text-phrases/#overwriting-texts","title":"Overwriting texts","text":"<p>To overwrite a text phrase, the language files must be created with the same section name <code>&lt;SectionName&gt;.lang.inc.php</code>. Your language files have a higher priority than the original language files. Individual adjustments still have the highest priority.</p>"},{"location":"module-development/general/languages-text-phrases/#using-the-language-files-in","title":"Using the language files in ...","text":""},{"location":"module-development/general/languages-text-phrases/#php","title":"PHP","text":"<p>In PHP you need to use the <code>Gambio\\Core\\Language\\TextManager</code> component, which is explained in the architecture and framework part of our documentation.</p>"},{"location":"module-development/general/languages-text-phrases/#smarty-template","title":"Smarty template","text":"<p>To load a language file into Smarty, use the following instruction:</p> <pre><code>{load_language_text section=\"buttons\"}\n</code></pre> <p>After, the individual text variables can be inserted within the template using <code>{$txt.PHRASEN_NAME}</code> (e.g. <code>{$txt.street}</code> or <code>{$txt.city}</code>).</p> <p>It is also possible to group the phrases of a section for the template by a specific name.</p> <pre><code>{load_language_text section=\"buttons\" name=\"buttons\"}\n</code></pre> <p>Doing so, you can access the text phrases using <code>{$buttons.PHRASEN_NAME}</code>, e.g. <code>{$buttons.button_cancel}</code>.</p>"},{"location":"module-development/general/languages-text-phrases/#javascript","title":"Javascript","text":"<p>For JavaScript we provide a service method that can be used like this:</p> <pre><code>// jse.core.lang.translate([PHRASEN_NAME], [JS_SECTION_NAME])\nconst buttonLabel = jse.core.lang.translate('paylink', 'paypal3');\n</code></pre>"},{"location":"module-development/general/languages-text-phrases/#initialisation-for-the-admin-area","title":"Initialisation for the admin area","text":"<p>In the controller an array of all needed sections can be specified during the instantiation of the <code>AdminPageHttpControllerResponse</code> object:</p> <pre><code>return MainFactory::create('AdminPageHttpControllerResponse', $title, $html, null, ['buttons']);\n</code></pre>"},{"location":"module-development/general/languages-text-phrases/#initialisation-for-the-store-area","title":"Initialisation for the store area","text":"<p>Via the PHP class <code>JSEngineConfiguration</code> the needed sections for the JavaScript are loaded. To add your sections, an overload of the method <code>_getSections</code> is necessary. For example:</p> <pre><code>protected function _getSections()\n{\n    $additionalSection = array('js_section_name' =&gt; 'section_name');\n    $this-&gt;sections = array_merge($this-&gt;sections, $additionalSection);\n\n    return parent::_getSections();\n}\n</code></pre> <p>The section <code>section_name</code> is now available under the name 'js_section_name' in JavaScript. Usually it makes sense not to choose a different name for <code>js_section_name</code>, e.g. for loading the paypal3-section:</p> <pre><code>protected function _getSections()\n{\n    $additionalSection = array('paypal3' =&gt; 'paypal3');\n    $this-&gt;sections = array_merge($this-&gt;sections, $additionalSection);\n\n    return parent::_getSections();\n}\n</code></pre>"},{"location":"module-development/general/languages-text-phrases/#possible-problems-and-solutions","title":"Possible problems and solutions","text":"<ul> <li>Smarty template:   By default, the text variables are provided with the prefix <code>txt</code>. If several language files are included,   there may be conflicts with the names. To avoid conflicts when several language files are included, you can   specify a prefix.   <code>{load_language_text section=\"buttons\" name=\"button\"}</code>   The texts from the section <code>buttons</code> are now available with the prefix <code>button</code>, e.g. <code>{$button.ok}</code>   or <code>{button.cancel}</code></li> <li>The changes made to a language file are not displayed:   After adding new language files, you should perform the following operations in the Admin section of   the Cache page: Clear the page output cache, Clear the module information cache and Clear   the text cache.</li> <li>Manual changes in the database table language_phrases_cache are not displayed:   This is a pure cache table where changes are out of place and lost. Changes can be made via language files   or via the adapt texts function in the admin.</li> <li>In the event of text errors, check that the correct encoding has been selected for the language file:   UTF-8 without BOM.</li> </ul>"},{"location":"module-development/general/languages-text-phrases/#adding-a-new-language","title":"Adding a new language","text":"<p>To add a new language you need to copy all language files of an existing language, which can be found in the <code>lang</code> directory and translate all of its text phrases.</p>"},{"location":"module-development/store/adding-css/","title":"Adding and extending CSS","text":"<p>Adding and extending CSS is quite simple and similar to the extension of HTML. The theme system allows to entirely modify the existing CSS content of a specific theme.</p>"},{"location":"module-development/store/adding-css/#modifying-the-css-of-a-theme-by-creating-a-new-one","title":"Modifying the CSS of a theme by creating a new one","text":"<p>The theme system allows creating a child theme for a specific theme, which allows creating an entirely new theme based on that parent theme. In this tutorial we don't want to take a closer look into this topic because the tutorials about working with stylesheets already describe how to do this.</p>"},{"location":"module-development/store/adding-css/#modifying-the-css-of-a-theme-by-extending-an-existing-one","title":"Modifying the CSS of a theme by extending an existing one","text":"<p>You can modify the styling of an existing theme by adding custom styles to it. Therefore, you need to follow the file structure of the theme system and create a <code>main.scss</code> file inside your GXModules module.</p> <p>Assuming you want to add (S)CSS code that is valid for all themes, then you need to create the following file: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Themes/All/Css/main.scss</code>. This <code>main.scss</code> file will be included automatically while generating/building the styles of the corresponding theme.</p> <p>Inside the <code>main.scss</code> you can add you own styles as well as import additional SCSS files if needed.</p>"},{"location":"module-development/store/adding-js/","title":"Adding new JavaScript","text":"<p>The including of additional JavaScript is determined by defined sections. It's important to follow a specific directory structure inside your GXModule module. The following example shows the directory structure and the available sections:</p> <pre><code>- GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Themes/&lt;Theme&gt;/Javascript/\n    - Account/\n    - AccountHistory/\n    - CallbackService/\n    - Cart/\n    - Cat/\n    - Checkout/\n    - Global/\n    - GVSend/\n    - Index/\n    - Manufactures/\n    - PriceOffer/\n    - ProductInfo/\n    - Wishlist/\n</code></pre> <p>Note: The <code>&lt;Theme&gt;</code> must be the directory name of an existing theme or <code>All</code>. In case of <code>All</code> the JS files will be included for every theme.</p> <p>Assuming you want to include a specific JavaScript (e.g. <code>my_alert.js</code>) into every page of the <code>Honeygrid</code> theme, then you need to create the following file: <code>GXModules/&lt;Vendor&gt;/&lt;Module&gt;/Shop/Themes/&lt;Theme&gt;/Javascript/Global/my_alert.js</code>.</p>"},{"location":"module-development/store/creating-http-controller/","title":"Creating a new HTTP controller","text":"<p>Before you want to create a new HTTP controller, you should understand the HTTP service. Therefore, this section will primarily focus on the HTTP service and explain how you can write your controller for HTTP requests.</p> <p>Notice</p> <p>This tutorial is based on the legacy architecture and isn't compatible with the new one. See tutorial for the admin area.</p>"},{"location":"module-development/store/creating-http-controller/#what-is-the-http-service-and-what-is-it-for","title":"What is the HTTP service and what is it for?","text":"<p>The HTTP service is a fundamental part of the GXEngine. The client, for example a browser, uses HTTP to interact with a web server on which the shop is installed. The dialogue between the server and the client takes place via well-defined messages. The client sends a so-called \"request\" to the Web server, which in turn replies with a response. </p> <p>In PHP the request of the client is represented by the global variables <code>$_GET</code>, <code>$_POST</code>, <code>$_FILE</code>, <code>$_COOKIE</code>, <code>$_SESSION</code>. The response message is generated with functions like <code>echo</code> or <code>header</code>. </p> <p>One goal of the HTTP service is to replace the global PHP variables and functions with an object-oriented layer. The front controllers of the shop <code>admin/admin.php</code> or <code>shop.php</code> use the service to control which <code>HTTPViewController</code> child classes are to be used for the current request. They in turn generate the response message for the client. This means that the same script is used for each request at a central point in the software. New pages can easily be created using an <code>HttpViewController</code> and a template file defined in the controller.</p>"},{"location":"module-development/store/creating-http-controller/#what-is-a-front-controller","title":"What is a front controller?","text":"<p>The front controller is a central script that receives all client requests and delegates them to a specific controller (<code>HttpViewController</code>). Generic tasks, which have to be done at each page request, are executed before the delegation. </p> <p>In the shop two scripts, acting as entry points for the HTTP, request handling.</p> <ul> <li>Frontend: <code>shop.php</code></li> <li>Gambio Admin: <code>admin/admin.php</code></li> </ul> <p>For the controller to delegate to an <code>HttpViewController</code>, the script has to be called with the <code>$_GET</code> parameters <code>do</code>.</p> <ul> <li><code>shop.php?do=NewFrontendModule</code>: Delegation to <code>NewFrontendModuleController</code></li> <li><code>admin/admin.php?do=NewBackendModule</code>: Delegation to <code>NewBackendModuleController</code></li> </ul> <p>The <code>HttpViewControllers</code> have different action methods (see next section for details). The <code>actionDefault</code> method exists in every controller and every action method has to return a response object.</p> <p>Imagine the <code>NewBackendModuleController</code> has an action method called <code>actionInstall</code>, to which you want to delegate. The requested URL has to look like this:</p> <ul> <li><code>admin/admin.php?do=NewBackendModule/Install</code>: Delegation to the method <code>NewBackendModuleController::actionInstall</code></li> </ul> <p>The value of the <code>$_GET</code> parameter with the key <code>do</code> after the slash specifies the action method. Additional <code>$_GET</code> parameters can be added as usual (e.g. <code>admin/admin.php?do=NewBackendModule/Install&amp;module=moduleToInstall</code>).</p>"},{"location":"module-development/store/creating-http-controller/#what-is-the-httpviewcontroller-and-what-is-it-for","title":"What is the HttpViewController and what is it for?","text":"<p>All controller classes that can be accessed through the frontend entry points inherit from the <code>HttpViewController</code> class. It provides some auxiliary methods to access the request variables and the possibility to define and render a template file.</p> <p>Each <code>HttpViewController</code> has so-called <code>action</code> methods, which further specify the control of the request. They return instances of objects that implement the <code>HttpControllerResponseInterface</code> (the response message) . The response instances are automatically further processed by the HTTP service and transmitted to the client (browser). Action methods can be controlled by the front controller, as described above. They have to be defined as <code>public</code>, have an <code>action</code> prefix in the method name and return an object of type <code>HttpControllerResponseInterface</code>. If no action method is specified in the <code>do</code> parameter, the <code>actionDefault</code> method is executed. </p> <p>We take the following request URL as an example: <code>shop.php?do=NewFrontendModule/Install</code>. The corresponding <code>HttpViewController</code> should be structured as follows.</p> <pre><code>// Request URL: shop.php?do=NewFrontendModule/Install\nclass NewFrontendModuleController extends HttpViewController\n{\n    public function actionInstall()\n    {\n        // Execute business logic here!\n\n        return new HttpControllerResponse('Hello World!');\n    }\n}\n</code></pre> <p>Depending on whether the requests are delegated by the entry point of the frontend or Gambio Admin, the <code>HttpViewController</code> class has to inherit from another parent class.</p> <ul> <li>Frontend: <code>HttpViewController</code></li> <li>Gambio Admin: <code>AdminHttpViewController</code></li> </ul> <p>The <code>AdminHttpViewController</code> ensures that only a logged-in user with admin privileges can view these pages. </p>"},{"location":"module-development/store/creating-http-controller/#httpviewcontroller-protected-helper","title":"HttpViewController <code>protected</code> helper","text":"<ul> <li><code>_callActionMethod</code>: Calls an internally available action method.</li> <li><code>_render</code>: Renders the passed template file (1<sup>st</sup> argument) and sets the template variables (2<sup>nd</sup> argument).</li> <li><code>_getQueryParametersCollection</code>: Returns a collection class containing all values of the global <code>$_GET</code> variable.</li> <li><code>_getPostDataCollection</code>: Returns a collection class containing all values of the global <code>$_POST</code> variable.</li> <li><code>_getQueryParameter</code>: Return a contained value from <code>$_GET</code>.</li> <li><code>_getPostData</code>: Return a contained value from <code>$_POST</code>.</li> <li><code>_validatePageToken</code>: Checks the page token and generates an exception if it is not valid.</li> </ul>"},{"location":"module-development/store/creating-http-controller/#valid-return-values-of-the-action-methods","title":"Valid return values of the action methods","text":"<p>All action methods have to return objects of type <code>HttpControllerResponseInterface</code>! List of objects that implement the <code>HttpControllerResponseInterface</code>:</p> <ul> <li><code>HttpControllerResponse</code>: Response object for pages in the frontend.</li> <li><code>AdminPageHttpControllerResponse</code>: Response object for pages in the Gambio Admin.</li> <li><code>AdminLayoutHttpControllerResponse</code>: Response object for new pages in Gambio Admin.</li> <li><code>RedirectHttpControllerResponse</code>: Response object for forwarding.</li> <li><code>JsonHttpControllerResponse</code>: Response object for JSON (for example for Ajax requests).</li> </ul>"},{"location":"module-development/store/creating-http-controller/#working-with-template-files","title":"Working with template files","text":"<p>The method <code>_render($templateFile, $keyValuePairs)</code> returns a rendered template. The first parameter specifies the path to the template file. The second parameter has to be an associative array, where the key is the variable name of the template and the value is the value to be output. The path to the template file must be relative to the template directory of the ContentView. The template directory can be changed within the controller:</p> <p><code>$this-&gt;contentView-&gt;set_template_dir('/absolute/path/to/new/template/directory');</code></p> <p>The return value of the <code>_render</code> method can afterwards simply be passed to the response object as a second parameter, e.g.:</p> <pre><code>return new AdminPageHttpControllerResponse(\n    'Page Title', \n    $this-&gt;_render('template_file.html', array('templateVariable', 'templateValue'))\n);\n</code></pre>"},{"location":"module-development/store/creating-http-controller/#determination-of-controller-classes","title":"Determination of controller classes","text":"<p>Controller classes that inherit from the <code>HttpViewController</code> class will automatically be recognized and registered by the system. The system determines controllers inside the following directories: </p> <ul> <li><code>GXEngine</code></li> <li><code>GXMainComponents</code></li> <li><code>GXModules</code></li> </ul>"},{"location":"module-development/store/creating-http-controller/#summary","title":"Summary","text":"<ul> <li>Entry points:<ul> <li>Frontend: <code>shop.php</code></li> <li>Gambio Admin: <code>admin/admin.php</code></li> </ul> </li> <li>Creating a new controller class<ul> <li>Class has to contain <code>Controller</code> as a suffix in the class name.</li> <li>Class has to inherit from <code>HttpViewController</code>. If delegated by Gambio Admin Entry point has to inherit from   <code>AdminHttpViewController</code>.</li> </ul> </li> <li>If required, add more action methods and develop the corresponding template file.</li> <li>Empty the cache: For the MainFactory to find the new controller class, the class registry cache has to be cleared.</li> </ul>"},{"location":"module-development/store/creating-http-controller/#common-sources-of-error","title":"Common sources of error","text":"<ul> <li>Class registry cache not cleared</li> <li>New controller does not inherit from <code>HttpViewController</code> or <code>AdminHttpViewController</code></li> <li>Non-existent action method</li> <li>Incorrect return value of the executed action method</li> <li>Template directory in <code>ContentView</code> set incorrectly</li> </ul>"},{"location":"module-development/store/creating-http-controller/#sample-controller","title":"Sample controller","text":"<p>You can find sample controllers with instructions on how to use them here.</p>"},{"location":"module-development/store/creating-theme/","title":"Creating a new Theme","text":"<p>In order to create a new theme you should look at the dedicated part of our developers documentation about Theme Development. There you will find information for creating or extending a theme.</p>"},{"location":"sample-modules/extend-shop-functionality/real-command-example/","title":"Extend Layout Data of gambio admin","text":"<p>In the tutorial I will demonstrate how to pass your data to the admin template. Some techniques are used, which  are explained in detail in a separate tutorial. Nevertheless you should be able to follow the tutorial without problems. </p> <p>If you need more information about how it works, you can just have a look at the respective tutorials.</p>"},{"location":"sample-modules/extend-shop-functionality/real-command-example/#plugin-class","title":"Plugin class","text":"<p>First we need a plugin class. The shop system determines it automatically after the module cache has been cleared.  In this class we define which other classes should be used by the module. In our case we need a service provider,  command handler and a so called LayoutLoader, which I will explain in more detail later. All classes must be able to be found by the autoloader.</p> <ul> <li>Plugin</li> <li>ServiceProvider</li> <li>Autoloader</li> </ul> <pre><code>// Filepath: ./GxModules/MyVendor/MyModule/MyPlugin.php\n\nnamespace GxModules\\MyVendor\\MyModule;\n\nuse Gambio\\Admin\\Layout\\Smarty\\LoadLayoutData;\nuse Gambio\\Core\\Application\\Plugins\\AbstractPlugin;\n\nclass MyPlugin extends AbstractPlugin\n{\n    public function commandHandlers(): ?array\n    {\n        return [\n            LoadLayoutData::class =&gt; [\n                MyLoadLayoutDataHandler::class\n            ]\n        ];\n    }\n\n    public function serviceProviders(): ?array\n    {\n        return [MyServiceProvider::class];\n    }\n}\n</code></pre>"},{"location":"sample-modules/extend-shop-functionality/real-command-example/#command-handler","title":"Command Handler","text":"<p>The command handler must have the ::invoke method. It receives the command as a parameter and must also return it.</p> <p>The LoadLayoutData command has the method ::addLoader, to which we pass our LayoutLoader. To have the LayoutLoader  available at the location, we must pass it as a constructor parameter. We can use the service provider to inject  the LayoutLoader.</p> <ul> <li>Commands</li> </ul> <pre><code>// Filepath: ./GxModules/MyVendor/MyModule/MyLoadLayoutDataHandler.php\n\nnamespace GxModules\\MyVendor\\MyModule;\n\nuse Gambio\\Admin\\Layout\\Smarty\\LoadLayoutData;\n\nclass MyLoadLayoutDataHandler\n{\n    private $layoutLoader;\n    public function __construct(MyLayoutLoader $layoutLoader) \n    {\n        $this-&gt;layoutLoader = $layoutLoader;\n    }\n\n    public function __invoke(LoadLayoutData $command): LoadLayoutData\n    {\n        $command-&gt;addLoader($this-&gt;layoutLoader);\n\n        return $command;\n    }\n}\n</code></pre>"},{"location":"sample-modules/extend-shop-functionality/real-command-example/#layout-loader","title":"Layout Loader","text":"<pre><code>// Filepath: ./GxModules/MyVendor/MyModule/MyLayoutLoader.php\n\nnamespace GxModules\\MyVendor\\MyModule;\n\nuse Gambio\\Admin\\Layout\\LayoutLoader;\n\nclass MyLayoutLoader\n{\n\n}\n</code></pre>"},{"location":"theme-development/","title":"Theme Development","text":"<p>In this part of the developers documentation we want to show you how to created a new theme. For this, the following tutorials are part of a workshop about how to create a new theme called Darkness, which inherits from Malibu.</p> <p>Darkness will be a dark version of Malibu with its own content manager entries, HTML templates and styles and some additional features such as the dark mode switcher. By going through the necessary steps to create your theme, you will get to know the theme system in a practical way.</p>"},{"location":"theme-development/architecture/","title":"Theme System Architecture","text":"<p>The theme system uses a standardized file and folder structure. This means that every theme always contains the same folders. For both Gambio and developers, creating new themes and extending existing themes can easily be done.</p>"},{"location":"theme-development/architecture/#extensibility","title":"Extensibility","text":"<p>Besides the possibility to create a completely new theme, it is also possible to create new themes based on another theme. This inheritance option offers full flexibility for theme developers.</p> <p>For instance, you can create your own theme based on Malibu. Subsequently, based on your created theme, you are able to create additional themes for different subjects (for example: summer and winter themes).</p> <p>The expandability and possible theme inheritance is unlimited, as shown in this example:</p> <pre><code>Malibu\n \u2514\u2500 MyShopTheme\n     \u251c\u2500 MyShopChristmasTheme\n     \u251c\u2500 MyShopSpringfeverTheme\n     \u2502   \u2514\u2500 MyShopValentinesDayTheme\n     \u2514\u2500 MyShopSummerPartyTheme\n</code></pre>"},{"location":"theme-development/architecture/#theme-structure","title":"Theme structure","text":"<p>A theme always adheres to the same structure and is always located in the <code>themes</code> folder. In following you can get an idea of what the structure of a theme is like:</p> <p></p> <p>The root directory always has a unique name (e.g. <code>Malibu</code>) and is placed inside the <code>theme</code> directory of the shop root. Inside this directory you can find these files and directories:</p> <ul> <li><code>theme.json</code>: Theme meta data file, which provides information about the theme</li> <li><code>settings.default.json</code>: Theme configuration file</li> <li><code>html</code>: HTML snippets directory</li> <li><code>images</code>: Images directory</li> <li><code>javascripts</code>: JavaScript files directory</li> <li><code>styles</code>: Stylesheet files directory</li> <li><code>TextPhrases</code>: Language files directory</li> </ul> <p>There may also be additional folders for your own files (e.g. <code>fonts</code>).</p>"},{"location":"theme-development/architecture/#how-the-theme-system-works","title":"How the theme system works","text":"<p>Notice</p> <p>The following paragraphs describe the in-depth technical details. This can be skipped, if only the usage of the theme system is of interest.</p> <p>To understand the theme system, it is important to know that Gambio already has an older theme system, which will gradually disappear. The legacy themes are called templates. The old template system is currently still in place to maintain compatibility.</p> <p>The new theme system was built \"next to it\". This gives us the possibility to progressively change the standard from templates to themes. Old templates still retain their location in <code>templates</code>, while new themes end up in the <code>themes</code> folder.</p>"},{"location":"theme-development/architecture/#themecontrol","title":"ThemeControl","text":"<p>There is a class called <code>ThemeControl</code>, which is the central control center for templates and themes. It takes care of delivering the correct paths for the activated theme or template.</p>"},{"location":"theme-development/architecture/#themecontentview","title":"ThemeContentView","text":"<p>For all views in the shop there are the corresponding <code>ContentView</code> classes.</p> <p>Example: <code>LoginContentView</code> is responsible for the display of the login page. <code>ContentView</code> is always the base class of all views in the shop. However, these ContentViews only apply to the old template system.</p> <p>For this reason, a new base class called <code>ThemeContentView</code> was created, which is the corresponding counterpart for the theme system. This means that the corresponding ThemeContentViews have also been created for all views. In relation to the previous example, there is now also a corresponding <code>LoginThemeContentView</code> class.</p> <p>The new ThemeContentViews are located in <code>GXMainComponents/View/ThemeContentViews</code>.</p>"},{"location":"theme-development/architecture/#mainfactory","title":"MainFactory","text":"<p>The <code>MainFactory</code> class has been modified to deliver the corresponding views depending on the activated template or theme; that is, ContentView for templates and ThemeContentViews for themes. You can examine the logic for this in <code>MainFactory::load_class()</code>.</p> <p>As a result of this change, it is not necessary for the developer to check whether a template or a theme has just been activated, because thats what the MainFactory takes care of.</p> <p>To refer back to the previous example: In the <code>LoginContentControl</code> class the corresponding <code>LoginContentView</code> is loaded via the <code>MainFactory</code>, as you can see below.</p> <pre><code>// LoginContentControl.inc.php line 172\n$coo_login_view = MainFactory::create_object('LoginContentView');\n$coo_login_view-&gt;set_('info_message', $info_message);\n$coo_login_view-&gt;set_('checkout_started_get_param', $t_checkout_started_get_param);\n$coo_login_view-&gt;set_('input_mail_value', $t_input_mail_value);\n$coo_login_view-&gt;set_('cart_contents_count', $_SESSION['cart']-&gt;count_contents());\n\n$this-&gt;v_output_buffer = $coo_login_view-&gt;get_html();\n</code></pre> <p>In this case the <code>MainFactory</code> checks whether a <code>LoginThemeContentView</code> counterpart to the <code>LoginContentView</code> exists. If so, the <code>LoginThemeContentView</code> is loaded instead of the original <code>LoginContentView</code>.</p>"},{"location":"theme-development/architecture/#new-template-names","title":"New template names","text":"<p>When we created the theme system, we simultaneously released a new base theme <code>Malibu</code>. This base theme is the successor of Honeygrid. We also decided to restructure and rename the HTML templates.</p> <p>The HTML templates for the Malibu theme are located in <code>themes/Malibu/html/system</code> and now have a flat folder structure (all files are in one folder). Additionally, the HTML templates have been renamed.</p> <p>Regarding the previous example: it is once more made clear why we had to create extra <code>ThemeContentView</code> classes. If we look at <code>LoginContentView::__construct()</code>, which is used for the old template system, we see the following:</p> <pre><code>// LoginContentView.inc.php line 32\npublic function __construct()\n{\n    parent::__construct();\n\n    $this-&gt;set_content_template('module/login.html');\n    $this-&gt;set_flat_assigns(true);\n}\n</code></pre> <p>The HTML template 'modules/login.html' is loaded from the template directory.</p> <p>Now we look at <code>LoginThemeContentView::__construct()</code> for the new theme system and see that another HTML template is loaded:</p> <pre><code>// LoginThemeContentView.inc.php line 33\npublic function __construct()\n{\n    parent::__construct();\n\n    $this-&gt;set_content_template('login.html');\n    $this-&gt;set_flat_assigns(true);\n}\n</code></pre> <p>The HTML template <code>login.html</code> from the theme directory is used here.</p> <p>In conclusion, if you want to know which new HTML template is used for a particular ContentView, just look for the corresponding ThemeContentView class instead of the old ContentView class.</p>"},{"location":"theme-development/architecture/#theme-compilation","title":"Theme compilation","text":"<p>The activated theme is \"compiled\" and ends up in the <code>public/theme</code> directory. If you want to regenerate the theme, you have to delete that folder and then reload the shop in the browser.</p>"},{"location":"theme-development/content-manager/","title":"Creating Content Manager entries","text":"<p>The new themes offer the possibility to create new Content Manager entries such as links and content elements automatically. This is especially interesting for theme developers who want to include their own content in their themes.</p> <p>In order to make this possible, the field <code>contents</code> in the file <code>theme.json</code> has to be extended. This chapter is dedicated to creating Content Manager entries in themes.</p>"},{"location":"theme-development/content-manager/#links","title":"Links","text":"<p>Links are navigation items and can be created very easily. For this purpose we add the field <code>linkPages</code> within the field <code>contents</code> in the <code>theme.json</code>. This snippet will add an external link to the main navigation menu:</p> <pre><code>\"contents\": {\n  \"linkPages\": [\n    {\n      \"type\": \"link\",\n      \"position\": \"mainNavigation\",\n      \"status\": 1,\n      \"name\": {\n        \"de\": \"Gambio\",\n        \"en\": \"Gambio\"\n      },\n      \"title\": {\n        \"de\": \"Zu Gambio\",\n        \"en\": \"Go to Gambio\"\n      },\n      \"link\": {\n        \"de\": \"http://www.gambio.de\",\n        \"en\": \"http://www.gambio.com\"\n      },\n      \"openInNewTab\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"theme-development/content-manager/#info-elements","title":"Info elements","text":"<p>Info elements are widget-like contents and can also be created automatically. To do this we have to create an <code>infoElements</code> field within the <code>contents</code> field in the <code>theme.json</code> file. The following snippet will create a promotional content that could be displayed in several areas (we will do this later):</p> <pre><code>\"contents\": {\n  \"linkPages\": [...],\n  \"infoElements\": [\n    {\n      \"id\": 1111101,\n      \"type\": \"content\",\n      \"position\": \"start\",\n      \"status\": 1,\n      \"title\": {\n        \"de\": \"Promotion\",\n        \"en\": \"Promotion\"\n      },\n      \"heading\": {\n        \"de\": \"Promotion\",\n        \"en\": \"Promotion\"\n      },\n      \"text\": {\n        \"de\": \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed ...\",\n        \"en\": \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed ...\"\n      }\n    }\n  ]\n}\n</code></pre> <p>The contents of linkPages have been shortened for the sake of clarity.</p>"},{"location":"theme-development/content-manager/#conclusion","title":"Conclusion","text":"<p>Now we have added Content Manager entries. You can already select the theme in the Gambio Admin. When activating it all defined Content Manager entries will be created.</p>"},{"location":"theme-development/extension/","title":"Extending a theme","text":"<p>In this part we will take a look at the power feature of the new theme system. We will create a new theme based on Malibu and in the following chapters we will design the new theme step by step.</p>"},{"location":"theme-development/extension/#creation-of-a-theme","title":"Creation of a theme","text":"<p>First we create a new theme. To do this, we navigate to the <code>theme</code> folder in our shop and create a new folder called <code>Darkness</code>.</p>"},{"location":"theme-development/extension/#configuration-file","title":"Configuration file","text":"<p>Then we change to the created folder and create a new file <code>theme.json</code>. The <code>theme.json</code> is the configuration file of the theme and contains important meta data in JSON format which is read by the shop.</p> <p>We open the file <code>theme.json</code> and add the following:</p> <pre><code>{\n  \"id\": \"Darkness\",\n  \"title\": \"Darkness\",\n  \"extends\": \"Malibu\",\n  \"author\": \"Gambio\",\n  \"version\": \"1.0.0\",\n  \"contents\": {}\n}\n</code></pre> <ul> <li>The <code>id</code> identifies our theme. It has to be exactly the same as the folder name.</li> <li>The <code>title</code> describes the title of the theme - this can be specified freely. It is often similar to the <code>id</code> and the   folder name, but is formatted differently. For example, the folder name and the <code>id</code> could be:   <code>GambioChristmasSpecial</code>, and the <code>title</code> could then be called <code>Gambio's Christmas Special Theme</code>.</li> <li>The field <code>extends</code> is optional. If our theme extends another theme, we have to enter the <code>id</code> of that theme as the   value. For example, if we want to inherit the theme <code>Malibu</code>, we have to enter <code>\"extends\": \"Malibu\"</code>. If, on the   other hand, we want to create a completely new theme, we exclude this field.</li> <li>The optional <code>author</code> field describes the author of the theme.</li> <li>The <code>version</code> is optional and describes the version of the theme. The format adheres to   Semantic Versioning.</li> <li>The last field <code>contents</code> is also optional and can contain content manager entries. You will learn more about it   in later chapters.</li> </ul>"},{"location":"theme-development/final/","title":"The final theme","text":"<p>Now we have created our own theme <code>Darkness</code> based on <code>Malibu</code>.</p> <p>We learned how the architecture of a theme is built and how the shop works with themes. In addition, we learned how to create our own theme based on another theme. Beyond that, we added our own content manager entries and assets to the theme.</p> <p>We also learned how to create overloading assets as well as our own assets, such as HTML templates, style sheets and JavaScripts.</p> <p>Finally, we learned how to add our own text phrases to the theme.</p> <p>Granted, the new theme is not quite crisp yet. But the goal of the workshop is to understand and use the theme system. Making it pretty is up to you!</p> <p>Download</p> <p>Click here to download the finished theme, which you can always use as a reference for matching or testing.</p>"},{"location":"theme-development/html-templates/","title":"Creating HTML templates","text":"<p>The new theme system allows to replace and extend the HTML templates of the parent theme. In addition, Smarty blocks can be replaced. You can also create your own HTML templates.</p>"},{"location":"theme-development/html-templates/#directory-structure","title":"Directory structure","text":"<p>In a theme directory there is a folder called <code>html</code>. This directory can contain two other directories, <code>system</code> and <code>custom</code>, each containing HTML templates.</p> <p>The structure looks like this:</p> <pre><code>Darkness\n \u2514\u2500 html\n     \u251c\u2500 system\n     \u2514\u2500 custom\n</code></pre> <p>Before we continue, please recreate the exact folder structure above in your <code>Darkness</code> theme.</p>"},{"location":"theme-development/html-templates/#the-system-folder","title":"The <code>system</code> folder","text":""},{"location":"theme-development/html-templates/#new-html-templates","title":"New HTML templates","text":"<p>Completely new HTML template files can be added by creating a new HTML file.</p> <p>Please note that the name of the HTML template has to be unique if another theme is extended. Otherwise the HTML template of a parent theme with the same name will be replaced.</p> <p>In our example, we create two new HTML templates in the <code>system</code> folder:</p> <p>File <code>darkness_map_widget.html</code>:</p> <pre><code>{* Map widget *}\n&lt;div id=\"darkness-map-widget\"&gt;\n   &lt;iframe src=\"https://maps.google.com/maps?q=parellelweg%2030%2C%2028219%20bremen&amp;t=&amp;z=17&amp;ie=UTF8&amp;iwloc=&amp;output=embed\"&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre> <p>and the file <code>darkness_video_widget.html</code>:</p> <pre><code>{* Video widget *}\n&lt;div id=\"darkness-video-widget\"&gt;\n  &lt;iframe src=\"https://www.youtube.com/embed/GrO5tFXuPNA?ecver=1&amp;amp;iv_load_policy=3&amp;amp;rel=0&amp;amp;showinfo=0&amp;amp;yt:stretch=16:9&amp;amp;autohide=1&amp;amp;color=white\"&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre> <p>Now the structure should look like this:</p> <pre><code>Darkness\n    \u2514\u2500\u2500\u2500 html\n          \u251c\u2500\u2500\u2500 system\n          \u2502       \u251c\u2500\u2500\u2500 darkness_map_widget.html\n          \u2502       \u2514\u2500\u2500\u2500 darkness_video_widget.html\n          \u2514\u2500\u2500\u2500 custom\n</code></pre> <p>The goal is to integrate the newly created HTML template into our theme by displaying it on the home page. More on this later.</p>"},{"location":"theme-development/html-templates/#replacing-html-templates","title":"Replacing HTML templates","text":"<p>Since we inherit <code>Darkness</code> from the parent theme <code>Malibu</code>, we can replace the HTML templates of <code>Malibu</code> in our theme.</p> <p>To do so, we have to create an HTML template in the <code>system</code> folder that has exactly the same name as the HTML template of the parent theme.</p> <p>You could, for example, remove the entire header by creating an empty file <code>layout_header.html</code> in the <code>system</code> folder. This would overload the <code>layout_header.html</code> file of the parent theme <code>Malibu</code>.Do not do this for now, as we need our header for further customizations in this workshop.</p>"},{"location":"theme-development/html-templates/#the-custom-folder","title":"The <code>custom</code> folder","text":""},{"location":"theme-development/html-templates/#extending-areas-of-multiple-html-templates","title":"Extending areas of multiple HTML templates","text":"<p>The new theme system also allows you to extend the Smarty blocks of various HTML templates of the parent theme. In doing so, you can extend several Smarty blocks from several HTML templates in a single file.</p> <p>It is important here that the name of the HTML template we're creating is unique and does not collide with the name of any HTML template from the parent theme.</p> <p>In this workshop we want to achieve these modifications:</p> <ul> <li>Replace the footer with the Maps widget we created earlier</li> <li>Insert a YouTube video below the main content</li> <li>Replace the logo with our custom text \"The Darkness\"</li> <li>Add a dark mode switcher to the top navigation bar</li> <li>Include the promotional Content Manager entry that we created previously and show it on the top of the main content</li> </ul> <p>We create a file called <code>darkness_modifications.html</code> in the <code>custom</code> folder of our <code>Darkness</code> theme and add the desired modifications into that file:</p> <pre><code>{* This file modifies blocks of all areas *}\n\n{* Replace logo *}\n{block name=\"layout_header_logo\"}\n  &lt;h1&gt;THE DARKNESS&lt;/h1&gt;\n{/block}\n\n{* Add dark mode switcher to top bar *}\n{block name=\"layout_secondary_navigation_wishlist_if\" append}\n  &lt;li class=\"navbar-topbar-item\" id=\"darkmode-switcher\"&gt;\n    &lt;a class=\"dropdown-toggle\" href=\"#\"&gt;\n      &lt;span&gt;\n        &lt;span class=\"fa fa-moon fa-2x\"&gt;&lt;/span&gt;\n        &lt;span class=\"fa fa-sun fa-2x\"&gt;&lt;/span&gt;\n      &lt;/span&gt;\n    &lt;/a&gt;\n  &lt;/li&gt;\n{/block}\n\n{* Insert content manager entry into the main content *}\n{block name=\"index_outer_wrapper_imageslider\" prepend}\n  &lt;div id=\"darkness-promotion\" class=\"container\"&gt;\n    {content_manager group=1111101}\n  &lt;/div&gt;\n{/block}\n</code></pre>"},{"location":"theme-development/html-templates/#extending-areas-of-a-specific-html-template","title":"Extending areas of a specific HTML template","text":"<p>Furthermore it's possible to extend only the areas of a specific HTML template. To do this, an HTML template with the same name as the HTML template to be extended has to be created in the <code>custom</code> folder of our <code>Darkness</code> theme, in the <code>system</code> folder of the parent theme.</p> <p>In our example, we only want to modify some areas of the index page. Therefore, we create the file <code>index.html</code> in the <code>custom</code> folder of our <code>Darkness</code> theme and then insert our modifications and include our previously defined HTML snippets:</p> <pre><code>{* This file modifes blocks in the index.html file of the parent theme only *}\n\n{* Replace footer with map widget *}\n{block name=\"index_inner_wrapper_footer\"}\n  {include file=\"get_usermod:{$tpl_path}darkness_map_widget.html\"}\n{/block}\n\n{* Insert video widget under the main content *}\n{block name=\"index_inner_wrapper_main_content\" append}\n  {include file=\"get_usermod:{$tpl_path}darkness_video_widget.html\"}\n{/block}\n</code></pre>"},{"location":"theme-development/html-templates/#conclusion","title":"Conclusion","text":"<p>At the end of this part of the workshop, we have created the following folder structure:</p> <pre><code>Darkness\n \u251c\u2500 ...\n \u2514\u2500 html\n     \u251c\u2500 system\n     \u2502   \u251c\u2500 darkness_map_widget.html\n     \u2502   \u2514\u2500 darkness_video_widget.html\n     \u2514\u2500 custom\n         \u251c\u2500 darkness_modifications.html\n         \u2514\u2500 index.html\n</code></pre> <p>Now we have learned how to work with HTML templates. You can see that we have complete flexibility for creating and extending HTML templates with the theme system.</p>"},{"location":"theme-development/scripts/","title":"Working with JavaScript files","text":"<p>The theme system also allows you to comfortably work with JavaScript files.</p>"},{"location":"theme-development/scripts/#directory-structure","title":"Directory structure","text":"<p>The files land in the <code>javascripts</code> folder of a theme directory. Again, there is a division into the <code>system</code> and <code>custom</code> directories.</p> <p>The JavaScript files are categorized as follows:</p> <pre><code>Darkness\n \u2514\u2500 javascripts\n     \u251c\u2500 system\n     \u2514\u2500 custom\n</code></pre> <p>Please recreate this folder structure so you can continue.</p>"},{"location":"theme-development/scripts/#the-system-folder","title":"The <code>system</code> folder","text":""},{"location":"theme-development/scripts/#replacing-and-removing-existing-javascript-files","title":"Replacing and removing existing JavaScript files","text":"<p>To replace or remove a JavaScript file of a parent theme, a JavaScript file has to be created in the theme's <code>system</code> folder, as with HTML templates and stylesheet files. This file has to have the same name as the parent theme file to be replaced. The folder structure has to be taken into account.</p> <p>In our example we do not want to have any page-up functionality. The button to go back to the top should not be displayed. To do this, the new files <code>pageup.js</code> and <code>pageup.min.js</code> have to be created in the <code>system</code> folder of our <code>Darkness</code> theme within a subfolder called <code>widgets</code>. Insert this content into both files:</p> <pre><code>// We just overload the \"pageup\" widget with this noop module to hide the back-to-top button\ngambio.widgets.module(\"pageup\", [], function () {\n  return {\n    init(done) {\n      done();\n    },\n  };\n});\n</code></pre> <p>The minified JavaScript file (with the extension <code>min.js</code>) is loaded for productive use, while the other file (<code>.js</code>) is used for the development environment.</p>"},{"location":"theme-development/scripts/#the-custom-folder","title":"The <code>custom</code> folder","text":""},{"location":"theme-development/scripts/#global-javascript-files","title":"Global JavaScript files","text":"<p>As with the style files, it is also possible to create new files for JavaScript files, which are loaded on every page of the shop. To do this, a JavaScript file has to be created in the <code>custom</code> folder of the theme, which has a unique name and does not collide with existing JavaScript files of the parent theme.</p> <p>For our Darkness Theme we will create the JavaScript handler for the dark mode switcher button. We will create a new JavaScript file with the unique name <code>darkness_switcher.js</code>, in the <code>custom</code> folder of our <code>Darkness</code> theme. The content of this file looks like this:</p> <pre><code>// Add dark mode toggle functionality. This script is always invoked\n(function () {\n  const switcher = document.querySelector(\"#darkmode-switcher\");\n\n  switcher.addEventListener(\"click\", () =&gt;\n    document.body.classList.toggle(\"darkmode\")\n  );\n\n  switcher.click();\n})();\n</code></pre>"},{"location":"theme-development/scripts/#javascript-files-for-specific-areas","title":"JavaScript files for specific areas","text":"<p>It is still possible to create your own JavaScript files for certain areas of the shop. For this purpose, a subfolder, which has a specific name, has to be created in the <code>custom</code> folder of the theme. Below are some examples:</p> <ul> <li><code>Cart</code> for shopping cart page</li> <li><code>Index</code> for the home page</li> <li><code>Account</code> for the profile page</li> </ul> <p>For our example theme we would like to create a JavaScript file that is only executed on the start page of the shop. Therefore we create a subfolder <code>Index</code> in the <code>custom</code> folder of our <code>Darkness</code> theme and, in this folder, create a new file called <code>darkness_greeting.js</code> with a <code>console.log()</code> statement and arbitrary text as content:</p> <pre><code>// This file is executed on the main page only\n(function () {\n  console.log(\"Hello from the dark side!\");\n})();\n</code></pre>"},{"location":"theme-development/scripts/#conclusion","title":"Conclusion","text":"<p>In this part of the workshop we learned about the functions for working with JavaScript files. We already knew some things from the old template system, such as creating area-specific JavaScript files.</p> <p>The <code>javascripts</code> directory of our <code>Darkness</code> theme should now have the following structure:</p> <pre><code>Darkness\n \u2514\u2500 javascripts\n     \u251c\u2500 system\n     \u2502   \u2514\u2500 widgets\n     \u2502       \u251c\u2500 pageup.js\n     \u2502       \u2514\u2500 pageup.min.js\n     \u2514\u2500 custom\n         \u251c\u2500 darkness_switcher.js\n         \u2514\u2500 Index\n              \u2514\u2500 darkness_greeting.js\n</code></pre>"},{"location":"theme-development/styles/","title":"Working with stylesheets","text":"<p>We can easily extend, replace and add stylesheet files with the new theme system.</p>"},{"location":"theme-development/styles/#directory-structure","title":"Directory structure","text":"<p>The styles are placed in the <code>styles</code> folder of a theme directory. As with the HTML templates, there also is a division into the <code>system</code> and <code>custom</code> directories.</p> <p>This is what the structure looks like:</p> <pre><code>Darkness\n \u2514\u2500 styles\n     \u251c\u2500 system\n     \u2514\u2500 custom\n</code></pre> <p>Please recreate this folder structure again before you continue.</p>"},{"location":"theme-development/styles/#the-system-folder","title":"The <code>system</code> folder","text":""},{"location":"theme-development/styles/#new-stylesheets","title":"New stylesheets","text":"<p>To create a new style for a theme, a new <code>.scss</code> file has to be created in the <code>system</code> folder. Make sure that the name is unique and does not coincide with the name of a style file in the parent theme.</p> <p>For our example we will create several <code>.scss</code> files. First of all, let's stylize our HTML widgets we created earlier:</p> <p>Create the file <code>darkness_map_widget.scss</code> with this content:</p> <pre><code>// Map widget\n#darkness-map-widget {\n  transition: ease 0.5s opacity;\n  opacity: 0.75;\n\n  &gt; iframe {\n    width: 100%;\n    height: 500px;\n    border: 0;\n    margin: 0;\n    overflow: hidden;\n    background: none !important;\n  }\n\n  &amp;:hover {\n    opacity: 1;\n  }\n}\n</code></pre> <p>Next, create the file <code>darkness_video_widget.scss</code> with this content:</p> <pre><code>// Video widget\n#darkness-video-widget {\n  text-align: center;\n\n  &gt; iframe {\n    width: 885px;\n    height: 350px;\n    border: 0;\n    margin: 0;\n    overflow: hidden;\n  }\n}\n</code></pre> <p>Now, let's create the stylesheet for the dark mode. Create the file <code>darkness_mode.scss</code> and insert this:</p> <pre><code>// Dark mode styles\n$light-color: white !important;\n$dark-color: #212121 !important;\n\nbody.darkmode {\n  color: $light-color;\n  background-color: $dark-color;\n\n  #outer-wrapper,\n  #header,\n  .swiper-slide,\n  .product-container,\n  #topbar-container,\n  .navbar-default,\n  ul.navbar-nav,\n  .navbar-nav a,\n  #categories {\n    background-color: $dark-color;\n  }\n\n  h1,\n  h2,\n  .product-container *,\n  .cart,\n  .navbar-nav a {\n    color: $light-color;\n  }\n\n  #header svg,\n  #header svg * {\n    fill: $light-color;\n  }\n\n  #header .gambio-admin a,\n  h1::after,\n  h2::after {\n    background-color: $light-color;\n    color: $dark-color;\n  }\n}\n</code></pre> <p>And finally, let's stylize our dark mode switcher in the navigation menu by creating the file <code>darkness_switcher.scss</code> with this content:</p> <pre><code>// Dark mode switcher\nbody {\n  #darkmode-switcher {\n    &gt; a {\n      &amp;:hover,\n      &amp;:focus {\n        background-color: transparent !important;\n      }\n\n      &gt; span {\n        position: relative;\n        top: 4px;\n\n        &gt; .fa-moon {\n          display: initial;\n        }\n\n        &gt; .fa-sun {\n          display: none;\n        }\n      }\n    }\n  }\n\n  &amp;.darkmode {\n    #darkmode-switcher {\n      .fa-moon {\n        display: none;\n      }\n\n      .fa-sun {\n        display: initial;\n      }\n    }\n  }\n}\n</code></pre> <p>Please note that these style sheets are not automatically included. We will come to that step later.</p>"},{"location":"theme-development/styles/#the-custom-folder","title":"The <code>custom</code> folder","text":""},{"location":"theme-development/styles/#global-stylesheets","title":"Global stylesheets","text":"<p>With the new theme system, it is possible to load your own stylesheets on every page of the shop in a comfortable way. An exemplary use case is when you want to apply a stylesheet that influences many different areas of the shop.</p> <p>As with HTML templates, it is also possible to create only one file that contains all style definitions and inclusions. Fot this it is important that the file name is unique and does not collide with any stylesheet file from the parent theme.</p> <p>In our example we want to include our stylesheets for our modifications and add some additional small style changes. In order to do this we create a new file <code>darkness.scss</code> in the <code>custom</code> folder of our <code>Darkness</code> theme and insert this content:</p> <pre><code>#header .gambio-admin {\n  left: 0;\n}\n\n#darkness-promotion {\n  margin: 6rem auto;\n  border-radius: 12px;\n  padding: 12px;\n  background-color: white;\n  color: #212121;\n  font-size: 2rem;\n}\n\n@import \"../system/darkness_map_widget\";\n@import \"../system/darkness_video_widget\";\n@import \"../system/darkness_mode\";\n@import \"../system/darkness_switcher\";\n</code></pre>"},{"location":"theme-development/styles/#conclusion","title":"Conclusion","text":"<p>At the end of this workshop part the folder structure should look like this:</p> <pre><code>Darkness\n \u2514\u2500 styles\n     \u251c\u2500 system\n     \u2502   \u251c\u2500 darkness_map_widget.scss\n     \u2502   \u251c\u2500 darkness_video_widget.scss\n     \u2502   \u251c\u2500 darkness_mode.scss\n     \u2502   \u2514\u2500 darkness_switcher.scss\n     \u2514\u2500 custom\n         \u2514\u2500 darkness.scss\n</code></pre> <p>We have now learned how to add and extend stylesheets.</p>"},{"location":"theme-development/text-phrases/","title":"Working with language files","text":"<p>You can easily create individual text phrases for each theme.</p>"},{"location":"theme-development/text-phrases/#directory-structure","title":"Directory structure","text":"<p>All text phrases are placed into the <code>TextPhrases</code> folder of a theme. There a separate directory is created for each language, as you can see below:</p> <ul> <li><code>german</code></li> <li><code>english</code></li> </ul> <p>In these language directories <code>.php</code> files containing the text phrases are created. We can look at how the folder structure for text phrases is structured below:</p> <pre><code>Darkness\n \u2514\u2500 TextPhrases\n     \u251c\u2500 english\n     \u2502   \u2514\u2500 darkness.lang.inc.php\n     \u2514\u2500 german\n         \u2514\u2500 darkness.lang.inc.php\n</code></pre>"},{"location":"theme-development/text-phrases/#text-phrase-file-anatomy","title":"Text phrase file anatomy","text":"<p>A text phrase file always has the extension <code>lang.inc.php</code> and contains a two-dimensional PHP array called <code>$t_language_text_section_content_array</code>. The content of the array is always structured according to the following scheme: <code>Identifier =&gt; Phrase</code>.</p> <p>This can be illustrated using the following example for a German text phrase file:</p> <pre><code>$t_language_text_section_content_array = [\n    'title' =&gt; 'Darkness',\n    'description' =&gt; 'Das dunkle Theme mit starken Kontrasten'\n];\n</code></pre> <p>For our <code>Darkness</code> theme we create the files <code>darkness.lang.inc.php</code> in the folders <code>german</code> and <code>english</code>, within a <code>TextPhrases</code> folder for the languages German and English. We take the above example as file content and translate it for the English text phrases file:</p> <pre><code>$t_language_text_section_content_array = [\n    'title' =&gt; 'Darkness',\n    'description' =&gt; 'The dark theme with strong contrasts'\n];\n</code></pre> <p>Now we should have the exact same folder structure as in the example shown above.</p>"}]}